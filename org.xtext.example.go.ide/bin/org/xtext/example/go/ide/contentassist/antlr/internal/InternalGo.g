/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.go.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.go.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.go.services.GoGrammarAccess;

}
@parser::members {
	private GoGrammarAccess grammarAccess;

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
		(rule__Model__GreetingsAssignment)*
		{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGreeting
entryRuleGreeting
:
{ before(grammarAccess.getGreetingRule()); }
	 ruleGreeting
{ after(grammarAccess.getGreetingRule()); } 
	 EOF 
;

// Rule Greeting
ruleGreeting 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGreetingAccess().getSourceFileParserRuleCall()); }
		ruleSourceFile
		{ after(grammarAccess.getGreetingAccess().getSourceFileParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSourceFile
entryRuleSourceFile
:
{ before(grammarAccess.getSourceFileRule()); }
	 ruleSourceFile
{ after(grammarAccess.getSourceFileRule()); } 
	 EOF 
;

// Rule SourceFile
ruleSourceFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSourceFileAccess().getGroup()); }
		(rule__SourceFile__Group__0)
		{ after(grammarAccess.getSourceFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTopLevelDecl
entryRuleTopLevelDecl
:
{ before(grammarAccess.getTopLevelDeclRule()); }
	 ruleTopLevelDecl
{ after(grammarAccess.getTopLevelDeclRule()); } 
	 EOF 
;

// Rule TopLevelDecl
ruleTopLevelDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getAlternatives()); }
		(rule__TopLevelDecl__Alternatives)
		{ after(grammarAccess.getTopLevelDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportDecl
entryRuleImportDecl
:
{ before(grammarAccess.getImportDeclRule()); }
	 ruleImportDecl
{ after(grammarAccess.getImportDeclRule()); } 
	 EOF 
;

// Rule ImportDecl
ruleImportDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportDeclAccess().getGroup()); }
		(rule__ImportDecl__Group__0)
		{ after(grammarAccess.getImportDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImportSpec
entryRuleImportSpec
:
{ before(grammarAccess.getImportSpecRule()); }
	 ruleImportSpec
{ after(grammarAccess.getImportSpecRule()); } 
	 EOF 
;

// Rule ImportSpec
ruleImportSpec 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportSpecAccess().getGroup()); }
		(rule__ImportSpec__Group__0)
		{ after(grammarAccess.getImportSpecAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePackage
entryRulePackage
:
{ before(grammarAccess.getPackageRule()); }
	 rulePackage
{ after(grammarAccess.getPackageRule()); } 
	 EOF 
;

// Rule Package
rulePackage 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPackageAccess().getGroup()); }
		(rule__Package__Group__0)
		{ after(grammarAccess.getPackageAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStmt
entryRuleForStmt
:
{ before(grammarAccess.getForStmtRule()); }
	 ruleForStmt
{ after(grammarAccess.getForStmtRule()); } 
	 EOF 
;

// Rule ForStmt
ruleForStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStmtAccess().getGroup()); }
		(rule__ForStmt__Group__0)
		{ after(grammarAccess.getForStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForClause
entryRuleForClause
:
{ before(grammarAccess.getForClauseRule()); }
	 ruleForClause
{ after(grammarAccess.getForClauseRule()); } 
	 EOF 
;

// Rule ForClause
ruleForClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForClauseAccess().getGroup()); }
		(rule__ForClause__Group__0)
		{ after(grammarAccess.getForClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRangeClause
entryRuleRangeClause
:
{ before(grammarAccess.getRangeClauseRule()); }
	 ruleRangeClause
{ after(grammarAccess.getRangeClauseRule()); } 
	 EOF 
;

// Rule RangeClause
ruleRangeClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRangeClauseAccess().getGroup()); }
		(rule__RangeClause__Group__0)
		{ after(grammarAccess.getRangeClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFuncDecl
entryRuleFuncDecl
:
{ before(grammarAccess.getFuncDeclRule()); }
	 ruleFuncDecl
{ after(grammarAccess.getFuncDeclRule()); } 
	 EOF 
;

// Rule FuncDecl
ruleFuncDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFuncDeclAccess().getGroup()); }
		(rule__FuncDecl__Group__0)
		{ after(grammarAccess.getFuncDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReceiver
entryRuleReceiver
:
{ before(grammarAccess.getReceiverRule()); }
	 ruleReceiver
{ after(grammarAccess.getReceiverRule()); } 
	 EOF 
;

// Rule Receiver
ruleReceiver 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReceiverAccess().getParametersParserRuleCall()); }
		ruleParameters
		{ after(grammarAccess.getReceiverAccess().getParametersParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSignature
entryRuleSignature
:
{ before(grammarAccess.getSignatureRule()); }
	 ruleSignature
{ after(grammarAccess.getSignatureRule()); } 
	 EOF 
;

// Rule Signature
ruleSignature 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSignatureAccess().getGroup()); }
		(rule__Signature__Group__0)
		{ after(grammarAccess.getSignatureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleResult
entryRuleResult
:
{ before(grammarAccess.getResultRule()); }
	 ruleResult
{ after(grammarAccess.getResultRule()); } 
	 EOF 
;

// Rule Result
ruleResult 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getResultAccess().getAlternatives()); }
		(rule__Result__Alternatives)
		{ after(grammarAccess.getResultAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameters
entryRuleParameters
:
{ before(grammarAccess.getParametersRule()); }
	 ruleParameters
{ after(grammarAccess.getParametersRule()); } 
	 EOF 
;

// Rule Parameters
ruleParameters 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParametersAccess().getGroup()); }
		(rule__Parameters__Group__0)
		{ after(grammarAccess.getParametersAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterList
entryRuleParameterList
:
{ before(grammarAccess.getParameterListRule()); }
	 ruleParameterList
{ after(grammarAccess.getParameterListRule()); } 
	 EOF 
;

// Rule ParameterList
ruleParameterList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterListAccess().getGroup()); }
		(rule__ParameterList__Group__0)
		{ after(grammarAccess.getParameterListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleParameterDecl
entryRuleParameterDecl
:
{ before(grammarAccess.getParameterDeclRule()); }
	 ruleParameterDecl
{ after(grammarAccess.getParameterDeclRule()); } 
	 EOF 
;

// Rule ParameterDecl
ruleParameterDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getParameterDeclAccess().getGroup()); }
		(rule__ParameterDecl__Group__0)
		{ after(grammarAccess.getParameterDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchStmt
entryRuleSwitchStmt
:
{ before(grammarAccess.getSwitchStmtRule()); }
	 ruleSwitchStmt
{ after(grammarAccess.getSwitchStmtRule()); } 
	 EOF 
;

// Rule SwitchStmt
ruleSwitchStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchStmtAccess().getGroup()); }
		(rule__SwitchStmt__Group__0)
		{ after(grammarAccess.getSwitchStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchCase
entryRuleSwitchCase
:
{ before(grammarAccess.getSwitchCaseRule()); }
	 ruleSwitchCase
{ after(grammarAccess.getSwitchCaseRule()); } 
	 EOF 
;

// Rule SwitchCase
ruleSwitchCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchCaseAccess().getGroup()); }
		(rule__SwitchCase__Group__0)
		{ after(grammarAccess.getSwitchCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStmt
entryRuleIfStmt
:
{ before(grammarAccess.getIfStmtRule()); }
	 ruleIfStmt
{ after(grammarAccess.getIfStmtRule()); } 
	 EOF 
;

// Rule IfStmt
ruleIfStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStmtAccess().getGroup()); }
		(rule__IfStmt__Group__0)
		{ after(grammarAccess.getIfStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnderson
entryRuleAnderson
:
{ before(grammarAccess.getAndersonRule()); }
	 ruleAnderson
{ after(grammarAccess.getAndersonRule()); } 
	 EOF 
;

// Rule Anderson
ruleAnderson 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndersonAccess().getGroup()); }
		(rule__Anderson__Group__0)
		{ after(grammarAccess.getAndersonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlock
entryRuleBlock
:
{ before(grammarAccess.getBlockRule()); }
	 ruleBlock
{ after(grammarAccess.getBlockRule()); } 
	 EOF 
;

// Rule Block
ruleBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockAccess().getGroup()); }
		(rule__Block__Group__0)
		{ after(grammarAccess.getBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnStmt
entryRuleReturnStmt
:
{ before(grammarAccess.getReturnStmtRule()); }
	 ruleReturnStmt
{ after(grammarAccess.getReturnStmtRule()); } 
	 EOF 
;

// Rule ReturnStmt
ruleReturnStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStmtAccess().getGroup()); }
		(rule__ReturnStmt__Group__0)
		{ after(grammarAccess.getReturnStmtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeDef
entryRuleTypeDef
:
{ before(grammarAccess.getTypeDefRule()); }
	 ruleTypeDef
{ after(grammarAccess.getTypeDefRule()); } 
	 EOF 
;

// Rule TypeDef
ruleTypeDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeDefAccess().getGroup()); }
		(rule__TypeDef__Group__0)
		{ after(grammarAccess.getTypeDefAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStruct
entryRuleStruct
:
{ before(grammarAccess.getStructRule()); }
	 ruleStruct
{ after(grammarAccess.getStructRule()); } 
	 EOF 
;

// Rule Struct
ruleStruct 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStructAccess().getGroup()); }
		(rule__Struct__Group__0)
		{ after(grammarAccess.getStructAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFieldDecl
entryRuleFieldDecl
:
{ before(grammarAccess.getFieldDeclRule()); }
	 ruleFieldDecl
{ after(grammarAccess.getFieldDeclRule()); } 
	 EOF 
;

// Rule FieldDecl
ruleFieldDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldDeclAccess().getGroup()); }
		(rule__FieldDecl__Group__0)
		{ after(grammarAccess.getFieldDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDecl
entryRuleDecl
:
{ before(grammarAccess.getDeclRule()); }
	 ruleDecl
{ after(grammarAccess.getDeclRule()); } 
	 EOF 
;

// Rule Decl
ruleDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclAccess().getAlternatives()); }
		(rule__Decl__Alternatives)
		{ after(grammarAccess.getDeclAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleShortVarDecl
entryRuleShortVarDecl
:
{ before(grammarAccess.getShortVarDeclRule()); }
	 ruleShortVarDecl
{ after(grammarAccess.getShortVarDeclRule()); } 
	 EOF 
;

// Rule ShortVarDecl
ruleShortVarDecl 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getShortVarDeclAccess().getGroup()); }
		(rule__ShortVarDecl__Group__0)
		{ after(grammarAccess.getShortVarDeclAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssig
entryRuleAssig
:
{ before(grammarAccess.getAssigRule()); }
	 ruleAssig
{ after(grammarAccess.getAssigRule()); } 
	 EOF 
;

// Rule Assig
ruleAssig 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssigAccess().getGroup()); }
		(rule__Assig__Group__0)
		{ after(grammarAccess.getAssigAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdList
entryRuleIdList
:
{ before(grammarAccess.getIdListRule()); }
	 ruleIdList
{ after(grammarAccess.getIdListRule()); } 
	 EOF 
;

// Rule IdList
ruleIdList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdListAccess().getGroup()); }
		(rule__IdList__Group__0)*
		{ after(grammarAccess.getIdListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpList
entryRuleExpList
:
{ before(grammarAccess.getExpListRule()); }
	 ruleExpList
{ after(grammarAccess.getExpListRule()); } 
	 EOF 
;

// Rule ExpList
ruleExpList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpListAccess().getGroup()); }
		(rule__ExpList__Group__0)*
		{ after(grammarAccess.getExpListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExp
entryRuleExp
:
{ before(grammarAccess.getExpRule()); }
	 ruleExp
{ after(grammarAccess.getExpRule()); } 
	 EOF 
;

// Rule Exp
ruleExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAccess().getAlternatives()); }
		(rule__Exp__Alternatives)
		{ after(grammarAccess.getExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSimpleStmt
entryRuleSimpleStmt
:
{ before(grammarAccess.getSimpleStmtRule()); }
	 ruleSimpleStmt
{ after(grammarAccess.getSimpleStmtRule()); } 
	 EOF 
;

// Rule SimpleStmt
ruleSimpleStmt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSimpleStmtAccess().getAlternatives()); }
		(rule__SimpleStmt__Alternatives)
		{ after(grammarAccess.getSimpleStmtAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpAux
entryRuleExpAux
:
{ before(grammarAccess.getExpAuxRule()); }
	 ruleExpAux
{ after(grammarAccess.getExpAuxRule()); } 
	 EOF 
;

// Rule ExpAux
ruleExpAux 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpAuxAccess().getGroup()); }
		(rule__ExpAux__Group__0)
		{ after(grammarAccess.getExpAuxAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCall
entryRuleCall
:
{ before(grammarAccess.getCallRule()); }
	 ruleCall
{ after(grammarAccess.getCallRule()); } 
	 EOF 
;

// Rule Call
ruleCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCallAccess().getGroup()); }
		(rule__Call__Group__0)
		{ after(grammarAccess.getCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpJoin
entryRuleExpJoin
:
{ before(grammarAccess.getExpJoinRule()); }
	 ruleExpJoin
{ after(grammarAccess.getExpJoinRule()); } 
	 EOF 
;

// Rule ExpJoin
ruleExpJoin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpJoinAccess().getGroup()); }
		(rule__ExpJoin__Group__0)
		{ after(grammarAccess.getExpJoinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRelExp
entryRuleRelExp
:
{ before(grammarAccess.getRelExpRule()); }
	 ruleRelExp
{ after(grammarAccess.getRelExpRule()); } 
	 EOF 
;

// Rule RelExp
ruleRelExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRelExpAccess().getAlternatives()); }
		(rule__RelExp__Alternatives)
		{ after(grammarAccess.getRelExpAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp
:
{ before(grammarAccess.getBooleanExpRule()); }
	 ruleBooleanExp
{ after(grammarAccess.getBooleanExpRule()); } 
	 EOF 
;

// Rule BooleanExp
ruleBooleanExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanExpAccess().getOrParserRuleCall()); }
		ruleOr
		{ after(grammarAccess.getBooleanExpAccess().getOrParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOr
entryRuleOr
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrAccess().getGroup()); }
		(rule__Or__Group__0)
		{ after(grammarAccess.getOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAnd
entryRuleAnd
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndAccess().getGroup()); }
		(rule__And__Group__0)
		{ after(grammarAccess.getAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral
:
{ before(grammarAccess.getBooleanLiteralRule()); }
	 ruleBooleanLiteral
{ after(grammarAccess.getBooleanLiteralRule()); } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanLiteralAccess().getBOOLTerminalRuleCall()); }
		RULE_BOOL
		{ after(grammarAccess.getBooleanLiteralAccess().getBOOLTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAritExp
entryRuleAritExp
:
{ before(grammarAccess.getAritExpRule()); }
	 ruleAritExp
{ after(grammarAccess.getAritExpRule()); } 
	 EOF 
;

// Rule AritExp
ruleAritExp 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAritExpAccess().getAdditionParserRuleCall()); }
		ruleAddition
		{ after(grammarAccess.getAritExpAccess().getAdditionParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getAdditionAccess().getGroup()); }
			(rule__Addition__Group__0)
			{ after(grammarAccess.getAdditionAccess().getGroup()); }
		)
		(
			{ before(grammarAccess.getAdditionAccess().getGroup()); }
			(rule__Addition__Group__0)*
			{ after(grammarAccess.getAdditionAccess().getGroup()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall()); }
		RULE_INT
		{ after(grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTypeName
entryRuleTypeName
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTypeNameAccess().getAlternatives()); }
		(rule__TypeName__Alternatives)
		{ after(grammarAccess.getTypeNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedIdent
entryRuleQualifiedIdent
:
{ before(grammarAccess.getQualifiedIdentRule()); }
	 ruleQualifiedIdent
{ after(grammarAccess.getQualifiedIdentRule()); } 
	 EOF 
;

// Rule QualifiedIdent
ruleQualifiedIdent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedIdentAccess().getGroup()); }
		(rule__QualifiedIdent__Group__0)
		{ after(grammarAccess.getQualifiedIdentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getGroup_0()); }
		(rule__TopLevelDecl__Group_0__0)
		{ after(grammarAccess.getTopLevelDeclAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getFuncDeclParserRuleCall_1()); }
		ruleFuncDecl
		{ after(grammarAccess.getTopLevelDeclAccess().getFuncDeclParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTopLevelDeclAccess().getGroup_2()); }
		(rule__TopLevelDecl__Group_2__0)
		{ after(grammarAccess.getTopLevelDeclAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0()); }
		ruleImportSpec
		{ after(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportDeclAccess().getGroup_1_1()); }
		(rule__ImportDecl__Group_1_1__0)
		{ after(grammarAccess.getImportDeclAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0()); }
		'.'
		{ after(grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getImportSpecAccess().getIDTerminalRuleCall_0_1()); }
		RULE_ID
		{ after(grammarAccess.getImportSpecAccess().getIDTerminalRuleCall_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStmtAccess().getGroup_1_0()); }
		(rule__ForStmt__Group_1_0__0)
		{ after(grammarAccess.getForStmtAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1()); }
		ruleForClause
		{ after(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_0()); }
		':='
		{ after(grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_1_1()); }
		'='
		{ after(grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Result__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getResultAccess().getParametersParserRuleCall_0()); }
		ruleParameters
		{ after(grammarAccess.getResultAccess().getParametersParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getResultAccess().getTypeNameParserRuleCall_1()); }
		ruleTypeName
		{ after(grammarAccess.getResultAccess().getTypeNameParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStmtAccess().getIfStmtAssignment_4_1_0()); }
		(rule__IfStmt__IfStmtAssignment_4_1_0)
		{ after(grammarAccess.getIfStmtAccess().getIfStmtAssignment_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfStmtAccess().getBlockAssignment_4_1_1()); }
		(rule__IfStmt__BlockAssignment_4_1_1)
		{ after(grammarAccess.getIfStmtAccess().getBlockAssignment_4_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndersonAccess().getDeclParserRuleCall_1_0_0()); }
		ruleDecl
		{ after(grammarAccess.getAndersonAccess().getDeclParserRuleCall_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndersonAccess().getAssigAssignment_1_0_1()); }
		(rule__Anderson__AssigAssignment_1_0_1)
		{ after(grammarAccess.getAndersonAccess().getAssigAssignment_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAndersonAccess().getExpParserRuleCall_1_0_2()); }
		ruleExp
		{ after(grammarAccess.getAndersonAccess().getExpParserRuleCall_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_0()); }
		ruleSimpleStmt
		{ after(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_1()); }
		ruleIfStmt
		{ after(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSwitchStmtAssignment_2()); }
		(rule__Statement__SwitchStmtAssignment_2)
		{ after(grammarAccess.getStatementAccess().getSwitchStmtAssignment_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getGroup_3()); }
		(rule__Statement__Group_3__0)
		{ after(grammarAccess.getStatementAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getForStmtParserRuleCall_4()); }
		ruleForStmt
		{ after(grammarAccess.getStatementAccess().getForStmtParserRuleCall_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclAccess().getShortVarDeclParserRuleCall_0()); }
		ruleShortVarDecl
		{ after(grammarAccess.getDeclAccess().getShortVarDeclParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclAccess().getGroup_1()); }
		(rule__Decl__Group_1__0)
		{ after(grammarAccess.getDeclAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclAccess().getVarKeyword_1_0_0()); }
		'var'
		{ after(grammarAccess.getDeclAccess().getVarKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getDeclAccess().getConstKeyword_1_0_1()); }
		'const'
		{ after(grammarAccess.getDeclAccess().getConstKeyword_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getGroup_1_0()); }
		(rule__Assig__Group_1_0__0)
		{ after(grammarAccess.getAssigAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssigAccess().getAlternatives_1_1()); }
		(rule__Assig__Alternatives_1_1)
		{ after(grammarAccess.getAssigAccess().getAlternatives_1_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssigAccess().getGroup_1_2()); }
		(rule__Assig__Group_1_2__0)
		{ after(grammarAccess.getAssigAccess().getGroup_1_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Alternatives_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getPlusSignPlusSignKeyword_1_1_0()); }
		'++'
		{ after(grammarAccess.getAssigAccess().getPlusSignPlusSignKeyword_1_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssigAccess().getHyphenMinusHyphenMinusKeyword_1_1_1()); }
		'--'
		{ after(grammarAccess.getAssigAccess().getHyphenMinusHyphenMinusKeyword_1_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Alternatives_1_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getPlusSignEqualsSignKeyword_1_2_0_0()); }
		'+='
		{ after(grammarAccess.getAssigAccess().getPlusSignEqualsSignKeyword_1_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssigAccess().getHyphenMinusEqualsSignKeyword_1_2_0_1()); }
		'-='
		{ after(grammarAccess.getAssigAccess().getHyphenMinusEqualsSignKeyword_1_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getAssigAccess().getAsteriskEqualsSignKeyword_1_2_0_2()); }
		'*='
		{ after(grammarAccess.getAssigAccess().getAsteriskEqualsSignKeyword_1_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getAssigAccess().getSolidusEqualsSignKeyword_1_2_0_3()); }
		'/='
		{ after(grammarAccess.getAssigAccess().getSolidusEqualsSignKeyword_1_2_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpAccess().getCallParserRuleCall_0()); }
		ruleCall
		{ after(grammarAccess.getExpAccess().getCallParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getExpAuxParserRuleCall_1()); }
		ruleExpAux
		{ after(grammarAccess.getExpAccess().getExpAuxParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_2()); }
		(rule__Exp__Group_2__0)
		{ after(grammarAccess.getExpAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_3()); }
		(rule__Exp__Group_3__0)
		{ after(grammarAccess.getExpAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getSTRINGTerminalRuleCall_4()); }
		RULE_STRING
		{ after(grammarAccess.getExpAccess().getSTRINGTerminalRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getRelExpParserRuleCall_5()); }
		ruleRelExp
		{ after(grammarAccess.getExpAccess().getRelExpParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getExpAccess().getGroup_6()); }
		(rule__Exp__Group_6__0)
		{ after(grammarAccess.getExpAccess().getGroup_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSimpleStmtAccess().getGroup_0()); }
		(rule__SimpleStmt__Group_0__0)
		{ after(grammarAccess.getSimpleStmtAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getAssigParserRuleCall_1()); }
		ruleAssig
		{ after(grammarAccess.getSimpleStmtAccess().getAssigParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getSimpleStmtAccess().getGroup_2()); }
		(rule__SimpleStmt__Group_2__0)
		{ after(grammarAccess.getSimpleStmtAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpJoin__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpJoinAccess().getOP_RELTerminalRuleCall_0_0()); }
		RULE_OP_REL
		{ after(grammarAccess.getExpJoinAccess().getOP_RELTerminalRuleCall_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpJoinAccess().getOP_UNARYTerminalRuleCall_0_1()); }
		RULE_OP_UNARY
		{ after(grammarAccess.getExpJoinAccess().getOP_UNARYTerminalRuleCall_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getExpJoinAccess().getOP_SUMTerminalRuleCall_0_2()); }
		RULE_OP_SUM
		{ after(grammarAccess.getExpJoinAccess().getOP_SUMTerminalRuleCall_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getExpJoinAccess().getOP_MULTTerminalRuleCall_0_3()); }
		RULE_OP_MULT
		{ after(grammarAccess.getExpJoinAccess().getOP_MULTTerminalRuleCall_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getExpJoinAccess().getAmpersandAmpersandKeyword_0_4()); }
		'&&'
		{ after(grammarAccess.getExpJoinAccess().getAmpersandAmpersandKeyword_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getExpJoinAccess().getVerticalLineVerticalLineKeyword_0_5()); }
		'||'
		{ after(grammarAccess.getExpJoinAccess().getVerticalLineVerticalLineKeyword_0_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelExpAccess().getGroup_0()); }
		(rule__RelExp__Group_0__0)
		{ after(grammarAccess.getRelExpAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelExpAccess().getGroup_1()); }
		(rule__RelExp__Group_1__0)
		{ after(grammarAccess.getRelExpAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Alternatives_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRelExpAccess().getOP_RELTerminalRuleCall_0_1_0()); }
		RULE_OP_REL
		{ after(grammarAccess.getRelExpAccess().getOP_RELTerminalRuleCall_0_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_0_1_1()); }
		RULE_OP_UNARY
		{ after(grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_0_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeNameAccess().getBASIC_TYPESTerminalRuleCall_0()); }
		RULE_BASIC_TYPES
		{ after(grammarAccess.getTypeNameAccess().getBASIC_TYPESTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1()); }
		ruleQualifiedIdent
		{ after(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_2()); }
		RULE_ID
		{ after(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeNameAccess().getStructParserRuleCall_3()); }
		ruleStruct
		{ after(grammarAccess.getTypeNameAccess().getStructParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__0__Impl
	rule__SourceFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getSourceFileAction_0()); }
	()
	{ after(grammarAccess.getSourceFileAccess().getSourceFileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__1__Impl
	rule__SourceFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getPackageParserRuleCall_1()); }
	rulePackage
	{ after(grammarAccess.getSourceFileAccess().getPackageParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__2__Impl
	rule__SourceFile__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getSemicolonKeyword_2()); }
	(';')?
	{ after(grammarAccess.getSourceFileAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__3__Impl
	rule__SourceFile__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getGroup_3()); }
	(rule__SourceFile__Group_3__0)*
	{ after(grammarAccess.getSourceFileAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getGroup_4()); }
	(rule__SourceFile__Group_4__0)*
	{ after(grammarAccess.getSourceFileAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFile__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_3__0__Impl
	rule__SourceFile__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_3_0()); }
	ruleImportDecl
	{ after(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1()); }
	(';')?
	{ after(grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SourceFile__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_4__0__Impl
	rule__SourceFile__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getTopLevelDeclAssignment_4_0()); }
	(rule__SourceFile__TopLevelDeclAssignment_4_0)
	{ after(grammarAccess.getSourceFileAccess().getTopLevelDeclAssignment_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SourceFile__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSourceFileAccess().getSemicolonKeyword_4_1()); }
	(';')?
	{ after(grammarAccess.getSourceFileAccess().getSemicolonKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TopLevelDecl__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelDecl__Group_0__0__Impl
	rule__TopLevelDecl__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelDeclAccess().getTopLevelDeclAction_0_0()); }
	()
	{ after(grammarAccess.getTopLevelDeclAccess().getTopLevelDeclAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelDecl__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelDeclAccess().getDeclParserRuleCall_0_1()); }
	ruleDecl
	{ after(grammarAccess.getTopLevelDeclAccess().getDeclParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TopLevelDecl__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelDecl__Group_2__0__Impl
	rule__TopLevelDecl__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelDeclAccess().getTopLevelDeclAction_2_0()); }
	()
	{ after(grammarAccess.getTopLevelDeclAccess().getTopLevelDeclAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TopLevelDecl__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TopLevelDecl__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTopLevelDeclAccess().getTypeDefParserRuleCall_2_1()); }
	ruleTypeDef
	{ after(grammarAccess.getTopLevelDeclAccess().getTypeDefParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group__0__Impl
	rule__ImportDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportDeclAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getAlternatives_1()); }
	(rule__ImportDecl__Alternatives_1)
	{ after(grammarAccess.getImportDeclAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDecl__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1__0__Impl
	rule__ImportDecl__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
	'('
	{ after(grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1__1__Impl
	rule__ImportDecl__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getGroup_1_1_1()); }
	(rule__ImportDecl__Group_1_1_1__0)*
	{ after(grammarAccess.getImportDeclAccess().getGroup_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2()); }
	')'
	{ after(grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportDecl__Group_1_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1_1__0__Impl
	rule__ImportDecl__Group_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0()); }
	ruleImportSpec
	{ after(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportDecl__Group_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportDecl__Group_1_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportDeclAccess().getSemicolonKeyword_1_1_1_1()); }
	(';')?
	{ after(grammarAccess.getImportDeclAccess().getSemicolonKeyword_1_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ImportSpec__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportSpec__Group__0__Impl
	rule__ImportSpec__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportSpecAccess().getAlternatives_0()); }
	(rule__ImportSpec__Alternatives_0)?
	{ after(grammarAccess.getImportSpecAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ImportSpec__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ImportSpec__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportSpecAccess().getSTRINGTerminalRuleCall_1()); }
	RULE_STRING
	{ after(grammarAccess.getImportSpecAccess().getSTRINGTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Package__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__0__Impl
	rule__Package__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
	'package'
	{ after(grammarAccess.getPackageAccess().getPackageKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Package__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Package__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPackageAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getPackageAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group__0__Impl
	rule__ForStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForStmtAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group__1__Impl
	rule__ForStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getAlternatives_1()); }
	(rule__ForStmt__Alternatives_1)
	{ after(grammarAccess.getForStmtAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getBlockAssignment_2()); }
	(rule__ForStmt__BlockAssignment_2)
	{ after(grammarAccess.getForStmtAccess().getBlockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStmt__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group_1_0__0__Impl
	rule__ForStmt__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getExpParserRuleCall_1_0_0()); }
	ruleExp
	{ after(grammarAccess.getForStmtAccess().getExpParserRuleCall_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStmt__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_0_1()); }
	(ruleRangeClause)?
	{ after(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__0__Impl
	rule__ForClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getForClauseAction_0()); }
	()
	{ after(grammarAccess.getForClauseAccess().getForClauseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__1__Impl
	rule__ForClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getDeclParserRuleCall_1()); }
	(ruleDecl)?
	{ after(grammarAccess.getForClauseAccess().getDeclParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__2__Impl
	rule__ForClause__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSemicolonKeyword_2()); }
	';'
	{ after(grammarAccess.getForClauseAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__3__Impl
	rule__ForClause__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getExpParserRuleCall_3()); }
	(ruleExp)?
	{ after(grammarAccess.getForClauseAccess().getExpParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__4__Impl
	rule__ForClause__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSemicolonKeyword_4()); }
	';'
	{ after(grammarAccess.getForClauseAccess().getSemicolonKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForClause__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForClause__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_5()); }
	(ruleSimpleStmt)?
	{ after(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group__0__Impl
	rule__RangeClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getGroup_0()); }
	(rule__RangeClause__Group_0__0)?
	{ after(grammarAccess.getRangeClauseAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group__1__Impl
	rule__RangeClause__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getRangeKeyword_1()); }
	'range'
	{ after(grammarAccess.getRangeClauseAccess().getRangeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getExpParserRuleCall_2()); }
	ruleExp
	{ after(grammarAccess.getRangeClauseAccess().getExpParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RangeClause__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group_0__0__Impl
	rule__RangeClause__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getExpListParserRuleCall_0_0()); }
	ruleExpList
	{ after(grammarAccess.getRangeClauseAccess().getExpListParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RangeClause__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RangeClause__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRangeClauseAccess().getAlternatives_0_1()); }
	(rule__RangeClause__Alternatives_0_1)
	{ after(grammarAccess.getRangeClauseAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FuncDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDecl__Group__0__Impl
	rule__FuncDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDeclAccess().getFuncDeclAction_0()); }
	()
	{ after(grammarAccess.getFuncDeclAccess().getFuncDeclAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDecl__Group__1__Impl
	rule__FuncDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDeclAccess().getFuncKeyword_1()); }
	'func'
	{ after(grammarAccess.getFuncDeclAccess().getFuncKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDecl__Group__2__Impl
	rule__FuncDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDeclAccess().getReceiverParserRuleCall_2()); }
	(ruleReceiver)?
	{ after(grammarAccess.getFuncDeclAccess().getReceiverParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDecl__Group__3__Impl
	rule__FuncDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDeclAccess().getIDTerminalRuleCall_3()); }
	RULE_ID
	{ after(grammarAccess.getFuncDeclAccess().getIDTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDecl__Group__4__Impl
	rule__FuncDecl__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDeclAccess().getSignatureParserRuleCall_4()); }
	ruleSignature
	{ after(grammarAccess.getFuncDeclAccess().getSignatureParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FuncDecl__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FuncDecl__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFuncDeclAccess().getBlockParserRuleCall_5()); }
	(ruleBlock)?
	{ after(grammarAccess.getFuncDeclAccess().getBlockParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Signature__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signature__Group__0__Impl
	rule__Signature__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0()); }
	ruleParameters
	{ after(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Signature__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Signature__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSignatureAccess().getResultParserRuleCall_1()); }
	(ruleResult)?
	{ after(grammarAccess.getSignatureAccess().getResultParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__0__Impl
	rule__Parameters__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0()); }
	'('
	{ after(grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__1__Impl
	rule__Parameters__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getGroup_1()); }
	(rule__Parameters__Group_1__0)?
	{ after(grammarAccess.getParametersAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getParametersAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Parameters__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group_1__0__Impl
	rule__Parameters__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0()); }
	ruleParameterList
	{ after(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Parameters__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameters__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParametersAccess().getCommaKeyword_1_1()); }
	(',')?
	{ after(grammarAccess.getParametersAccess().getCommaKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__0__Impl
	rule__ParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0()); }
	ruleParameterDecl
	{ after(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getGroup_1()); }
	(rule__ParameterList__Group_1__0)*
	{ after(grammarAccess.getParameterListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__0__Impl
	rule__ParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getParameterListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1()); }
	ruleParameterDecl
	{ after(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group__0__Impl
	rule__ParameterDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getGroup_0()); }
	(rule__ParameterDecl__Group_0__0)?
	{ after(grammarAccess.getParameterDeclAccess().getGroup_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group__1__Impl
	rule__ParameterDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1()); }
	('...')?
	{ after(grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getTypeNameParserRuleCall_2()); }
	ruleTypeName
	{ after(grammarAccess.getParameterDeclAccess().getTypeNameParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDecl__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group_0__0__Impl
	rule__ParameterDecl__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
	{ after(grammarAccess.getParameterDeclAccess().getIDTerminalRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ParameterDecl__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDecl__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getParameterDeclAccess().getIdListParserRuleCall_0_1()); }
	ruleIdList
	{ after(grammarAccess.getParameterDeclAccess().getIdListParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group__0__Impl
	rule__SwitchStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getSwitchKeyword_0()); }
	'switch'
	{ after(grammarAccess.getSwitchStmtAccess().getSwitchKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group__1__Impl
	rule__SwitchStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getAndersonParserRuleCall_1()); }
	ruleAnderson
	{ after(grammarAccess.getSwitchStmtAccess().getAndersonParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group__2__Impl
	rule__SwitchStmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getIDTerminalRuleCall_2()); }
	(RULE_ID)?
	{ after(grammarAccess.getSwitchStmtAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group__3__Impl
	rule__SwitchStmt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getLeftCurlyBracketKeyword_3()); }
	'{'
	{ after(grammarAccess.getSwitchStmtAccess().getLeftCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group__4__Impl
	rule__SwitchStmt__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getGroup_4()); }
	(rule__SwitchStmt__Group_4__0)
	{ after(grammarAccess.getSwitchStmtAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getRightCurlyBracketKeyword_5()); }
	'}'
	{ after(grammarAccess.getSwitchStmtAccess().getRightCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStmt__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4__0__Impl
	rule__SwitchStmt__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getGroup_4_0()); }
	(rule__SwitchStmt__Group_4_0__0)*
	{ after(grammarAccess.getSwitchStmtAccess().getGroup_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getGroup_4_1()); }
	(rule__SwitchStmt__Group_4_1__0)?
	{ after(grammarAccess.getSwitchStmtAccess().getGroup_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStmt__Group_4_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4_0__0__Impl
	rule__SwitchStmt__Group_4_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getCaseKeyword_4_0_0()); }
	'case'
	{ after(grammarAccess.getSwitchStmtAccess().getCaseKeyword_4_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4_0__1__Impl
	rule__SwitchStmt__Group_4_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getExpParserRuleCall_4_0_1()); }
	ruleExp
	{ after(grammarAccess.getSwitchStmtAccess().getExpParserRuleCall_4_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getSwitchCaseAssignment_4_0_2()); }
	(rule__SwitchStmt__SwitchCaseAssignment_4_0_2)
	{ after(grammarAccess.getSwitchStmtAccess().getSwitchCaseAssignment_4_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchStmt__Group_4_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4_1__0__Impl
	rule__SwitchStmt__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getDefaultKeyword_4_1_0()); }
	'default'
	{ after(grammarAccess.getSwitchStmtAccess().getDefaultKeyword_4_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchStmt__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__Group_4_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchStmtAccess().getSwitchCaseAssignment_4_1_1()); }
	(rule__SwitchStmt__SwitchCaseAssignment_4_1_1)*
	{ after(grammarAccess.getSwitchStmtAccess().getSwitchCaseAssignment_4_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__0__Impl
	rule__SwitchCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getSwitchCaseAction_0()); }
	()
	{ after(grammarAccess.getSwitchCaseAccess().getSwitchCaseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__1__Impl
	rule__SwitchCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getSwitchCaseAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getGroup_2()); }
	(rule__SwitchCase__Group_2__0)*
	{ after(grammarAccess.getSwitchCaseAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCase__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group_2__0__Impl
	rule__SwitchCase__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getStatementAssignment_2_0()); }
	(rule__SwitchCase__StatementAssignment_2_0)
	{ after(grammarAccess.getSwitchCaseAccess().getStatementAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCase__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseAccess().getSemicolonKeyword_2_1()); }
	(';')?
	{ after(grammarAccess.getSwitchCaseAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__0__Impl
	rule__IfStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfStmtAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__1__Impl
	rule__IfStmt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getAndersonParserRuleCall_1()); }
	ruleAnderson
	{ after(grammarAccess.getIfStmtAccess().getAndersonParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__2__Impl
	rule__IfStmt__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getExpParserRuleCall_2()); }
	ruleExp
	{ after(grammarAccess.getIfStmtAccess().getExpParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__3__Impl
	rule__IfStmt__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getBlockAssignment_3()); }
	(rule__IfStmt__BlockAssignment_3)
	{ after(grammarAccess.getIfStmtAccess().getBlockAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getGroup_4()); }
	(rule__IfStmt__Group_4__0)?
	{ after(grammarAccess.getIfStmtAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStmt__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group_4__0__Impl
	rule__IfStmt__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getElseKeyword_4_0()); }
	'else'
	{ after(grammarAccess.getIfStmtAccess().getElseKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStmt__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStmtAccess().getAlternatives_4_1()); }
	(rule__IfStmt__Alternatives_4_1)
	{ after(grammarAccess.getIfStmtAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Anderson__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anderson__Group__0__Impl
	rule__Anderson__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndersonAccess().getAndersonAction_0()); }
	()
	{ after(grammarAccess.getAndersonAccess().getAndersonAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anderson__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndersonAccess().getGroup_1()); }
	(rule__Anderson__Group_1__0)?
	{ after(grammarAccess.getAndersonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Anderson__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anderson__Group_1__0__Impl
	rule__Anderson__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndersonAccess().getAlternatives_1_0()); }
	(rule__Anderson__Alternatives_1_0)
	{ after(grammarAccess.getAndersonAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Anderson__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndersonAccess().getSemicolonKeyword_1_1()); }
	';'
	{ after(grammarAccess.getAndersonAccess().getSemicolonKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__0__Impl
	rule__Block__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getBlockAction_0()); }
	()
	{ after(grammarAccess.getBlockAccess().getBlockAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__1__Impl
	rule__Block__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__2__Impl
	rule__Block__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getGroup_2()); }
	(rule__Block__Group_2__0)*
	{ after(grammarAccess.getBlockAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Block__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2__0__Impl
	rule__Block__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getStatementAssignment_2_0()); }
	(rule__Block__StatementAssignment_2_0)
	{ after(grammarAccess.getBlockAccess().getStatementAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Block__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockAccess().getSemicolonKeyword_2_1()); }
	(';')?
	{ after(grammarAccess.getBlockAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3__0__Impl
	rule__Statement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getStatementAction_3_0()); }
	()
	{ after(grammarAccess.getStatementAccess().getStatementAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Statement__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStatementAccess().getReturnStmtAssignment_3_1()); }
	(rule__Statement__ReturnStmtAssignment_3_1)
	{ after(grammarAccess.getStatementAccess().getReturnStmtAssignment_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStmt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStmt__Group__0__Impl
	rule__ReturnStmt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStmt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStmtAccess().getReturnKeyword_0()); }
	'return'
	{ after(grammarAccess.getReturnStmtAccess().getReturnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStmt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStmt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStmt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStmtAccess().getExpParserRuleCall_1()); }
	(ruleExp)?
	{ after(grammarAccess.getReturnStmtAccess().getExpParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TypeDef__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDef__Group__0__Impl
	rule__TypeDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefAccess().getTypeKeyword_0()); }
	'type'
	{ after(grammarAccess.getTypeDefAccess().getTypeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDef__Group__1__Impl
	rule__TypeDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getTypeDefAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TypeDef__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeDef__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTypeDefAccess().getTypeNameParserRuleCall_2()); }
	ruleTypeName
	{ after(grammarAccess.getTypeDefAccess().getTypeNameParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__0__Impl
	rule__Struct__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getStructKeyword_0()); }
	'struct'
	{ after(grammarAccess.getStructAccess().getStructKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__1__Impl
	rule__Struct__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__2__Impl
	rule__Struct__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getGroup_2()); }
	(rule__Struct__Group_2__0)*
	{ after(grammarAccess.getStructAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getStructAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Struct__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group_2__0__Impl
	rule__Struct__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getFieldDeclParserRuleCall_2_0()); }
	ruleFieldDecl
	{ after(grammarAccess.getStructAccess().getFieldDeclParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Struct__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Struct__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getStructAccess().getSemicolonKeyword_2_1()); }
	(';')?
	{ after(grammarAccess.getStructAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FieldDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldDecl__Group__0__Impl
	rule__FieldDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldDeclAccess().getIdListParserRuleCall_0()); }
	ruleIdList
	{ after(grammarAccess.getFieldDeclAccess().getIdListParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FieldDecl__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FieldDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldDeclAccess().getTypeNameParserRuleCall_1()); }
	ruleTypeName
	{ after(grammarAccess.getFieldDeclAccess().getTypeNameParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decl__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1__0__Impl
	rule__Decl__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getAlternatives_1_0()); }
	(rule__Decl__Alternatives_1_0)
	{ after(grammarAccess.getDeclAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1__1__Impl
	rule__Decl__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getDeclAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1__2__Impl
	rule__Decl__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getIdListParserRuleCall_1_2()); }
	ruleIdList
	{ after(grammarAccess.getDeclAccess().getIdListParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1__3__Impl
	rule__Decl__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getTypeNameParserRuleCall_1_3()); }
	ruleTypeName
	{ after(grammarAccess.getDeclAccess().getTypeNameParserRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getGroup_1_4()); }
	(rule__Decl__Group_1_4__0)?
	{ after(grammarAccess.getDeclAccess().getGroup_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Decl__Group_1_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1_4__0__Impl
	rule__Decl__Group_1_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getEqualsSignKeyword_1_4_0()); }
	'='
	{ after(grammarAccess.getDeclAccess().getEqualsSignKeyword_1_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1_4__1__Impl
	rule__Decl__Group_1_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getExpParserRuleCall_1_4_1()); }
	ruleExp
	{ after(grammarAccess.getDeclAccess().getExpParserRuleCall_1_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Decl__Group_1_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Decl__Group_1_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclAccess().getExpListParserRuleCall_1_4_2()); }
	ruleExpList
	{ after(grammarAccess.getDeclAccess().getExpListParserRuleCall_1_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ShortVarDecl__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__0__Impl
	rule__ShortVarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getShortVarDeclAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__1__Impl
	rule__ShortVarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getIdListParserRuleCall_1()); }
	ruleIdList
	{ after(grammarAccess.getShortVarDeclAccess().getIdListParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__2__Impl
	rule__ShortVarDecl__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_2()); }
	':='
	{ after(grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__3__Impl
	rule__ShortVarDecl__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getExpParserRuleCall_3()); }
	ruleExp
	{ after(grammarAccess.getShortVarDeclAccess().getExpParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ShortVarDecl__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ShortVarDecl__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getShortVarDeclAccess().getExpListParserRuleCall_4()); }
	ruleExpList
	{ after(grammarAccess.getShortVarDeclAccess().getExpListParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assig__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group__0__Impl
	rule__Assig__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getIdAssignment_0()); }
	(rule__Assig__IdAssignment_0)
	{ after(grammarAccess.getAssigAccess().getIdAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getAlternatives_1()); }
	(rule__Assig__Alternatives_1)
	{ after(grammarAccess.getAssigAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assig__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group_1_0__0__Impl
	rule__Assig__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getIdlAssignment_1_0_0()); }
	(rule__Assig__IdlAssignment_1_0_0)
	{ after(grammarAccess.getAssigAccess().getIdlAssignment_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group_1_0__1__Impl
	rule__Assig__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getEqualsSignKeyword_1_0_1()); }
	'='
	{ after(grammarAccess.getAssigAccess().getEqualsSignKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group_1_0__2__Impl
	rule__Assig__Group_1_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getExpressionAssignment_1_0_2()); }
	(rule__Assig__ExpressionAssignment_1_0_2)
	{ after(grammarAccess.getAssigAccess().getExpressionAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group_1_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getExpressionlistAssignment_1_0_3()); }
	(rule__Assig__ExpressionlistAssignment_1_0_3)
	{ after(grammarAccess.getAssigAccess().getExpressionlistAssignment_1_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assig__Group_1_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group_1_2__0__Impl
	rule__Assig__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getAlternatives_1_2_0()); }
	(rule__Assig__Alternatives_1_2_0)
	{ after(grammarAccess.getAssigAccess().getAlternatives_1_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assig__Group_1_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__Group_1_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssigAccess().getExpressionAssignment_1_2_1()); }
	(rule__Assig__ExpressionAssignment_1_2_1)
	{ after(grammarAccess.getAssigAccess().getExpressionAssignment_1_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IdList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdList__Group__0__Impl
	rule__IdList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IdList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdListAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getIdListAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IdList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IdList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IdList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdListAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
	{ after(grammarAccess.getIdListAccess().getIDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpList__Group__0__Impl
	rule__ExpList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpListAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getExpListAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpListAccess().getExpParserRuleCall_1()); }
	ruleExp
	{ after(grammarAccess.getExpListAccess().getExpParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_2__0__Impl
	rule__Exp__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getBooleanExpParserRuleCall_2_0()); }
	ruleBooleanExp
	{ after(grammarAccess.getExpAccess().getBooleanExpParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getExpJoinParserRuleCall_2_1()); }
	(ruleExpJoin)?
	{ after(grammarAccess.getExpAccess().getExpJoinParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_3__0__Impl
	rule__Exp__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getAritExpParserRuleCall_3_0()); }
	ruleAritExp
	{ after(grammarAccess.getExpAccess().getAritExpParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getExpJoinParserRuleCall_3_1()); }
	(ruleExpJoin)?
	{ after(grammarAccess.getExpAccess().getExpJoinParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exp__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_6__0__Impl
	rule__Exp__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getIDTerminalRuleCall_6_0()); }
	RULE_ID
	{ after(grammarAccess.getExpAccess().getIDTerminalRuleCall_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exp__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exp__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAccess().getExpJoinParserRuleCall_6_1()); }
	(ruleExpJoin)?
	{ after(grammarAccess.getExpAccess().getExpJoinParserRuleCall_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleStmt__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStmt__Group_0__0__Impl
	rule__SimpleStmt__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStmtAccess().getSimpleStmtAction_0_0()); }
	()
	{ after(grammarAccess.getSimpleStmtAccess().getSimpleStmtAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStmt__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStmtAccess().getDeclParserRuleCall_0_1()); }
	ruleDecl
	{ after(grammarAccess.getSimpleStmtAccess().getDeclParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleStmt__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStmt__Group_2__0__Impl
	rule__SimpleStmt__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStmtAccess().getSimpleStmtAction_2_0()); }
	()
	{ after(grammarAccess.getSimpleStmtAccess().getSimpleStmtAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SimpleStmt__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleStmt__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2_1()); }
	ruleExp
	{ after(grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpAux__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAux__Group__0__Impl
	rule__ExpAux__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAuxAccess().getExclamationMarkKeyword_0()); }
	('!')?
	{ after(grammarAccess.getExpAuxAccess().getExclamationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAux__Group__1__Impl
	rule__ExpAux__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAuxAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getExpAuxAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAux__Group__2__Impl
	rule__ExpAux__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAuxAccess().getExpParserRuleCall_2()); }
	ruleExp
	{ after(grammarAccess.getExpAuxAccess().getExpParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAux__Group__3__Impl
	rule__ExpAux__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAuxAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getExpAuxAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpAux__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpAux__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpAuxAccess().getExpJoinParserRuleCall_4()); }
	(ruleExpJoin)?
	{ after(grammarAccess.getExpAuxAccess().getExpJoinParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__0__Impl
	rule__Call__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getCallAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__1__Impl
	rule__Call__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getGroup_1()); }
	(rule__Call__Group_1__0)*
	{ after(grammarAccess.getCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__2__Impl
	rule__Call__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getCallAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__3__Impl
	rule__Call__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getGroup_3()); }
	(rule__Call__Group_3__0)?
	{ after(grammarAccess.getCallAccess().getGroup_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getCallAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group_1__0__Impl
	rule__Call__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getCallAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getCallAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Call__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group_3__0__Impl
	rule__Call__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getExpParserRuleCall_3_0()); }
	ruleExp
	{ after(grammarAccess.getCallAccess().getExpParserRuleCall_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Call__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Call__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCallAccess().getExpListParserRuleCall_3_1()); }
	ruleExpList
	{ after(grammarAccess.getCallAccess().getExpListParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExpJoin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpJoin__Group__0__Impl
	rule__ExpJoin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpJoin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpJoinAccess().getAlternatives_0()); }
	(rule__ExpJoin__Alternatives_0)
	{ after(grammarAccess.getExpJoinAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpJoin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExpJoin__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpJoin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpJoinAccess().getExpParserRuleCall_1()); }
	ruleExp
	{ after(grammarAccess.getExpJoinAccess().getExpParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelExp__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelExp__Group_0__0__Impl
	rule__RelExp__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_0()); }
	ruleNumberLiteral
	{ after(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelExp__Group_0__1__Impl
	rule__RelExp__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelExpAccess().getAlternatives_0_1()); }
	(rule__RelExp__Alternatives_0_1)
	{ after(grammarAccess.getRelExpAccess().getAlternatives_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelExp__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_2()); }
	ruleNumberLiteral
	{ after(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RelExp__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelExp__Group_1__0__Impl
	rule__RelExp__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_0()); }
	ruleBooleanLiteral
	{ after(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelExp__Group_1__1__Impl
	rule__RelExp__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_1_1()); }
	RULE_OP_UNARY
	{ after(grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RelExp__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RelExp__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_2()); }
	ruleBooleanLiteral
	{ after(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getExclamationMarkKeyword_0()); }
	('!')?
	{ after(grammarAccess.getOrAccess().getExclamationMarkKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__1__Impl
	rule__Or__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_1()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getGroup_2()); }
	(rule__Or__Group_2__0)*
	{ after(grammarAccess.getOrAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_2__0__Impl
	rule__Or__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_2_0()); }
	'||'
	{ after(grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Or__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrAccess().getAndParserRuleCall_2_1()); }
	ruleAnd
	{ after(grammarAccess.getOrAccess().getAndParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__0__Impl
	rule__And__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_0()); }
	ruleBooleanLiteral
	{ after(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getGroup_1()); }
	(rule__And__Group_1__0)*
	{ after(grammarAccess.getAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_0()); }
	'&&'
	{ after(grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__And__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_1_1()); }
	ruleBooleanLiteral
	{ after(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOP_SUMTerminalRuleCall_0()); }
	(RULE_OP_SUM)?
	{ after(grammarAccess.getAdditionAccess().getOP_SUMTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_1()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_0()); }
	ruleNumberLiteral
	{ after(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOP_MULTTerminalRuleCall_1_0()); }
	(RULE_OP_MULT)?
	{ after(grammarAccess.getMultiplicationAccess().getOP_MULTTerminalRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_1_1()); }
	ruleNumberLiteral
	{ after(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedIdent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedIdent__Group__0__Impl
	rule__QualifiedIdent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedIdent__Group__1__Impl
	rule__QualifiedIdent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedIdent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedIdent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__GreetingsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
		ruleGreeting
		{ after(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SourceFile__TopLevelDeclAssignment_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSourceFileAccess().getTopLevelDeclTopLevelDeclParserRuleCall_4_0_0()); }
		ruleTopLevelDecl
		{ after(grammarAccess.getSourceFileAccess().getTopLevelDeclTopLevelDeclParserRuleCall_4_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStmt__BlockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStmtAccess().getBlockBlockParserRuleCall_2_0()); }
		ruleBlock
		{ after(grammarAccess.getForStmtAccess().getBlockBlockParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__SwitchCaseAssignment_4_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStmtAccess().getSwitchCaseSwitchCaseParserRuleCall_4_0_2_0()); }
		ruleSwitchCase
		{ after(grammarAccess.getSwitchStmtAccess().getSwitchCaseSwitchCaseParserRuleCall_4_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchStmt__SwitchCaseAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchStmtAccess().getSwitchCaseSwitchCaseParserRuleCall_4_1_1_0()); }
		ruleSwitchCase
		{ after(grammarAccess.getSwitchStmtAccess().getSwitchCaseSwitchCaseParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCase__StatementAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseAccess().getStatementStatementParserRuleCall_2_0_0()); }
		ruleStatement
		{ after(grammarAccess.getSwitchCaseAccess().getStatementStatementParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__BlockAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_3_0()); }
		ruleBlock
		{ after(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__IfStmtAssignment_4_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStmtAccess().getIfStmtIfStmtParserRuleCall_4_1_0_0()); }
		ruleIfStmt
		{ after(grammarAccess.getIfStmtAccess().getIfStmtIfStmtParserRuleCall_4_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStmt__BlockAssignment_4_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_4_1_1_0()); }
		ruleBlock
		{ after(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_4_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Anderson__AssigAssignment_1_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndersonAccess().getAssigAssigParserRuleCall_1_0_1_0()); }
		ruleAssig
		{ after(grammarAccess.getAndersonAccess().getAssigAssigParserRuleCall_1_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Block__StatementAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_2_0_0()); }
		ruleStatement
		{ after(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__SwitchStmtAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSwitchStmtSwitchStmtParserRuleCall_2_0()); }
		ruleSwitchStmt
		{ after(grammarAccess.getStatementAccess().getSwitchStmtSwitchStmtParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__ReturnStmtAssignment_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getReturnStmtReturnStmtParserRuleCall_3_1_0()); }
		ruleReturnStmt
		{ after(grammarAccess.getStatementAccess().getReturnStmtReturnStmtParserRuleCall_3_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__IdAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getIdIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getAssigAccess().getIdIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__IdlAssignment_1_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getIdlIdListParserRuleCall_1_0_0_0()); }
		ruleIdList
		{ after(grammarAccess.getAssigAccess().getIdlIdListParserRuleCall_1_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__ExpressionAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getExpressionExpParserRuleCall_1_0_2_0()); }
		ruleExp
		{ after(grammarAccess.getAssigAccess().getExpressionExpParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__ExpressionlistAssignment_1_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getExpressionlistExpListParserRuleCall_1_0_3_0()); }
		ruleExpList
		{ after(grammarAccess.getAssigAccess().getExpressionlistExpListParserRuleCall_1_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assig__ExpressionAssignment_1_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssigAccess().getExpressionExpParserRuleCall_1_2_1_0()); }
		ruleExp
		{ after(grammarAccess.getAssigAccess().getExpressionExpParserRuleCall_1_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_BASIC_TYPES : ('string'|'int'|'bool');

RULE_OP_SUM : ('+'|'-');

RULE_OP_MULT : ('*'|'/');

RULE_OP_REL : ('<='|'>='|'<'|'>');

RULE_OP_UNARY : ('=='|'!=');

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
