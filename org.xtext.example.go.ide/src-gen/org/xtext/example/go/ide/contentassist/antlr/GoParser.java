/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.go.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.go.ide.contentassist.antlr.internal.InternalGoParser;
import org.xtext.example.go.services.GoGrammarAccess;

public class GoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTopLevelDeclAccess().getAlternatives(), "rule__TopLevelDecl__Alternatives");
			builder.put(grammarAccess.getImportDeclAccess().getAlternatives_1(), "rule__ImportDecl__Alternatives_1");
			builder.put(grammarAccess.getImportSpecAccess().getAlternatives_0(), "rule__ImportSpec__Alternatives_0");
			builder.put(grammarAccess.getForStmtAccess().getAlternatives_1(), "rule__ForStmt__Alternatives_1");
			builder.put(grammarAccess.getRangeClauseAccess().getAlternatives_0_1(), "rule__RangeClause__Alternatives_0_1");
			builder.put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
			builder.put(grammarAccess.getIfStmtAccess().getAlternatives_4_1(), "rule__IfStmt__Alternatives_4_1");
			builder.put(grammarAccess.getAndersonAccess().getAlternatives_1_0(), "rule__Anderson__Alternatives_1_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getCommCaseAccess().getAlternatives(), "rule__CommCase__Alternatives");
			builder.put(grammarAccess.getCommCaseAccess().getAlternatives_0_1(), "rule__CommCase__Alternatives_0_1");
			builder.put(grammarAccess.getRecvStmtAccess().getAlternatives_0(), "rule__RecvStmt__Alternatives_0");
			builder.put(grammarAccess.getDeclAccess().getAlternatives(), "rule__Decl__Alternatives");
			builder.put(grammarAccess.getDeclAccess().getAlternatives_1_0(), "rule__Decl__Alternatives_1_0");
			builder.put(grammarAccess.getAssigAccess().getAlternatives_1(), "rule__Assig__Alternatives_1");
			builder.put(grammarAccess.getAssigAccess().getAlternatives_1_1(), "rule__Assig__Alternatives_1_1");
			builder.put(grammarAccess.getAssigAccess().getAlternatives_1_2_0(), "rule__Assig__Alternatives_1_2_0");
			builder.put(grammarAccess.getExpAccess().getAlternatives(), "rule__Exp__Alternatives");
			builder.put(grammarAccess.getSimpleStmtAccess().getAlternatives(), "rule__SimpleStmt__Alternatives");
			builder.put(grammarAccess.getExpJoinAccess().getAlternatives_0(), "rule__ExpJoin__Alternatives_0");
			builder.put(grammarAccess.getRelExpAccess().getAlternatives(), "rule__RelExp__Alternatives");
			builder.put(grammarAccess.getRelExpAccess().getAlternatives_0_1(), "rule__RelExp__Alternatives_0_1");
			builder.put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
			builder.put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
			builder.put(grammarAccess.getBasicTypesAccess().getAlternatives(), "rule__BasicTypes__Alternatives");
			builder.put(grammarAccess.getSourceFileAccess().getGroup(), "rule__SourceFile__Group__0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup_3(), "rule__SourceFile__Group_3__0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup_4(), "rule__SourceFile__Group_4__0");
			builder.put(grammarAccess.getTopLevelDeclAccess().getGroup_0(), "rule__TopLevelDecl__Group_0__0");
			builder.put(grammarAccess.getTopLevelDeclAccess().getGroup_2(), "rule__TopLevelDecl__Group_2__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup(), "rule__ImportDecl__Group__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup_1_1(), "rule__ImportDecl__Group_1_1__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup_1_1_1(), "rule__ImportDecl__Group_1_1_1__0");
			builder.put(grammarAccess.getImportSpecAccess().getGroup(), "rule__ImportSpec__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup_1_0(), "rule__ForStmt__Group_1_0__0");
			builder.put(grammarAccess.getForClauseAccess().getGroup(), "rule__ForClause__Group__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup(), "rule__RangeClause__Group__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup_0(), "rule__RangeClause__Group_0__0");
			builder.put(grammarAccess.getFunctionTypeAccess().getGroup(), "rule__FunctionType__Group__0");
			builder.put(grammarAccess.getFuncDeclAccess().getGroup(), "rule__FuncDecl__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getParameterDeclAccess().getGroup(), "rule__ParameterDecl__Group__0");
			builder.put(grammarAccess.getParameterDeclAccess().getGroup_0(), "rule__ParameterDecl__Group_0__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup(), "rule__SwitchStmt__Group__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup_4(), "rule__SwitchStmt__Group_4__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup_4_0(), "rule__SwitchStmt__Group_4_0__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup_4_1(), "rule__SwitchStmt__Group_4_1__0");
			builder.put(grammarAccess.getSwitchCaseAccess().getGroup(), "rule__SwitchCase__Group__0");
			builder.put(grammarAccess.getSwitchCaseAccess().getGroup_2(), "rule__SwitchCase__Group_2__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup_4(), "rule__IfStmt__Group_4__0");
			builder.put(grammarAccess.getAndersonAccess().getGroup(), "rule__Anderson__Group__0");
			builder.put(grammarAccess.getAndersonAccess().getGroup_1(), "rule__Anderson__Group_1__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup_2(), "rule__Block__Group_2__0");
			builder.put(grammarAccess.getSelectStmtAccess().getGroup(), "rule__SelectStmt__Group__0");
			builder.put(grammarAccess.getCommClauseAccess().getGroup(), "rule__CommClause__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup(), "rule__StatementList__Group__0");
			builder.put(grammarAccess.getStatementListAccess().getGroup_1(), "rule__StatementList__Group_1__0");
			builder.put(grammarAccess.getCommCaseAccess().getGroup_0(), "rule__CommCase__Group_0__0");
			builder.put(grammarAccess.getRecvStmtAccess().getGroup(), "rule__RecvStmt__Group__0");
			builder.put(grammarAccess.getRecvStmtAccess().getGroup_0_0(), "rule__RecvStmt__Group_0_0__0");
			builder.put(grammarAccess.getRecvStmtAccess().getGroup_0_1(), "rule__RecvStmt__Group_0_1__0");
			builder.put(grammarAccess.getLabeledStmtAccess().getGroup(), "rule__LabeledStmt__Group__0");
			builder.put(grammarAccess.getSendStmtAccess().getGroup(), "rule__SendStmt__Group__0");
			builder.put(grammarAccess.getBreakStmtAccess().getGroup(), "rule__BreakStmt__Group__0");
			builder.put(grammarAccess.getContinueStmtAccess().getGroup(), "rule__ContinueStmt__Group__0");
			builder.put(grammarAccess.getGotoStmtAccess().getGroup(), "rule__GotoStmt__Group__0");
			builder.put(grammarAccess.getFalltrhoughStmtAccess().getGroup(), "rule__FalltrhoughStmt__Group__0");
			builder.put(grammarAccess.getDeferStmtAccess().getGroup(), "rule__DeferStmt__Group__0");
			builder.put(grammarAccess.getReturnStmtAccess().getGroup(), "rule__ReturnStmt__Group__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
			builder.put(grammarAccess.getStructAccess().getGroup(), "rule__Struct__Group__0");
			builder.put(grammarAccess.getStructAccess().getGroup_2(), "rule__Struct__Group_2__0");
			builder.put(grammarAccess.getFieldDeclAccess().getGroup(), "rule__FieldDecl__Group__0");
			builder.put(grammarAccess.getDeclAccess().getGroup_0(), "rule__Decl__Group_0__0");
			builder.put(grammarAccess.getDeclAccess().getGroup_1(), "rule__Decl__Group_1__0");
			builder.put(grammarAccess.getDeclAccess().getGroup_1_4(), "rule__Decl__Group_1_4__0");
			builder.put(grammarAccess.getAssigAccess().getGroup(), "rule__Assig__Group__0");
			builder.put(grammarAccess.getAssigAccess().getGroup_1_0(), "rule__Assig__Group_1_0__0");
			builder.put(grammarAccess.getAssigAccess().getGroup_1_2(), "rule__Assig__Group_1_2__0");
			builder.put(grammarAccess.getIdListAccess().getGroup(), "rule__IdList__Group__0");
			builder.put(grammarAccess.getExpListAccess().getGroup(), "rule__ExpList__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_2(), "rule__Exp__Group_2__0");
			builder.put(grammarAccess.getExpAccess().getGroup_3(), "rule__Exp__Group_3__0");
			builder.put(grammarAccess.getExpAccess().getGroup_6(), "rule__Exp__Group_6__0");
			builder.put(grammarAccess.getSimpleStmtAccess().getGroup_0(), "rule__SimpleStmt__Group_0__0");
			builder.put(grammarAccess.getSimpleStmtAccess().getGroup_2(), "rule__SimpleStmt__Group_2__0");
			builder.put(grammarAccess.getExpAuxAccess().getGroup(), "rule__ExpAux__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup_1(), "rule__Call__Group_1__0");
			builder.put(grammarAccess.getCallAccess().getGroup_3(), "rule__Call__Group_3__0");
			builder.put(grammarAccess.getExpJoinAccess().getGroup(), "rule__ExpJoin__Group__0");
			builder.put(grammarAccess.getRelExpAccess().getGroup_0(), "rule__RelExp__Group_0__0");
			builder.put(grammarAccess.getRelExpAccess().getGroup_1(), "rule__RelExp__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_2(), "rule__Or__Group_2__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getQualifiedIdentAccess().getGroup(), "rule__QualifiedIdent__Group__0");
			builder.put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
			builder.put(grammarAccess.getSourceFileAccess().getTopLevelDeclAssignment_4_0(), "rule__SourceFile__TopLevelDeclAssignment_4_0");
			builder.put(grammarAccess.getTopLevelDeclAccess().getDeclAssignment_0_1(), "rule__TopLevelDecl__DeclAssignment_0_1");
			builder.put(grammarAccess.getTopLevelDeclAccess().getFuncAssignment_1(), "rule__TopLevelDecl__FuncAssignment_1");
			builder.put(grammarAccess.getForStmtAccess().getBlockAssignment_2(), "rule__ForStmt__BlockAssignment_2");
			builder.put(grammarAccess.getForClauseAccess().getDeclAssignment_1(), "rule__ForClause__DeclAssignment_1");
			builder.put(grammarAccess.getFuncDeclAccess().getReceiverAssignment_1(), "rule__FuncDecl__ReceiverAssignment_1");
			builder.put(grammarAccess.getFuncDeclAccess().getNameAssignment_2(), "rule__FuncDecl__NameAssignment_2");
			builder.put(grammarAccess.getFuncDeclAccess().getSignatureAssignment_3(), "rule__FuncDecl__SignatureAssignment_3");
			builder.put(grammarAccess.getFuncDeclAccess().getBlockAssignment_4(), "rule__FuncDecl__BlockAssignment_4");
			builder.put(grammarAccess.getSwitchStmtAccess().getSwitchCaseAssignment_4_0_2(), "rule__SwitchStmt__SwitchCaseAssignment_4_0_2");
			builder.put(grammarAccess.getSwitchStmtAccess().getSwitchCaseAssignment_4_1_1(), "rule__SwitchStmt__SwitchCaseAssignment_4_1_1");
			builder.put(grammarAccess.getSwitchCaseAccess().getStatementAssignment_2_0(), "rule__SwitchCase__StatementAssignment_2_0");
			builder.put(grammarAccess.getIfStmtAccess().getBlockAssignment_3(), "rule__IfStmt__BlockAssignment_3");
			builder.put(grammarAccess.getIfStmtAccess().getIfStmtAssignment_4_1_0(), "rule__IfStmt__IfStmtAssignment_4_1_0");
			builder.put(grammarAccess.getIfStmtAccess().getBlockAssignment_4_1_1(), "rule__IfStmt__BlockAssignment_4_1_1");
			builder.put(grammarAccess.getAndersonAccess().getDeclAssignment_1_0_0(), "rule__Anderson__DeclAssignment_1_0_0");
			builder.put(grammarAccess.getAndersonAccess().getAssigAssignment_1_0_1(), "rule__Anderson__AssigAssignment_1_0_1");
			builder.put(grammarAccess.getBlockAccess().getStatementAssignment_2_0(), "rule__Block__StatementAssignment_2_0");
			builder.put(grammarAccess.getStatementAccess().getLabeledStmtAssignment_0(), "rule__Statement__LabeledStmtAssignment_0");
			builder.put(grammarAccess.getStatementAccess().getSendStmtAssignment_1(), "rule__Statement__SendStmtAssignment_1");
			builder.put(grammarAccess.getStatementAccess().getSwitchStmtAssignment_4(), "rule__Statement__SwitchStmtAssignment_4");
			builder.put(grammarAccess.getStatementAccess().getReturnStmtAssignment_5(), "rule__Statement__ReturnStmtAssignment_5");
			builder.put(grammarAccess.getStatementAccess().getBreakStmtAssignment_7(), "rule__Statement__BreakStmtAssignment_7");
			builder.put(grammarAccess.getStatementAccess().getContinueStmtAssignment_8(), "rule__Statement__ContinueStmtAssignment_8");
			builder.put(grammarAccess.getStatementAccess().getGotoStmtAssignment_9(), "rule__Statement__GotoStmtAssignment_9");
			builder.put(grammarAccess.getStatementAccess().getFalltrhoughStmtAssignment_10(), "rule__Statement__FalltrhoughStmtAssignment_10");
			builder.put(grammarAccess.getStatementAccess().getDeferStmtAssignment_11(), "rule__Statement__DeferStmtAssignment_11");
			builder.put(grammarAccess.getSelectStmtAccess().getCommClauseAssignment_3(), "rule__SelectStmt__CommClauseAssignment_3");
			builder.put(grammarAccess.getStatementListAccess().getStatementAssignment_1_0(), "rule__StatementList__StatementAssignment_1_0");
			builder.put(grammarAccess.getDeclAccess().getNameAssignment_0_0(), "rule__Decl__NameAssignment_0_0");
			builder.put(grammarAccess.getDeclAccess().getNameAssignment_1_1(), "rule__Decl__NameAssignment_1_1");
			builder.put(grammarAccess.getDeclAccess().getIdListAssignment_1_2(), "rule__Decl__IdListAssignment_1_2");
			builder.put(grammarAccess.getDeclAccess().getTypeAssignment_1_3(), "rule__Decl__TypeAssignment_1_3");
			builder.put(grammarAccess.getDeclAccess().getExpAssignment_1_4_1(), "rule__Decl__ExpAssignment_1_4_1");
			builder.put(grammarAccess.getDeclAccess().getExplistAssignment_1_4_2(), "rule__Decl__ExplistAssignment_1_4_2");
			builder.put(grammarAccess.getAssigAccess().getIdAssignment_0(), "rule__Assig__IdAssignment_0");
			builder.put(grammarAccess.getAssigAccess().getIdlAssignment_1_0_0(), "rule__Assig__IdlAssignment_1_0_0");
			builder.put(grammarAccess.getAssigAccess().getExpressionAssignment_1_0_2(), "rule__Assig__ExpressionAssignment_1_0_2");
			builder.put(grammarAccess.getAssigAccess().getExpressionlistAssignment_1_0_3(), "rule__Assig__ExpressionlistAssignment_1_0_3");
			builder.put(grammarAccess.getAssigAccess().getExpressionAssignment_1_2_1(), "rule__Assig__ExpressionAssignment_1_2_1");
			builder.put(grammarAccess.getSimpleStmtAccess().getDeclAssignment_0_1(), "rule__SimpleStmt__DeclAssignment_0_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GoGrammarAccess grammarAccess;

	@Override
	protected InternalGoParser createParser() {
		InternalGoParser result = new InternalGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
