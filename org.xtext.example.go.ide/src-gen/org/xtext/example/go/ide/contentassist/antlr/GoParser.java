/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.go.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.go.ide.contentassist.antlr.internal.InternalGoParser;
import org.xtext.example.go.services.GoGrammarAccess;

public class GoParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(GoGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, GoGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTopLevelDeclAccess().getAlternatives(), "rule__TopLevelDecl__Alternatives");
			builder.put(grammarAccess.getImportDeclAccess().getAlternatives_1(), "rule__ImportDecl__Alternatives_1");
			builder.put(grammarAccess.getImportSpecAccess().getAlternatives_0(), "rule__ImportSpec__Alternatives_0");
			builder.put(grammarAccess.getForStmtAccess().getAlternatives_1(), "rule__ForStmt__Alternatives_1");
			builder.put(grammarAccess.getRangeClauseAccess().getAlternatives_0_1(), "rule__RangeClause__Alternatives_0_1");
			builder.put(grammarAccess.getResultAccess().getAlternatives(), "rule__Result__Alternatives");
			builder.put(grammarAccess.getIfStmtAccess().getAlternatives_4_1(), "rule__IfStmt__Alternatives_4_1");
			builder.put(grammarAccess.getAndersonAccess().getAlternatives_0(), "rule__Anderson__Alternatives_0");
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getTypeDefAccess().getAlternatives_2(), "rule__TypeDef__Alternatives_2");
			builder.put(grammarAccess.getFieldDeclAccess().getAlternatives_1(), "rule__FieldDecl__Alternatives_1");
			builder.put(grammarAccess.getDeclAccess().getAlternatives(), "rule__Decl__Alternatives");
			builder.put(grammarAccess.getDeclAccess().getAlternatives_1_0(), "rule__Decl__Alternatives_1_0");
			builder.put(grammarAccess.getAssigAccess().getAlternatives_1(), "rule__Assig__Alternatives_1");
			builder.put(grammarAccess.getAssigAccess().getAlternatives_1_1(), "rule__Assig__Alternatives_1_1");
			builder.put(grammarAccess.getAssigAccess().getAlternatives_1_2_0(), "rule__Assig__Alternatives_1_2_0");
			builder.put(grammarAccess.getExpAccess().getAlternatives(), "rule__Exp__Alternatives");
			builder.put(grammarAccess.getSimpleStmtAccess().getAlternatives(), "rule__SimpleStmt__Alternatives");
			builder.put(grammarAccess.getExpJoinAccess().getAlternatives_0(), "rule__ExpJoin__Alternatives_0");
			builder.put(grammarAccess.getRelExpAccess().getAlternatives(), "rule__RelExp__Alternatives");
			builder.put(grammarAccess.getRelExpAccess().getAlternatives_0_1(), "rule__RelExp__Alternatives_0_1");
			builder.put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
			builder.put(grammarAccess.getSourceFileAccess().getGroup(), "rule__SourceFile__Group__0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup_2(), "rule__SourceFile__Group_2__0");
			builder.put(grammarAccess.getSourceFileAccess().getGroup_3(), "rule__SourceFile__Group_3__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup(), "rule__ImportDecl__Group__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup_1_1(), "rule__ImportDecl__Group_1_1__0");
			builder.put(grammarAccess.getImportDeclAccess().getGroup_1_1_1(), "rule__ImportDecl__Group_1_1_1__0");
			builder.put(grammarAccess.getImportSpecAccess().getGroup(), "rule__ImportSpec__Group__0");
			builder.put(grammarAccess.getPackageAccess().getGroup(), "rule__Package__Group__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup(), "rule__ForStmt__Group__0");
			builder.put(grammarAccess.getForStmtAccess().getGroup_1_0(), "rule__ForStmt__Group_1_0__0");
			builder.put(grammarAccess.getForClauseAccess().getGroup(), "rule__ForClause__Group__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup(), "rule__RangeClause__Group__0");
			builder.put(grammarAccess.getRangeClauseAccess().getGroup_0(), "rule__RangeClause__Group_0__0");
			builder.put(grammarAccess.getFunctionTypeAccess().getGroup(), "rule__FunctionType__Group__0");
			builder.put(grammarAccess.getFuncDeclAccess().getGroup(), "rule__FuncDecl__Group__0");
			builder.put(grammarAccess.getSignatureAccess().getGroup(), "rule__Signature__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup(), "rule__ParameterList__Group__0");
			builder.put(grammarAccess.getParameterListAccess().getGroup_1(), "rule__ParameterList__Group_1__0");
			builder.put(grammarAccess.getParameterDeclAccess().getGroup(), "rule__ParameterDecl__Group__0");
			builder.put(grammarAccess.getParameterDeclAccess().getGroup_0(), "rule__ParameterDecl__Group_0__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup(), "rule__SwitchStmt__Group__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup_4(), "rule__SwitchStmt__Group_4__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup_4_0(), "rule__SwitchStmt__Group_4_0__0");
			builder.put(grammarAccess.getSwitchStmtAccess().getGroup_4_1(), "rule__SwitchStmt__Group_4_1__0");
			builder.put(grammarAccess.getSwitchCaseAccess().getGroup(), "rule__SwitchCase__Group__0");
			builder.put(grammarAccess.getSwitchCaseAccess().getGroup_1(), "rule__SwitchCase__Group_1__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup(), "rule__IfStmt__Group__0");
			builder.put(grammarAccess.getIfStmtAccess().getGroup_4(), "rule__IfStmt__Group_4__0");
			builder.put(grammarAccess.getAndersonAccess().getGroup(), "rule__Anderson__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
			builder.put(grammarAccess.getBlockAccess().getGroup_1(), "rule__Block__Group_1__0");
			builder.put(grammarAccess.getReturnStmtAccess().getGroup(), "rule__ReturnStmt__Group__0");
			builder.put(grammarAccess.getTypeDefAccess().getGroup(), "rule__TypeDef__Group__0");
			builder.put(grammarAccess.getStructAccess().getGroup(), "rule__Struct__Group__0");
			builder.put(grammarAccess.getStructAccess().getGroup_2(), "rule__Struct__Group_2__0");
			builder.put(grammarAccess.getFieldDeclAccess().getGroup(), "rule__FieldDecl__Group__0");
			builder.put(grammarAccess.getDeclAccess().getGroup_1(), "rule__Decl__Group_1__0");
			builder.put(grammarAccess.getDeclAccess().getGroup_1_4(), "rule__Decl__Group_1_4__0");
			builder.put(grammarAccess.getShortVarDeclAccess().getGroup(), "rule__ShortVarDecl__Group__0");
			builder.put(grammarAccess.getAssigAccess().getGroup(), "rule__Assig__Group__0");
			builder.put(grammarAccess.getAssigAccess().getGroup_1_0(), "rule__Assig__Group_1_0__0");
			builder.put(grammarAccess.getAssigAccess().getGroup_1_2(), "rule__Assig__Group_1_2__0");
			builder.put(grammarAccess.getIdListAccess().getGroup(), "rule__IdList__Group__0");
			builder.put(grammarAccess.getExpListAccess().getGroup(), "rule__ExpList__Group__0");
			builder.put(grammarAccess.getExpAccess().getGroup_2(), "rule__Exp__Group_2__0");
			builder.put(grammarAccess.getExpAccess().getGroup_3(), "rule__Exp__Group_3__0");
			builder.put(grammarAccess.getExpAccess().getGroup_6(), "rule__Exp__Group_6__0");
			builder.put(grammarAccess.getExpAuxAccess().getGroup(), "rule__ExpAux__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup(), "rule__Call__Group__0");
			builder.put(grammarAccess.getCallAccess().getGroup_1(), "rule__Call__Group_1__0");
			builder.put(grammarAccess.getCallAccess().getGroup_3(), "rule__Call__Group_3__0");
			builder.put(grammarAccess.getExpJoinAccess().getGroup(), "rule__ExpJoin__Group__0");
			builder.put(grammarAccess.getRelExpAccess().getGroup_0(), "rule__RelExp__Group_0__0");
			builder.put(grammarAccess.getRelExpAccess().getGroup_1(), "rule__RelExp__Group_1__0");
			builder.put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
			builder.put(grammarAccess.getOrAccess().getGroup_2(), "rule__Or__Group_2__0");
			builder.put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
			builder.put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup(), "rule__Multiplication__Group__0");
			builder.put(grammarAccess.getMultiplicationAccess().getGroup_1(), "rule__Multiplication__Group_1__0");
			builder.put(grammarAccess.getQualifiedIdentAccess().getGroup(), "rule__QualifiedIdent__Group__0");
			builder.put(grammarAccess.getModelAccess().getGreetingsAssignment(), "rule__Model__GreetingsAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private GoGrammarAccess grammarAccess;

	@Override
	protected InternalGoParser createParser() {
		InternalGoParser result = new InternalGoParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GoGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GoGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
