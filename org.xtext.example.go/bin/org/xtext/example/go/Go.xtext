grammar org.xtext.example.go.Go with org.eclipse.xtext.common.Terminals

generate go "http://www.xtext.org/example/go/Go"

Model:
	greetings+=Greeting*
;
	
Greeting:
	SourceFile
;

SourceFile:
	{SourceFile} Package ";"? (ImportDecl ";"?)* (TopLevelDecl+=TopLevelDecl ";"?)*
;

TopLevelDecl:
	{TopLevelDecl} Decl | FuncDecl | {TopLevelDecl} TypeDef
;

ImportDecl:
	"import" (ImportSpec | ("(" (ImportSpec ";"?)* ")"))
;

ImportSpec:
	("." | ID)? STRING
;

Package:
	"package" ID
;

ForStmt:
	"for" (Exp RangeClause? | ForClause) Block=Block
;

ForClause:
	{ForClause} (Decl)? ";" Exp? ";" SimpleStmt?
;

RangeClause:
	(ExpList (":="|"="))? "range" Exp
;

FunctionType:
	"func" Signature
;

FuncDecl:
	{FuncDecl} "func" Receiver? ID Signature Block?
;

Receiver:
	Parameters
;

Signature:
	Parameters Result?
;

Result:
	Parameters | TypeName 
;

Parameters:
	"(" (ParameterList ","?)? ")"
; 

ParameterList:
	ParameterDecl ("," ParameterDecl)*
;

ParameterDecl:
	(ID IdList)? "..."? TypeName
;

SwitchStmt:
	"switch" Anderson ID? "{" (("case" Exp SwitchCase+=SwitchCase)*  ("default" SwitchCase+=SwitchCase* )?) "}"
;

SwitchCase:
	{SwitchCase} ":" (Statement+=Statement ";"? )*
;

IfStmt:
	"if" Anderson Exp Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?
;

Anderson:
	{Anderson} ((Decl | Assig=Assig | Exp) ";")?
;

Block:
	{Block} "{" (Statement+=Statement ";"? )* "}"
;

Statement:
	SimpleStmt | IfStmt | SwitchStmt=SwitchStmt | {Statement} ReturnStmt=ReturnStmt | ForStmt
;

ReturnStmt:
	"return" Exp?
;

TypeDef:
	//TODO: juntar os tipos
	"type" ID TypeName
;

Struct:
	"struct" "{" (FieldDecl ";"?)* "}"
;

FieldDecl:
	IdList TypeName
;

Decl:
	ShortVarDecl | (("var" | "const") ID IdList TypeName ("=" Exp ExpList)?)
;

ShortVarDecl:
	ID IdList ":=" Exp ExpList
;

Assig :
	id=ID ((idl=IdList "=" expression=Exp expressionlist=ExpList) | ("++"|"--") | (("+="|"-="|"*="|"/=") expression=Exp))
;

IdList:
	("," ID)*	
;

ExpList:
	("," Exp)*
;

Exp: 
	Call | ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?
;

SimpleStmt:
	{SimpleStmt} Decl | Assig | {SimpleStmt} Exp 
;

ExpAux:
	"!"? "(" Exp ")" (ExpJoin)? 
;

Call:
	ID ("." ID)* "(" (Exp ExpList)? ")"
;

ExpJoin:
	(OP_REL | OP_UNARY | OP_SUM | OP_MULT | "&&" | "||") Exp
;

RelExp:
	NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral
;

BooleanExp:
	 Or	
;

Or:
	"!"? And ('||' And)*
;

And:
	BooleanLiteral ('&&' BooleanLiteral)*
;

BooleanLiteral:
	BOOL
;

AritExp:
	Addition	
;

Addition:
	(OP_SUM? Multiplication)+
;

Multiplication:
	NumberLiteral (OP_MULT? NumberLiteral)*
;

NumberLiteral:
	INT
;

TypeName:
	BASIC_TYPES | QualifiedIdent | ID | Struct
;

QualifiedIdent:
	ID "." ID
;

terminal BASIC_TYPES:
	"string" | "int" | "bool" 
;

terminal OP_SUM:
	('+'|'-')
;

terminal OP_MULT:
	('*'|'/')
;

terminal OP_REL:
	"<=" | ">=" | "<" | ">"	
;

terminal OP_UNARY:
	"==" | "!="	
;

terminal BOOL:
	"true" | "false"
;
