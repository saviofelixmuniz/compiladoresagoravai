grammar org.xtext.example.go.Go with org.eclipse.xtext.common.Terminals

generate go "http://www.xtext.org/example/go/Go"

Model:
	greetings+=Greeting*
;
	
Greeting:
	SourceFile
;

SourceFile:
	Package ";"? (ImportDecl ";"?)* (TopLevelDecl ";"?)*
;

TopLevelDecl:
	// TODO: methoddecl
	Decl | FuncDecl
;

ImportDecl:
	"import" (ImportSpec | ("(" (ImportSpec ";"?)* ")"))
;

ImportSpec:
	("." | ID)? STRING
;

Package:
	"package" ID
;

ForStmt:
	"for" (Exp RangeClause? | ForClause) Block
;

ForClause:
	(Decl)? ";" Exp? ";" SimpleStmt?
;

RangeClause:
	(ExpList (":="|"="))? "range" Exp
;

FunctionType:
	"func" Signature
;

FuncDecl:
	"func" ID Signature Block?
;

Signature:
	Parameters Result?
;

Result:
	Parameters | TYPE 
;

Parameters:
	"(" (ParameterList ","?)? ")"
; 

ParameterList:
	ParameterDecl ("," ParameterDecl)*
;

ParameterDecl:
	(ID IdList)? "..."? TYPE
;

SwitchStmt:
	"switch" Anderson ID? "{" (("case" Exp SwitchCase)*  ("default" SwitchCase* )?) "}"
;

SwitchCase:
	":" (Statement ";"? )*
;

IfStmt:
	"if" Anderson Exp Block ("else" (IfStmt | Block))?
;

Anderson:
	((Decl | Assig | Exp) ";")?
;

Block:
	"{" (Statement ";"? )* "}"
;

Statement:
	SimpleStmt | IfStmt | SwitchStmt | ReturnStmt | ForStmt
;

ReturnStmt:
	"return" Exp?
;

Decl:
	(("var" | "const") ID IdList TYPE ("=" Exp ExpList)?)
;

ShortVarDecl:
	ID IdList ":=" ExpList
;

Assig :
	ID ((IdList "=" Exp ExpList) | ("++"|"--") | (("+="|"-="|"*="|"/=") Exp))
;

IdList:
	("," ID)*	
;

ExpList:
	("," Exp)*
;

Exp: 
	ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?
;

SimpleStmt:
	Decl | Assig | Call | Exp 
;

ExpAux:
	"!"? "(" Exp ")" (ExpJoin)? 
;

Call:
	ID ("." ID)* "(" (Exp ExpList)? ")"
;

ExpJoin:
	(OP_REL | OP_UNARY | OP_SUM | OP_MULT | "&&" | "||") Exp
;

RelExp:
	NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral
;

BooleanExp:
	 Or	
;

Or:
	"!"? And ('||' And)*
;

And:
	BooleanLiteral ('&&' BooleanLiteral)*
;

BooleanLiteral:
	BOOL
;

AritExp:
	Addition	
;

Addition:
	(OP_SUM? Multiplication)+
;

Multiplication:
	NumberLiteral (OP_MULT? NumberLiteral)*
;

NumberLiteral:
	INT
;

terminal TYPE:
	"string" | "int" | "bool"
;

terminal OP_SUM:
	('+'|'-')
;

terminal OP_MULT:
	('*'|'/')
;

terminal OP_REL:
	"<=" | ">=" | "<" | ">"	
;

terminal OP_UNARY:
	"==" | "!="	
;

terminal BOOL:
	"true" | "false"
;
