/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.go.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.go.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Anderson_____DeclParserRuleCall_1_0_0_or_ExpParserRuleCall_1_0_2___SemicolonKeyword_1_1__q;
	protected AbstractElementAlias match_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3;
	protected AbstractElementAlias match_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0;
	protected AbstractElementAlias match_Block_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_Block___LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_3__q;
	protected AbstractElementAlias match_ForClause_DeclParserRuleCall_1_q;
	protected AbstractElementAlias match_ForClause_ExpParserRuleCall_3_q;
	protected AbstractElementAlias match_ForStmt_RangeClauseParserRuleCall_1_0_1_q;
	protected AbstractElementAlias match_FuncDecl_ReceiverParserRuleCall_2_q;
	protected AbstractElementAlias match_SimpleStmt_DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1;
	protected AbstractElementAlias match_SimpleStmt___DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1__q;
	protected AbstractElementAlias match_SourceFile_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_SourceFile_SemicolonKeyword_4_1_q;
	protected AbstractElementAlias match_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a;
	protected AbstractElementAlias match_SwitchCase_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_SwitchStmt_DefaultKeyword_4_1_0_q;
	protected AbstractElementAlias match_SwitchStmt_IDTerminalRuleCall_2_q;
	protected AbstractElementAlias match_TopLevelDecl_DeclParserRuleCall_0_1_or_TypeDefParserRuleCall_2_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GoGrammarAccess) access;
		match_Anderson_____DeclParserRuleCall_1_0_0_or_ExpParserRuleCall_1_0_2___SemicolonKeyword_1_1__q = new GroupAlias(false, true, new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAndersonAccess().getDeclParserRuleCall_1_0_0()), new TokenAlias(false, false, grammarAccess.getAndersonAccess().getExpParserRuleCall_1_0_2())), new TokenAlias(false, false, grammarAccess.getAndersonAccess().getSemicolonKeyword_1_1()));
		match_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssigAccess().getAsteriskEqualsSignKeyword_1_2_0_2()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getHyphenMinusEqualsSignKeyword_1_2_0_1()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getPlusSignEqualsSignKeyword_1_2_0_0()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getSolidusEqualsSignKeyword_1_2_0_3()));
		match_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssigAccess().getHyphenMinusHyphenMinusKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getPlusSignPlusSignKeyword_1_1_0()));
		match_Block_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getBlockAccess().getSemicolonKeyword_2_1());
		match_Block___LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_3__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1()), new TokenAlias(false, false, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3()));
		match_ForClause_DeclParserRuleCall_1_q = new TokenAlias(false, true, grammarAccess.getForClauseAccess().getDeclParserRuleCall_1());
		match_ForClause_ExpParserRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getForClauseAccess().getExpParserRuleCall_3());
		match_ForStmt_RangeClauseParserRuleCall_1_0_1_q = new TokenAlias(false, true, grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_0_1());
		match_FuncDecl_ReceiverParserRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getFuncDeclAccess().getReceiverParserRuleCall_2());
		match_SimpleStmt_DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getSimpleStmtAccess().getDeclParserRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2_1()));
		match_SimpleStmt___DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getSimpleStmtAccess().getDeclParserRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2_1()));
		match_SourceFile_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getSourceFileAccess().getSemicolonKeyword_2());
		match_SourceFile_SemicolonKeyword_4_1_q = new TokenAlias(false, true, grammarAccess.getSourceFileAccess().getSemicolonKeyword_4_1());
		match_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_3_0()), new TokenAlias(false, true, grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1()));
		match_SwitchCase_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getSwitchCaseAccess().getSemicolonKeyword_2_1());
		match_SwitchStmt_DefaultKeyword_4_1_0_q = new TokenAlias(false, true, grammarAccess.getSwitchStmtAccess().getDefaultKeyword_4_1_0());
		match_SwitchStmt_IDTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getSwitchStmtAccess().getIDTerminalRuleCall_2());
		match_TopLevelDecl_DeclParserRuleCall_0_1_or_TypeDefParserRuleCall_2_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getTopLevelDeclAccess().getDeclParserRuleCall_0_1()), new TokenAlias(false, false, grammarAccess.getTopLevelDeclAccess().getTypeDefParserRuleCall_2_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getDeclRule())
			return getDeclToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getExpRule())
			return getExpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getImportDeclRule())
			return getImportDeclToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPackageRule())
			return getPackageToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRangeClauseRule())
			return getRangeClauseToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getReceiverRule())
			return getReceiverToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSignatureRule())
			return getSignatureToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeDefRule())
			return getTypeDefToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Decl:
	 * 	ShortVarDecl | (("var" | "const") ID IdList TypeName ("=" Exp ExpList)?)
	 * ;
	 */
	protected String getDeclToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ":=()";
	}
	
	/**
	 * Exp: 
	 * 	Call | ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?
	 * ;
	 */
	protected String getExpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * ImportDecl:
	 * 	"import" (ImportSpec | ("(" (ImportSpec ";"?)* ")"))
	 * ;
	 */
	protected String getImportDeclToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "import\"\"";
	}
	
	/**
	 * Package:
	 * 	"package" ID
	 * ;
	 */
	protected String getPackageToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "package";
	}
	
	/**
	 * RangeClause:
	 * 	(ExpList (":="|"="))? "range" Exp
	 * ;
	 */
	protected String getRangeClauseToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "range()";
	}
	
	/**
	 * Receiver:
	 * 	Parameters
	 * ;
	 */
	protected String getReceiverToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * Signature:
	 * 	Parameters Result?
	 * ;
	 */
	protected String getSignatureToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * TypeDef:
	 * 		"type" ID TypeName
	 * ;
	 */
	protected String getTypeDefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "typestring";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Anderson_____DeclParserRuleCall_1_0_0_or_ExpParserRuleCall_1_0_2___SemicolonKeyword_1_1__q.equals(syntax))
				emit_Anderson_____DeclParserRuleCall_1_0_0_or_ExpParserRuleCall_1_0_2___SemicolonKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3.equals(syntax))
				emit_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0.equals(syntax))
				emit_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Block_SemicolonKeyword_2_1_q.equals(syntax))
				emit_Block_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Block___LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_3__q.equals(syntax))
				emit_Block___LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_3__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForClause_DeclParserRuleCall_1_q.equals(syntax))
				emit_ForClause_DeclParserRuleCall_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForClause_ExpParserRuleCall_3_q.equals(syntax))
				emit_ForClause_ExpParserRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForStmt_RangeClauseParserRuleCall_1_0_1_q.equals(syntax))
				emit_ForStmt_RangeClauseParserRuleCall_1_0_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_FuncDecl_ReceiverParserRuleCall_2_q.equals(syntax))
				emit_FuncDecl_ReceiverParserRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleStmt_DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1.equals(syntax))
				emit_SimpleStmt_DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleStmt___DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1__q.equals(syntax))
				emit_SimpleStmt___DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceFile_SemicolonKeyword_2_q.equals(syntax))
				emit_SourceFile_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceFile_SemicolonKeyword_4_1_q.equals(syntax))
				emit_SourceFile_SemicolonKeyword_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a.equals(syntax))
				emit_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchCase_SemicolonKeyword_2_1_q.equals(syntax))
				emit_SwitchCase_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchStmt_DefaultKeyword_4_1_0_q.equals(syntax))
				emit_SwitchStmt_DefaultKeyword_4_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchStmt_IDTerminalRuleCall_2_q.equals(syntax))
				emit_SwitchStmt_IDTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_TopLevelDecl_DeclParserRuleCall_0_1_or_TypeDefParserRuleCall_2_1.equals(syntax))
				emit_TopLevelDecl_DeclParserRuleCall_0_1_or_TypeDefParserRuleCall_2_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ((Decl | Exp) ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) Exp Block+=Block
	 *     (rule start) 'switch' (ambiguity) ID? '{' 'case' Exp SwitchCase+=SwitchCase
	 *     (rule start) 'switch' (ambiguity) ID? '{' 'default' SwitchCase+=SwitchCase
	 *     (rule start) 'switch' (ambiguity) ID? '{' 'default'? '}' (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_Anderson_____DeclParserRuleCall_1_0_0_or_ExpParserRuleCall_1_0_2___SemicolonKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+=' | '-=' | '*=' | '/='
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ID (ambiguity) expression=Exp
	 */
	protected void emit_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '++' | '--'
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ID (ambiguity) (rule end)
	 *     id=ID (ambiguity) Block=Block
	 */
	protected void emit_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Statement+=Statement (ambiguity) '}' (rule end)
	 *     Statement+=Statement (ambiguity) Statement+=Statement
	 */
	protected void emit_Block_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('{' '}')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'func' Receiver? ID Signature (ambiguity) (rule start)
	 */
	protected void emit_Block___LeftCurlyBracketKeyword_1_RightCurlyBracketKeyword_3__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Decl?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' (ambiguity) ';' Exp? ';' Block=Block
	 *     (rule start) 'for' (ambiguity) ';' Exp? ';' id=ID
	 *     (rule start) (ambiguity) ';' Exp? ';' (Decl | Exp)? (rule start)
	 *     (rule start) (ambiguity) ';' Exp? ';' id=ID
	 */
	protected void emit_ForClause_DeclParserRuleCall_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Exp?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' Decl? ';' (ambiguity) ';' Block=Block
	 *     (rule start) 'for' Decl? ';' (ambiguity) ';' id=ID
	 *     (rule start) Decl? ';' (ambiguity) ';' (Decl | Exp)? (rule start)
	 *     (rule start) Decl? ';' (ambiguity) ';' id=ID
	 */
	protected void emit_ForClause_ExpParserRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     RangeClause?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' Exp (ambiguity) Block=Block
	 */
	protected void emit_ForStmt_RangeClauseParserRuleCall_1_0_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Receiver?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'func' (ambiguity) ID Signature '{' Statement+=Statement
	 *     (rule start) 'func' (ambiguity) ID Signature ('{' '}')? (rule start)
	 *     (rule start) 'func' (ambiguity) ID Signature (rule start)
	 */
	protected void emit_FuncDecl_ReceiverParserRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Decl | Exp
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_SimpleStmt_DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (Decl | Exp)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Decl? ';' Exp? ';' (ambiguity) (rule start)
	 */
	protected void emit_SimpleStmt___DeclParserRuleCall_0_1_or_ExpParserRuleCall_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Package (ambiguity) (ImportDecl ';'?)* (rule start)
	 *     (rule start) Package (ambiguity) (ImportDecl ';'?)* TopLevelDecl+=TopLevelDecl
	 */
	protected void emit_SourceFile_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     TopLevelDecl+=TopLevelDecl (ambiguity) (rule end)
	 *     TopLevelDecl+=TopLevelDecl (ambiguity) TopLevelDecl+=TopLevelDecl
	 */
	protected void emit_SourceFile_SemicolonKeyword_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ImportDecl ';'?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Package ';'? (ambiguity) (rule start)
	 *     (rule start) Package ';'? (ambiguity) TopLevelDecl+=TopLevelDecl
	 */
	protected void emit_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Statement+=Statement (ambiguity) (rule end)
	 *     Statement+=Statement (ambiguity) Statement+=Statement
	 */
	protected void emit_SwitchCase_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'default'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'switch' ((Decl | Exp) ';')? ID? '{' (ambiguity) '}' (rule start)
	 *     Assig=Assig ';' ID? '{' (ambiguity) '}' (rule end)
	 *     SwitchCase+=SwitchCase (ambiguity) '}' (rule end)
	 */
	protected void emit_SwitchStmt_DefaultKeyword_4_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'switch' ((Decl | Exp) ';')? (ambiguity) '{' 'case' Exp SwitchCase+=SwitchCase
	 *     (rule start) 'switch' ((Decl | Exp) ';')? (ambiguity) '{' 'default' SwitchCase+=SwitchCase
	 *     (rule start) 'switch' ((Decl | Exp) ';')? (ambiguity) '{' 'default'? '}' (rule start)
	 *     Assig=Assig ';' (ambiguity) '{' 'case' Exp SwitchCase+=SwitchCase
	 *     Assig=Assig ';' (ambiguity) '{' 'default' SwitchCase+=SwitchCase
	 *     Assig=Assig ';' (ambiguity) '{' 'default'? '}' (rule end)
	 */
	protected void emit_SwitchStmt_IDTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Decl | TypeDef
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_TopLevelDecl_DeclParserRuleCall_0_1_or_TypeDefParserRuleCall_2_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
