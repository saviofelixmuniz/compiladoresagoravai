/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.go.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.go.services.GoGrammarAccess;

@SuppressWarnings("all")
public class GoSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GoGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Anderson___ExpParserRuleCall_1_0_2_SemicolonKeyword_1_1__q;
	protected AbstractElementAlias match_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3;
	protected AbstractElementAlias match_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0;
	protected AbstractElementAlias match_Block_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_Decl_ConstKeyword_1_0_1_or_VarKeyword_1_0_0;
	protected AbstractElementAlias match_ForClause_ExpParserRuleCall_3_q;
	protected AbstractElementAlias match_ForStmt___ExpParserRuleCall_1_0_0_RangeClauseParserRuleCall_1_0_1_q__q;
	protected AbstractElementAlias match_SimpleStmt_ExpParserRuleCall_2_1_q;
	protected AbstractElementAlias match_SourceFile_SemicolonKeyword_2_q;
	protected AbstractElementAlias match_SourceFile_SemicolonKeyword_4_1_q;
	protected AbstractElementAlias match_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a;
	protected AbstractElementAlias match_StatementList_SemicolonKeyword_1_1_q;
	protected AbstractElementAlias match_SwitchCase_SemicolonKeyword_2_1_q;
	protected AbstractElementAlias match_SwitchStmt_DefaultKeyword_4_1_0_q;
	protected AbstractElementAlias match_SwitchStmt_IDTerminalRuleCall_2_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GoGrammarAccess) access;
		match_Anderson___ExpParserRuleCall_1_0_2_SemicolonKeyword_1_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getAndersonAccess().getExpParserRuleCall_1_0_2()), new TokenAlias(false, false, grammarAccess.getAndersonAccess().getSemicolonKeyword_1_1()));
		match_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssigAccess().getAsteriskEqualsSignKeyword_1_2_0_2()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getHyphenMinusEqualsSignKeyword_1_2_0_1()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getPlusSignEqualsSignKeyword_1_2_0_0()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getSolidusEqualsSignKeyword_1_2_0_3()));
		match_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getAssigAccess().getHyphenMinusHyphenMinusKeyword_1_1_1()), new TokenAlias(false, false, grammarAccess.getAssigAccess().getPlusSignPlusSignKeyword_1_1_0()));
		match_Block_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getBlockAccess().getSemicolonKeyword_2_1());
		match_Decl_ConstKeyword_1_0_1_or_VarKeyword_1_0_0 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getDeclAccess().getConstKeyword_1_0_1()), new TokenAlias(false, false, grammarAccess.getDeclAccess().getVarKeyword_1_0_0()));
		match_ForClause_ExpParserRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getForClauseAccess().getExpParserRuleCall_3());
		match_ForStmt___ExpParserRuleCall_1_0_0_RangeClauseParserRuleCall_1_0_1_q__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getForStmtAccess().getExpParserRuleCall_1_0_0()), new TokenAlias(false, true, grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_0_1()));
		match_SimpleStmt_ExpParserRuleCall_2_1_q = new TokenAlias(false, true, grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2_1());
		match_SourceFile_SemicolonKeyword_2_q = new TokenAlias(false, true, grammarAccess.getSourceFileAccess().getSemicolonKeyword_2());
		match_SourceFile_SemicolonKeyword_4_1_q = new TokenAlias(false, true, grammarAccess.getSourceFileAccess().getSemicolonKeyword_4_1());
		match_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_3_0()), new TokenAlias(false, true, grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1()));
		match_StatementList_SemicolonKeyword_1_1_q = new TokenAlias(false, true, grammarAccess.getStatementListAccess().getSemicolonKeyword_1_1());
		match_SwitchCase_SemicolonKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getSwitchCaseAccess().getSemicolonKeyword_2_1());
		match_SwitchStmt_DefaultKeyword_4_1_0_q = new TokenAlias(false, true, grammarAccess.getSwitchStmtAccess().getDefaultKeyword_4_1_0());
		match_SwitchStmt_IDTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getSwitchStmtAccess().getIDTerminalRuleCall_2());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCommCaseRule())
			return getCommCaseToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getExpRule())
			return getExpToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getExpListRule())
			return getExpListToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIdListRule())
			return getIdListToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getImportDeclRule())
			return getImportDeclToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPackageRule())
			return getPackageToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRangeClauseRule())
			return getRangeClauseToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTypeDefRule())
			return getTypeDefToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * CommCase:
	 * 	("case" (SendStmt | RecvStmt)) | "default"
	 * ;
	 */
	protected String getCommCaseToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "case()<-";
	}
	
	/**
	 * Exp: 
	 * 	Call | ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?
	 * ;
	 */
	protected String getExpToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "()";
	}
	
	/**
	 * ExpList:
	 * 	("," Exp)*
	 * ;
	 */
	protected String getExpListToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * IdList:
	 * 	("," ID)*	
	 * ;
	 */
	protected String getIdListToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * ImportDecl:
	 * 	"import" (ImportSpec | ("(" (ImportSpec ";"?)* ")"))
	 * ;
	 */
	protected String getImportDeclToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "import\"\"";
	}
	
	/**
	 * Package:
	 * 	"package" ID
	 * ;
	 */
	protected String getPackageToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "package";
	}
	
	/**
	 * RangeClause:
	 * 	(ExpList (":="|"="))? "range" Exp
	 * ;
	 */
	protected String getRangeClauseToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "range()";
	}
	
	/**
	 * TypeDef:
	 * 	"type" ID TypeName
	 * ;
	 */
	protected String getTypeDefToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "typestring";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Anderson___ExpParserRuleCall_1_0_2_SemicolonKeyword_1_1__q.equals(syntax))
				emit_Anderson___ExpParserRuleCall_1_0_2_SemicolonKeyword_1_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3.equals(syntax))
				emit_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0.equals(syntax))
				emit_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Block_SemicolonKeyword_2_1_q.equals(syntax))
				emit_Block_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Decl_ConstKeyword_1_0_1_or_VarKeyword_1_0_0.equals(syntax))
				emit_Decl_ConstKeyword_1_0_1_or_VarKeyword_1_0_0(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForClause_ExpParserRuleCall_3_q.equals(syntax))
				emit_ForClause_ExpParserRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForStmt___ExpParserRuleCall_1_0_0_RangeClauseParserRuleCall_1_0_1_q__q.equals(syntax))
				emit_ForStmt___ExpParserRuleCall_1_0_0_RangeClauseParserRuleCall_1_0_1_q__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SimpleStmt_ExpParserRuleCall_2_1_q.equals(syntax))
				emit_SimpleStmt_ExpParserRuleCall_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceFile_SemicolonKeyword_2_q.equals(syntax))
				emit_SourceFile_SemicolonKeyword_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceFile_SemicolonKeyword_4_1_q.equals(syntax))
				emit_SourceFile_SemicolonKeyword_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a.equals(syntax))
				emit_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_StatementList_SemicolonKeyword_1_1_q.equals(syntax))
				emit_StatementList_SemicolonKeyword_1_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchCase_SemicolonKeyword_2_1_q.equals(syntax))
				emit_SwitchCase_SemicolonKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchStmt_DefaultKeyword_4_1_0_q.equals(syntax))
				emit_SwitchStmt_DefaultKeyword_4_1_0_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_SwitchStmt_IDTerminalRuleCall_2_q.equals(syntax))
				emit_SwitchStmt_IDTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (Exp ';')?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'if' (ambiguity) Exp Block+=Block
	 *     (rule start) 'switch' (ambiguity) ID? '{' 'case' Exp SwitchCase+=SwitchCase
	 *     (rule start) 'switch' (ambiguity) ID? '{' 'default' SwitchCase+=SwitchCase
	 *     (rule start) 'switch' (ambiguity) ID? '{' 'default'? '}' (rule start)
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) ID ':' 'if' (ambiguity) Exp Block+=Block
	 */
	protected void emit_Anderson___ExpParserRuleCall_1_0_2_SemicolonKeyword_1_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '+=' | '-=' | '*=' | '/='
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ID (ambiguity) expression=Exp
	 */
	protected void emit_Assig_AsteriskEqualsSignKeyword_1_2_0_2_or_HyphenMinusEqualsSignKeyword_1_2_0_1_or_PlusSignEqualsSignKeyword_1_2_0_0_or_SolidusEqualsSignKeyword_1_2_0_3(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     '++' | '--'
	 *
	 * This ambiguous syntax occurs at:
	 *     id=ID (ambiguity) (rule end)
	 *     id=ID (ambiguity) Block=Block
	 */
	protected void emit_Assig_HyphenMinusHyphenMinusKeyword_1_1_1_or_PlusSignPlusSignKeyword_1_1_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Statement+=Statement (ambiguity) '}' (rule end)
	 *     Statement+=Statement (ambiguity) Statement+=Statement
	 */
	protected void emit_Block_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'var' | 'const'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) name=ID
	 */
	protected void emit_Decl_ConstKeyword_1_0_1_or_VarKeyword_1_0_0(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Exp?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ';' (ambiguity) ';' Exp? (rule start)
	 *     (rule start) ';' (ambiguity) ';' decl=Decl
	 *     (rule start) ';' (ambiguity) ';' id=ID
	 *     (rule start) 'for' ';' (ambiguity) ';' Block=Block
	 *     (rule start) 'for' ';' (ambiguity) ';' id=ID
	 *     (rule start) ID ':' 'for' ';' (ambiguity) ';' Block=Block
	 *     (rule start) ID ':' 'for' ';' (ambiguity) ';' id=ID
	 *     decl=Decl ';' (ambiguity) ';' Block=Block
	 *     decl=Decl ';' (ambiguity) ';' Exp? (rule end)
	 *     decl=Decl ';' (ambiguity) ';' decl=Decl
	 *     decl=Decl ';' (ambiguity) ';' id=ID
	 */
	protected void emit_ForClause_ExpParserRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (Exp RangeClause?)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'for' (ambiguity) Block=Block
	 *     (rule start) ID ':' 'for' (ambiguity) Block=Block
	 */
	protected void emit_ForStmt___ExpParserRuleCall_1_0_0_RangeClauseParserRuleCall_1_0_1_q__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     Exp?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) ';' Exp? ';' (ambiguity) (rule start)
	 *     decl=Decl ';' Exp? ';' (ambiguity) (rule end)
	 */
	protected void emit_SimpleStmt_ExpParserRuleCall_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Package (ambiguity) (ImportDecl ';'?)* (rule start)
	 *     (rule start) Package (ambiguity) (ImportDecl ';'?)* TopLevelDecl+=TopLevelDecl
	 */
	protected void emit_SourceFile_SemicolonKeyword_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     TopLevelDecl+=TopLevelDecl (ambiguity) (rule end)
	 *     TopLevelDecl+=TopLevelDecl (ambiguity) TopLevelDecl+=TopLevelDecl
	 */
	protected void emit_SourceFile_SemicolonKeyword_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (ImportDecl ';'?)*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) Package ';'? (ambiguity) (rule start)
	 *     (rule start) Package ';'? (ambiguity) TopLevelDecl+=TopLevelDecl
	 */
	protected void emit_SourceFile___ImportDeclParserRuleCall_3_0_SemicolonKeyword_3_1_q__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Statement+=Statement (ambiguity) (rule end)
	 *     Statement+=Statement (ambiguity) Statement+=Statement
	 */
	protected void emit_StatementList_SemicolonKeyword_1_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ';'?
	 *
	 * This ambiguous syntax occurs at:
	 *     Statement+=Statement (ambiguity) (rule end)
	 *     Statement+=Statement (ambiguity) Statement+=Statement
	 */
	protected void emit_SwitchCase_SemicolonKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'default'?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'switch' (Exp ';')? ID? '{' (ambiguity) '}' (rule start)
	 *     Assig=Assig ';' ID? '{' (ambiguity) '}' (rule end)
	 *     SwitchCase+=SwitchCase (ambiguity) '}' (rule end)
	 *     decl=Decl ';' ID? '{' (ambiguity) '}' (rule end)
	 */
	protected void emit_SwitchStmt_DefaultKeyword_4_1_0_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ID?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) 'switch' (Exp ';')? (ambiguity) '{' 'case' Exp SwitchCase+=SwitchCase
	 *     (rule start) 'switch' (Exp ';')? (ambiguity) '{' 'default' SwitchCase+=SwitchCase
	 *     (rule start) 'switch' (Exp ';')? (ambiguity) '{' 'default'? '}' (rule start)
	 *     Assig=Assig ';' (ambiguity) '{' 'case' Exp SwitchCase+=SwitchCase
	 *     Assig=Assig ';' (ambiguity) '{' 'default' SwitchCase+=SwitchCase
	 *     Assig=Assig ';' (ambiguity) '{' 'default'? '}' (rule end)
	 *     decl=Decl ';' (ambiguity) '{' 'case' Exp SwitchCase+=SwitchCase
	 *     decl=Decl ';' (ambiguity) '{' 'default' SwitchCase+=SwitchCase
	 *     decl=Decl ';' (ambiguity) '{' 'default'? '}' (rule end)
	 */
	protected void emit_SwitchStmt_IDTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
