/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.go.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsGreetingParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		//Model:
		//	greetings+=Greeting*;
		@Override public ParserRule getRule() { return rule; }
		
		//greetings+=Greeting*
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }
		
		//Greeting
		public RuleCall getGreetingsGreetingParserRuleCall_0() { return cGreetingsGreetingParserRuleCall_0; }
	}
	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Greeting");
		private final RuleCall cSourceFileParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Greeting:
		//	SourceFile;
		@Override public ParserRule getRule() { return rule; }
		
		//SourceFile
		public RuleCall getSourceFileParserRuleCall() { return cSourceFileParserRuleCall; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPackageParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cImportDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cTopLevelDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//SourceFile:
		//	Package ";"? (ImportDecl ";"?)* (TopLevelDecl ";"?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Package ";"? (ImportDecl ";"?)* (TopLevelDecl ";"?)*
		public Group getGroup() { return cGroup; }
		
		//Package
		public RuleCall getPackageParserRuleCall_0() { return cPackageParserRuleCall_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//(ImportDecl ";"?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//ImportDecl
		public RuleCall getImportDeclParserRuleCall_2_0() { return cImportDeclParserRuleCall_2_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//(TopLevelDecl ";"?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclParserRuleCall_3_0() { return cTopLevelDeclParserRuleCall_3_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShortVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFuncDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//TopLevelDecl:
		//	ShortVarDecl | Decl | FuncDecl;
		@Override public ParserRule getRule() { return rule; }
		
		//// TODO: methoddecl
		//ShortVarDecl | Decl | FuncDecl
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// TODO: methoddecl
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_0() { return cShortVarDeclParserRuleCall_0; }
		
		//Decl
		public RuleCall getDeclParserRuleCall_1() { return cDeclParserRuleCall_1; }
		
		//FuncDecl
		public RuleCall getFuncDeclParserRuleCall_2() { return cFuncDeclParserRuleCall_2; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ImportDecl:
		//	"import" (ImportSpec | "(" (ImportSpec ";"?)* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"import" (ImportSpec | "(" (ImportSpec ";"?)* ")")
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//ImportSpec | "(" (ImportSpec ";"?)* ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_0() { return cImportSpecParserRuleCall_1_0; }
		
		//"(" (ImportSpec ";"?)* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ImportSpec ";"?)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_1_1_0() { return cImportSpecParserRuleCall_1_1_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportSpec:
		//	("." | ID)? STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | ID)? STRING
		public Group getGroup() { return cGroup; }
		
		//("." | ID)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package:
		//	"package" ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" ID
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cRangeClauseParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cForClauseParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final RuleCall cBlockParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ForStmt:
		//	"for" (Exp RangeClause? | ForClause) Block;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (Exp RangeClause? | ForClause) Block
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//Exp RangeClause? | ForClause
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Exp RangeClause?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_0_0() { return cExpParserRuleCall_1_0_0; }
		
		//RangeClause?
		public RuleCall getRangeClauseParserRuleCall_1_0_1() { return cRangeClauseParserRuleCall_1_0_1; }
		
		//ForClause
		public RuleCall getForClauseParserRuleCall_1_1() { return cForClauseParserRuleCall_1_1; }
		
		//Block
		public RuleCall getBlockParserRuleCall_2() { return cBlockParserRuleCall_2; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cShortVarDeclParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cSimpleStmtParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ForClause:
		//	(ShortVarDecl | Decl)? ";" Exp? ";" SimpleStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//(ShortVarDecl | Decl)? ";" Exp? ";" SimpleStmt?
		public Group getGroup() { return cGroup; }
		
		//(ShortVarDecl | Decl)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_0_0() { return cShortVarDeclParserRuleCall_0_0; }
		
		//Decl
		public RuleCall getDeclParserRuleCall_0_1() { return cDeclParserRuleCall_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
		
		//Exp?
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
		
		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
		
		//SimpleStmt?
		public RuleCall getSimpleStmtParserRuleCall_4() { return cSimpleStmtParserRuleCall_4; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cExpListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RangeClause:
		//	(ExpList (":=" | "="))? "range" Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpList (":=" | "="))? "range" Exp
		public Group getGroup() { return cGroup; }
		
		//(ExpList (":=" | "="))?
		public Group getGroup_0() { return cGroup_0; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_0_0() { return cExpListParserRuleCall_0_0; }
		
		//":=" | "="
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_0() { return cColonEqualsSignKeyword_0_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionType:
		//	"func" Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class FuncDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.FuncDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSignatureParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FuncDecl:
		//	"func" ID Signature Block?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" ID Signature Block?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_2() { return cSignatureParserRuleCall_2; }
		
		//Block?
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Signature:
		//	Parameters Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters Result?
		public Group getGroup() { return cGroup; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Result?
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTYPETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	Parameters | TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters | TYPE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//TYPE
		public RuleCall getTYPETerminalRuleCall_1() { return cTYPETerminalRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"(" (ParameterList ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (ParameterList ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ParameterList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_0() { return cParameterListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterDeclParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ParameterList:
		//	ParameterDecl ("," ParameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl ("," ParameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//("," ParameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_1_1() { return cParameterDeclParserRuleCall_1_1; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cIdListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTYPETerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParameterDecl:
		//	(ID IdList)? "..."? TYPE;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID IdList)? "..."? TYPE
		public Group getGroup() { return cGroup; }
		
		//(ID IdList)?
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_0_1() { return cIdListParserRuleCall_0_1; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//TYPE
		public RuleCall getTYPETerminalRuleCall_2() { return cTYPETerminalRuleCall_2; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAndersonParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cCaseKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final RuleCall cExpParserRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final RuleCall cSwitchCaseParserRuleCall_4_0_2 = (RuleCall)cGroup_4_0.eContents().get(2);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cDefaultKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final RuleCall cSwitchCaseParserRuleCall_4_1_1 = (RuleCall)cGroup_4_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SwitchStmt:
		//	"switch" Anderson ID? "{" (("case" Exp SwitchCase)* ("default" SwitchCase*)?) "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" Anderson ID? "{" (("case" Exp SwitchCase)* ("default" SwitchCase*)?) "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//Anderson
		public RuleCall getAndersonParserRuleCall_1() { return cAndersonParserRuleCall_1; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//("case" Exp SwitchCase)* ("default" SwitchCase*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//("case" Exp SwitchCase)*
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//"case"
		public Keyword getCaseKeyword_4_0_0() { return cCaseKeyword_4_0_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_4_0_1() { return cExpParserRuleCall_4_0_1; }
		
		//SwitchCase
		public RuleCall getSwitchCaseParserRuleCall_4_0_2() { return cSwitchCaseParserRuleCall_4_0_2; }
		
		//("default" SwitchCase*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//"default"
		public Keyword getDefaultKeyword_4_1_0() { return cDefaultKeyword_4_1_0; }
		
		//SwitchCase*
		public RuleCall getSwitchCaseParserRuleCall_4_1_1() { return cSwitchCaseParserRuleCall_4_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cColonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//SwitchCase:
		//	":" (Statement ";"?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//":" (Statement ";"?)*
		public Group getGroup() { return cGroup; }
		
		//":"
		public Keyword getColonKeyword_0() { return cColonKeyword_0; }
		
		//(Statement ";"?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_1_0() { return cStatementParserRuleCall_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAndersonParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cBlockParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final RuleCall cIfStmtParserRuleCall_4_1_0 = (RuleCall)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cBlockParserRuleCall_4_1_1 = (RuleCall)cAlternatives_4_1.eContents().get(1);
		
		//IfStmt:
		//	"if" Anderson Exp Block ("else" (IfStmt | Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" Anderson Exp Block ("else" (IfStmt | Block))?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Anderson
		public RuleCall getAndersonParserRuleCall_1() { return cAndersonParserRuleCall_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
		
		//Block
		public RuleCall getBlockParserRuleCall_3() { return cBlockParserRuleCall_3; }
		
		//("else" (IfStmt | Block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//IfStmt | Block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_4_1_0() { return cIfStmtParserRuleCall_4_1_0; }
		
		//Block
		public RuleCall getBlockParserRuleCall_4_1_1() { return cBlockParserRuleCall_4_1_1; }
	}
	public class AndersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Anderson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cAssigParserRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cExpParserRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Anderson:
		//	((Decl | Assig | Exp) ";")?;
		@Override public ParserRule getRule() { return rule; }
		
		//((Decl | Assig | Exp) ";")?
		public Group getGroup() { return cGroup; }
		
		//Decl | Assig | Exp
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Decl
		public RuleCall getDeclParserRuleCall_0_0() { return cDeclParserRuleCall_0_0; }
		
		//Assig
		public RuleCall getAssigParserRuleCall_0_1() { return cAssigParserRuleCall_0_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_0_2() { return cExpParserRuleCall_0_2; }
		
		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Block:
		//	"{" (Statement ";"?)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"{" (Statement ";"?)* "}"
		public Group getGroup() { return cGroup; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//(Statement ";"?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_1_0() { return cStatementParserRuleCall_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSimpleStmtParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStmtParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSwitchStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReturnStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForStmtParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Statement:
		//	SimpleStmt | IfStmt | SwitchStmt | ReturnStmt | ForStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//SimpleStmt | IfStmt | SwitchStmt | ReturnStmt | ForStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_0() { return cSimpleStmtParserRuleCall_0; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_1() { return cIfStmtParserRuleCall_1; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtParserRuleCall_2() { return cSwitchStmtParserRuleCall_2; }
		
		//ReturnStmt
		public RuleCall getReturnStmtParserRuleCall_3() { return cReturnStmtParserRuleCall_3; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_4() { return cForStmtParserRuleCall_4; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnStmt:
		//	"return" Exp?;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" Exp?
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//Exp?
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShortVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cVarKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cIdListParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cTYPETerminalRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1_4_1 = (RuleCall)cGroup_1_4.eContents().get(1);
		private final RuleCall cExpListParserRuleCall_1_4_2 = (RuleCall)cGroup_1_4.eContents().get(2);
		
		//Decl:
		//	ShortVarDecl | ("var" | "const") ID IdList TYPE ("=" Exp ExpList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//ShortVarDecl | ("var" | "const") ID IdList TYPE ("=" Exp ExpList)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_0() { return cShortVarDeclParserRuleCall_0; }
		
		//("var" | "const") ID IdList TYPE ("=" Exp ExpList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"var" | "const"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//"var"
		public Keyword getVarKeyword_1_0_0() { return cVarKeyword_1_0_0; }
		
		//"const"
		public Keyword getConstKeyword_1_0_1() { return cConstKeyword_1_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_1_2() { return cIdListParserRuleCall_1_2; }
		
		//TYPE
		public RuleCall getTYPETerminalRuleCall_1_3() { return cTYPETerminalRuleCall_1_3; }
		
		//("=" Exp ExpList)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_4_0() { return cEqualsSignKeyword_1_4_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_4_1() { return cExpParserRuleCall_1_4_1; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_1_4_2() { return cExpListParserRuleCall_1_4_2; }
	}
	public class ShortVarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ShortVarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cIdListParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpListParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ShortVarDecl:
		//	ID IdList ":=" ExpList;
		@Override public ParserRule getRule() { return rule; }
		
		//ID IdList ":=" ExpList
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_1() { return cIdListParserRuleCall_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_3() { return cExpListParserRuleCall_3; }
	}
	public class AssigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Assig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cIdListParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpParserRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final RuleCall cExpListParserRuleCall_1_0_3 = (RuleCall)cGroup_1_0.eContents().get(3);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_1_2_0_2 = (Keyword)cAlternatives_1_2_0.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_1_2_0_3 = (Keyword)cAlternatives_1_2_0.eContents().get(3);
		private final RuleCall cExpParserRuleCall_1_2_1 = (RuleCall)cGroup_1_2.eContents().get(1);
		
		//Assig:
		//	ID (IdList "=" Exp ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=") Exp);
		@Override public ParserRule getRule() { return rule; }
		
		//ID (IdList "=" Exp ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=") Exp)
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//IdList "=" Exp ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=") Exp
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//IdList "=" Exp ExpList
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_1_0_0() { return cIdListParserRuleCall_1_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_0_2() { return cExpParserRuleCall_1_0_2; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_1_0_3() { return cExpListParserRuleCall_1_0_3; }
		
		//("++" | "--")
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_1_0() { return cPlusSignPlusSignKeyword_1_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1; }
		
		//("+=" | "-=" | "*=" | "/=") Exp
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"+=" | "-=" | "*=" | "/="
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_2_0_0() { return cPlusSignEqualsSignKeyword_1_2_0_0; }
		
		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1_2_0_1() { return cHyphenMinusEqualsSignKeyword_1_2_0_1; }
		
		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1_2_0_2() { return cAsteriskEqualsSignKeyword_1_2_0_2; }
		
		//"/="
		public Keyword getSolidusEqualsSignKeyword_1_2_0_3() { return cSolidusEqualsSignKeyword_1_2_0_3; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_2_1() { return cExpParserRuleCall_1_2_1; }
	}
	public class IdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.IdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IdList:
		//	("," ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//("," ID)*
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ExpListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ExpList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExpList:
		//	("," Exp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//("," Exp)*
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpAuxParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanExpParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cExpJoinParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cAritExpParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExpJoinParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cRelExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cIDTerminalRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cExpJoinParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		
		//Exp:
		//	ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?;
		@Override public ParserRule getRule() { return rule; }
		
		//ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExpAux
		public RuleCall getExpAuxParserRuleCall_0() { return cExpAuxParserRuleCall_0; }
		
		//BooleanExp ExpJoin?
		public Group getGroup_1() { return cGroup_1; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall_1_0() { return cBooleanExpParserRuleCall_1_0; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_1_1() { return cExpJoinParserRuleCall_1_1; }
		
		//AritExp ExpJoin?
		public Group getGroup_2() { return cGroup_2; }
		
		//AritExp
		public RuleCall getAritExpParserRuleCall_2_0() { return cAritExpParserRuleCall_2_0; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_2_1() { return cExpJoinParserRuleCall_2_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3() { return cSTRINGTerminalRuleCall_3; }
		
		//RelExp
		public RuleCall getRelExpParserRuleCall_4() { return cRelExpParserRuleCall_4; }
		
		//ID ExpJoin?
		public Group getGroup_5() { return cGroup_5; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_5_0() { return cIDTerminalRuleCall_5_0; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_5_1() { return cExpJoinParserRuleCall_5_1; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cShortVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeclParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAssigParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cExpParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//SimpleStmt:
		//	ShortVarDecl | Decl | Assig | Call | Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//ShortVarDecl | Decl | Assig | Call | Exp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ShortVarDecl
		public RuleCall getShortVarDeclParserRuleCall_0() { return cShortVarDeclParserRuleCall_0; }
		
		//Decl
		public RuleCall getDeclParserRuleCall_1() { return cDeclParserRuleCall_1; }
		
		//Assig
		public RuleCall getAssigParserRuleCall_2() { return cAssigParserRuleCall_2; }
		
		//Call
		public RuleCall getCallParserRuleCall_3() { return cCallParserRuleCall_3; }
		
		//Exp
		public RuleCall getExpParserRuleCall_4() { return cExpParserRuleCall_4; }
	}
	public class ExpAuxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ExpAux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cExpJoinParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ExpAux:
		//	"!"? "(" Exp ")" ExpJoin?;
		@Override public ParserRule getRule() { return rule; }
		
		//"!"? "(" Exp ")" ExpJoin?
		public Group getGroup() { return cGroup; }
		
		//"!"?
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_4() { return cExpJoinParserRuleCall_4; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cExpParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cExpListParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	ID ("." ID)* "(" (Exp ExpList)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)* "(" (Exp ExpList)? ")"
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(Exp ExpList)?
		public Group getGroup_3() { return cGroup_3; }
		
		//Exp
		public RuleCall getExpParserRuleCall_3_0() { return cExpParserRuleCall_3_0; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_3_1() { return cExpListParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ExpJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cOP_RELTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cOP_UNARYTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cOP_SUMTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cOP_MULTTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cAmpersandAmpersandKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cVerticalLineVerticalLineKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExpJoin:
		//	(OP_REL | OP_UNARY | OP_SUM | OP_MULT | "&&" | "||") Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//(OP_REL | OP_UNARY | OP_SUM | OP_MULT | "&&" | "||") Exp
		public Group getGroup() { return cGroup; }
		
		//OP_REL | OP_UNARY | OP_SUM | OP_MULT | "&&" | "||"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//OP_REL
		public RuleCall getOP_RELTerminalRuleCall_0_0() { return cOP_RELTerminalRuleCall_0_0; }
		
		//OP_UNARY
		public RuleCall getOP_UNARYTerminalRuleCall_0_1() { return cOP_UNARYTerminalRuleCall_0_1; }
		
		//OP_SUM
		public RuleCall getOP_SUMTerminalRuleCall_0_2() { return cOP_SUMTerminalRuleCall_0_2; }
		
		//OP_MULT
		public RuleCall getOP_MULTTerminalRuleCall_0_3() { return cOP_MULTTerminalRuleCall_0_3; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0_4() { return cAmpersandAmpersandKeyword_0_4; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0_5() { return cVerticalLineVerticalLineKeyword_0_5; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class RelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.RelExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cOP_RELTerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cOP_UNARYTerminalRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cOP_UNARYTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//RelExp:
		//	NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteral (OP_REL | OP_UNARY) NumberLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0_0() { return cNumberLiteralParserRuleCall_0_0; }
		
		//OP_REL | OP_UNARY
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//OP_REL
		public RuleCall getOP_RELTerminalRuleCall_0_1_0() { return cOP_RELTerminalRuleCall_0_1_0; }
		
		//OP_UNARY
		public RuleCall getOP_UNARYTerminalRuleCall_0_1_1() { return cOP_UNARYTerminalRuleCall_0_1_1; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0_2() { return cNumberLiteralParserRuleCall_0_2; }
		
		//BooleanLiteral OP_UNARY BooleanLiteral
		public Group getGroup_1() { return cGroup_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1_0() { return cBooleanLiteralParserRuleCall_1_0; }
		
		//OP_UNARY
		public RuleCall getOP_UNARYTerminalRuleCall_1_1() { return cOP_UNARYTerminalRuleCall_1_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1_2() { return cBooleanLiteralParserRuleCall_1_2; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BooleanExp");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExp:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAndParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAndParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Or:
		//	"!"? And ('||' And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"!"? And ('||' And)*
		public Group getGroup() { return cGroup; }
		
		//"!"?
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//And
		public RuleCall getAndParserRuleCall_1() { return cAndParserRuleCall_1; }
		
		//('||' And)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_2_0() { return cVerticalLineVerticalLineKeyword_2_0; }
		
		//And
		public RuleCall getAndParserRuleCall_2_1() { return cAndParserRuleCall_2_1; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//And:
		//	BooleanLiteral ('&&' BooleanLiteral)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteral ('&&' BooleanLiteral)*
		public Group getGroup() { return cGroup; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }
		
		//('&&' BooleanLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1_1() { return cBooleanLiteralParserRuleCall_1_1; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BooleanLiteral");
		private final RuleCall cBOOLTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanLiteral:
		//	BOOL;
		@Override public ParserRule getRule() { return rule; }
		
		//BOOL
		public RuleCall getBOOLTerminalRuleCall() { return cBOOLTerminalRuleCall; }
	}
	public class AritExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.AritExp");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AritExp:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOP_SUMTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMultiplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Addition:
		//	(OP_SUM? Multiplication)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(OP_SUM? Multiplication)+
		public Group getGroup() { return cGroup; }
		
		//OP_SUM?
		public RuleCall getOP_SUMTerminalRuleCall_0() { return cOP_SUMTerminalRuleCall_0; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_1() { return cMultiplicationParserRuleCall_1; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOP_MULTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Multiplication:
		//	NumberLiteral (OP_MULT? NumberLiteral)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral (OP_MULT? NumberLiteral)*
		public Group getGroup() { return cGroup; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//(OP_MULT? NumberLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OP_MULT?
		public RuleCall getOP_MULTTerminalRuleCall_1_0() { return cOP_MULTTerminalRuleCall_1_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1_1() { return cNumberLiteralParserRuleCall_1_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.NumberLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NumberLiteral:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	
	
	private final ModelElements pModel;
	private final GreetingElements pGreeting;
	private final SourceFileElements pSourceFile;
	private final TopLevelDeclElements pTopLevelDecl;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final PackageElements pPackage;
	private final ForStmtElements pForStmt;
	private final ForClauseElements pForClause;
	private final RangeClauseElements pRangeClause;
	private final FunctionTypeElements pFunctionType;
	private final FuncDeclElements pFuncDecl;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final SwitchStmtElements pSwitchStmt;
	private final SwitchCaseElements pSwitchCase;
	private final IfStmtElements pIfStmt;
	private final AndersonElements pAnderson;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final ReturnStmtElements pReturnStmt;
	private final DeclElements pDecl;
	private final ShortVarDeclElements pShortVarDecl;
	private final AssigElements pAssig;
	private final IdListElements pIdList;
	private final ExpListElements pExpList;
	private final ExpElements pExp;
	private final SimpleStmtElements pSimpleStmt;
	private final ExpAuxElements pExpAux;
	private final CallElements pCall;
	private final ExpJoinElements pExpJoin;
	private final RelExpElements pRelExp;
	private final BooleanExpElements pBooleanExp;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final BooleanLiteralElements pBooleanLiteral;
	private final AritExpElements pAritExp;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final NumberLiteralElements pNumberLiteral;
	private final TerminalRule tTYPE;
	private final TerminalRule tOP_SUM;
	private final TerminalRule tOP_MULT;
	private final TerminalRule tOP_REL;
	private final TerminalRule tOP_UNARY;
	private final TerminalRule tBOOL;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGreeting = new GreetingElements();
		this.pSourceFile = new SourceFileElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pPackage = new PackageElements();
		this.pForStmt = new ForStmtElements();
		this.pForClause = new ForClauseElements();
		this.pRangeClause = new RangeClauseElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pFuncDecl = new FuncDeclElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pIfStmt = new IfStmtElements();
		this.pAnderson = new AndersonElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pDecl = new DeclElements();
		this.pShortVarDecl = new ShortVarDeclElements();
		this.pAssig = new AssigElements();
		this.pIdList = new IdListElements();
		this.pExpList = new ExpListElements();
		this.pExp = new ExpElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pExpAux = new ExpAuxElements();
		this.pCall = new CallElements();
		this.pExpJoin = new ExpJoinElements();
		this.pRelExp = new RelExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pAritExp = new AritExpElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.tTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.TYPE");
		this.tOP_SUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_SUM");
		this.tOP_MULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_MULT");
		this.tOP_REL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_REL");
		this.tOP_UNARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_UNARY");
		this.tBOOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BOOL");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.go.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	greetings+=Greeting*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Greeting:
	//	SourceFile;
	public GreetingElements getGreetingAccess() {
		return pGreeting;
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}
	
	//SourceFile:
	//	Package ";"? (ImportDecl ";"?)* (TopLevelDecl ";"?)*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	//TopLevelDecl:
	//	ShortVarDecl | Decl | FuncDecl;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//ImportDecl:
	//	"import" (ImportSpec | "(" (ImportSpec ";"?)* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | ID)? STRING;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//Package:
	//	"package" ID;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//ForStmt:
	//	"for" (Exp RangeClause? | ForClause) Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//ForClause:
	//	(ShortVarDecl | Decl)? ";" Exp? ";" SimpleStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//RangeClause:
	//	(ExpList (":=" | "="))? "range" Exp;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	//FunctionType:
	//	"func" Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//FuncDecl:
	//	"func" ID Signature Block?;
	public FuncDeclElements getFuncDeclAccess() {
		return pFuncDecl;
	}
	
	public ParserRule getFuncDeclRule() {
		return getFuncDeclAccess().getRule();
	}
	
	//Signature:
	//	Parameters Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	Parameters | TYPE;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	"(" (ParameterList ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl ("," ParameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	(ID IdList)? "..."? TYPE;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//SwitchStmt:
	//	"switch" Anderson ID? "{" (("case" Exp SwitchCase)* ("default" SwitchCase*)?) "}";
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//SwitchCase:
	//	":" (Statement ";"?)*;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}
	
	//IfStmt:
	//	"if" Anderson Exp Block ("else" (IfStmt | Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//Anderson:
	//	((Decl | Assig | Exp) ";")?;
	public AndersonElements getAndersonAccess() {
		return pAnderson;
	}
	
	public ParserRule getAndersonRule() {
		return getAndersonAccess().getRule();
	}
	
	//Block:
	//	"{" (Statement ";"?)* "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//	SimpleStmt | IfStmt | SwitchStmt | ReturnStmt | ForStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ReturnStmt:
	//	"return" Exp?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//Decl:
	//	ShortVarDecl | ("var" | "const") ID IdList TYPE ("=" Exp ExpList)?;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//ShortVarDecl:
	//	ID IdList ":=" ExpList;
	public ShortVarDeclElements getShortVarDeclAccess() {
		return pShortVarDecl;
	}
	
	public ParserRule getShortVarDeclRule() {
		return getShortVarDeclAccess().getRule();
	}
	
	//Assig:
	//	ID (IdList "=" Exp ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=") Exp);
	public AssigElements getAssigAccess() {
		return pAssig;
	}
	
	public ParserRule getAssigRule() {
		return getAssigAccess().getRule();
	}
	
	//IdList:
	//	("," ID)*;
	public IdListElements getIdListAccess() {
		return pIdList;
	}
	
	public ParserRule getIdListRule() {
		return getIdListAccess().getRule();
	}
	
	//ExpList:
	//	("," Exp)*;
	public ExpListElements getExpListAccess() {
		return pExpList;
	}
	
	public ParserRule getExpListRule() {
		return getExpListAccess().getRule();
	}
	
	//Exp:
	//	ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//SimpleStmt:
	//	ShortVarDecl | Decl | Assig | Call | Exp;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//ExpAux:
	//	"!"? "(" Exp ")" ExpJoin?;
	public ExpAuxElements getExpAuxAccess() {
		return pExpAux;
	}
	
	public ParserRule getExpAuxRule() {
		return getExpAuxAccess().getRule();
	}
	
	//Call:
	//	ID ("." ID)* "(" (Exp ExpList)? ")";
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//ExpJoin:
	//	(OP_REL | OP_UNARY | OP_SUM | OP_MULT | "&&" | "||") Exp;
	public ExpJoinElements getExpJoinAccess() {
		return pExpJoin;
	}
	
	public ParserRule getExpJoinRule() {
		return getExpJoinAccess().getRule();
	}
	
	//RelExp:
	//	NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral;
	public RelExpElements getRelExpAccess() {
		return pRelExp;
	}
	
	public ParserRule getRelExpRule() {
		return getRelExpAccess().getRule();
	}
	
	//BooleanExp:
	//	Or;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//Or:
	//	"!"? And ('||' And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And:
	//	BooleanLiteral ('&&' BooleanLiteral)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//BooleanLiteral:
	//	BOOL;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//AritExp:
	//	Addition;
	public AritExpElements getAritExpAccess() {
		return pAritExp;
	}
	
	public ParserRule getAritExpRule() {
		return getAritExpAccess().getRule();
	}
	
	//Addition:
	//	(OP_SUM? Multiplication)+;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication:
	//	NumberLiteral (OP_MULT? NumberLiteral)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//NumberLiteral:
	//	INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//terminal TYPE:
	//	"string" | "int" | "bool";
	public TerminalRule getTYPERule() {
		return tTYPE;
	}
	
	//terminal OP_SUM:
	//	'+' | '-';
	public TerminalRule getOP_SUMRule() {
		return tOP_SUM;
	}
	
	//terminal OP_MULT:
	//	'*' | '/';
	public TerminalRule getOP_MULTRule() {
		return tOP_MULT;
	}
	
	//terminal OP_REL:
	//	"<=" | ">=" | "<" | ">";
	public TerminalRule getOP_RELRule() {
		return tOP_REL;
	}
	
	//terminal OP_UNARY:
	//	"==" | "!=";
	public TerminalRule getOP_UNARYRule() {
		return tOP_UNARY;
	}
	
	//terminal BOOL:
	//	"true" | "false";
	public TerminalRule getBOOLRule() {
		return tBOOL;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
