/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.go.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GoGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Model");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsSourceFileParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		//Model:
		//	elements+=SourceFile*;
		@Override public ParserRule getRule() { return rule; }
		
		//elements+=SourceFile*
		public Assignment getElementsAssignment() { return cElementsAssignment; }
		
		//SourceFile
		public RuleCall getElementsSourceFileParserRuleCall_0() { return cElementsSourceFileParserRuleCall_0; }
	}
	public class SourceFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SourceFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSourceFileAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cPackageParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cImportDeclParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cTopLevelDeclAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cTopLevelDeclTopLevelDeclParserRuleCall_4_0_0 = (RuleCall)cTopLevelDeclAssignment_4_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		
		//SourceFile:
		//	{SourceFile} Package ";"? (ImportDecl ";"?)* (TopLevelDecl+=TopLevelDecl ";"?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SourceFile} Package ";"? (ImportDecl ";"?)* (TopLevelDecl+=TopLevelDecl ";"?)*
		public Group getGroup() { return cGroup; }
		
		//{SourceFile}
		public Action getSourceFileAction_0() { return cSourceFileAction_0; }
		
		//Package
		public RuleCall getPackageParserRuleCall_1() { return cPackageParserRuleCall_1; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//(ImportDecl ";"?)*
		public Group getGroup_3() { return cGroup_3; }
		
		//ImportDecl
		public RuleCall getImportDeclParserRuleCall_3_0() { return cImportDeclParserRuleCall_3_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_3_1() { return cSemicolonKeyword_3_1; }
		
		//(TopLevelDecl+=TopLevelDecl ";"?)*
		public Group getGroup_4() { return cGroup_4; }
		
		//TopLevelDecl+=TopLevelDecl
		public Assignment getTopLevelDeclAssignment_4_0() { return cTopLevelDeclAssignment_4_0; }
		
		//TopLevelDecl
		public RuleCall getTopLevelDeclTopLevelDeclParserRuleCall_4_0_0() { return cTopLevelDeclTopLevelDeclParserRuleCall_4_0_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_4_1() { return cSemicolonKeyword_4_1; }
	}
	public class TopLevelDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.TopLevelDecl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cTopLevelDeclAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDeclAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_0_1_0 = (RuleCall)cDeclAssignment_0_1.eContents().get(0);
		private final Assignment cFuncAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFuncFuncDeclParserRuleCall_1_0 = (RuleCall)cFuncAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cTopLevelDeclAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cTypeDefParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//TopLevelDecl:
		//	{TopLevelDecl} decl=Decl | func=FuncDecl | {TopLevelDecl} TypeDef;
		@Override public ParserRule getRule() { return rule; }
		
		//{TopLevelDecl} decl=Decl | func=FuncDecl | {TopLevelDecl} TypeDef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{TopLevelDecl} decl=Decl
		public Group getGroup_0() { return cGroup_0; }
		
		//{TopLevelDecl}
		public Action getTopLevelDeclAction_0_0() { return cTopLevelDeclAction_0_0; }
		
		//decl=Decl
		public Assignment getDeclAssignment_0_1() { return cDeclAssignment_0_1; }
		
		//Decl
		public RuleCall getDeclDeclParserRuleCall_0_1_0() { return cDeclDeclParserRuleCall_0_1_0; }
		
		//func=FuncDecl
		public Assignment getFuncAssignment_1() { return cFuncAssignment_1; }
		
		//FuncDecl
		public RuleCall getFuncFuncDeclParserRuleCall_1_0() { return cFuncFuncDeclParserRuleCall_1_0; }
		
		//{TopLevelDecl} TypeDef
		public Group getGroup_2() { return cGroup_2; }
		
		//{TopLevelDecl}
		public Action getTopLevelDeclAction_2_0() { return cTopLevelDeclAction_2_0; }
		
		//TypeDef
		public RuleCall getTypeDefParserRuleCall_2_1() { return cTypeDefParserRuleCall_2_1; }
	}
	public class ImportDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ImportDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_0 = (RuleCall)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final RuleCall cImportSpecParserRuleCall_1_1_1_0 = (RuleCall)cGroup_1_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1_1_1 = (Keyword)cGroup_1_1_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		
		//ImportDecl:
		//	"import" (ImportSpec | "(" (ImportSpec ";"?)* ")");
		@Override public ParserRule getRule() { return rule; }
		
		//"import" (ImportSpec | "(" (ImportSpec ";"?)* ")")
		public Group getGroup() { return cGroup; }
		
		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//ImportSpec | "(" (ImportSpec ";"?)* ")"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_0() { return cImportSpecParserRuleCall_1_0; }
		
		//"(" (ImportSpec ";"?)* ")"
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0() { return cLeftParenthesisKeyword_1_1_0; }
		
		//(ImportSpec ";"?)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//ImportSpec
		public RuleCall getImportSpecParserRuleCall_1_1_1_0() { return cImportSpecParserRuleCall_1_1_1_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1_1_1_1() { return cSemicolonKeyword_1_1_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_1_1_2() { return cRightParenthesisKeyword_1_1_2; }
	}
	public class ImportSpecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ImportSpec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ImportSpec:
		//	("." | ID)? STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//("." | ID)? STRING
		public Group getGroup() { return cGroup; }
		
		//("." | ID)?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//"."
		public Keyword getFullStopKeyword_0_0() { return cFullStopKeyword_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1() { return cIDTerminalRuleCall_0_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Package:
		//	"package" ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"package" ID
		public Group getGroup() { return cGroup; }
		
		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ForStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ForStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cRangeClauseParserRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cForClauseParserRuleCall_1_1 = (RuleCall)cAlternatives_1.eContents().get(1);
		private final Assignment cBlockAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlockBlockParserRuleCall_2_0 = (RuleCall)cBlockAssignment_2.eContents().get(0);
		
		//ForStmt:
		//	"for" (Exp RangeClause? | ForClause?) Block=Block;
		@Override public ParserRule getRule() { return rule; }
		
		//"for" (Exp RangeClause? | ForClause?) Block=Block
		public Group getGroup() { return cGroup; }
		
		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//Exp RangeClause? | ForClause?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//Exp RangeClause?
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_0_0() { return cExpParserRuleCall_1_0_0; }
		
		//RangeClause?
		public RuleCall getRangeClauseParserRuleCall_1_0_1() { return cRangeClauseParserRuleCall_1_0_1; }
		
		//ForClause?
		public RuleCall getForClauseParserRuleCall_1_1() { return cForClauseParserRuleCall_1_1; }
		
		//Block=Block
		public Assignment getBlockAssignment_2() { return cBlockAssignment_2; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_2_0() { return cBlockBlockParserRuleCall_2_0; }
	}
	public class ForClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ForClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForClauseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDeclAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_1_0 = (RuleCall)cDeclAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cExpParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cSimpleStmtParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ForClause:
		//	{ForClause} decl=Decl? ";" Exp? ";" SimpleStmt?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForClause} decl=Decl? ";" Exp? ";" SimpleStmt?
		public Group getGroup() { return cGroup; }
		
		//{ForClause}
		public Action getForClauseAction_0() { return cForClauseAction_0; }
		
		//decl=Decl?
		public Assignment getDeclAssignment_1() { return cDeclAssignment_1; }
		
		//Decl
		public RuleCall getDeclDeclParserRuleCall_1_0() { return cDeclDeclParserRuleCall_1_0; }
		
		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
		
		//Exp?
		public RuleCall getExpParserRuleCall_3() { return cExpParserRuleCall_3; }
		
		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
		
		//SimpleStmt?
		public RuleCall getSimpleStmtParserRuleCall_5() { return cSimpleStmtParserRuleCall_5; }
	}
	public class RangeClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.RangeClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cExpListParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_1_0 = (Keyword)cAlternatives_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_1 = (Keyword)cAlternatives_0_1.eContents().get(1);
		private final Keyword cRangeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//RangeClause:
		//	(ExpList (":=" | "="))? "range" Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//(ExpList (":=" | "="))? "range" Exp
		public Group getGroup() { return cGroup; }
		
		//(ExpList (":=" | "="))?
		public Group getGroup_0() { return cGroup_0; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_0_0() { return cExpListParserRuleCall_0_0; }
		
		//":=" | "="
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_0() { return cColonEqualsSignKeyword_0_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_1_1() { return cEqualsSignKeyword_0_1_1; }
		
		//"range"
		public Keyword getRangeKeyword_1() { return cRangeKeyword_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
	}
	public class FunctionTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.FunctionType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cSignatureParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FunctionType:
		//	"func" Signature;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" Signature
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//Signature
		public RuleCall getSignatureParserRuleCall_1() { return cSignatureParserRuleCall_1; }
	}
	public class FuncDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.FuncDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFuncKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReceiverAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cReceiverReceiverParserRuleCall_1_0 = (RuleCall)cReceiverAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cSignatureAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSignatureSignatureParserRuleCall_3_0 = (RuleCall)cSignatureAssignment_3.eContents().get(0);
		private final Assignment cBlockAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlockBlockParserRuleCall_4_0 = (RuleCall)cBlockAssignment_4.eContents().get(0);
		
		//FuncDecl:
		//	"func" receiver=Receiver? name=ID signature=Signature block=Block?;
		@Override public ParserRule getRule() { return rule; }
		
		//"func" receiver=Receiver? name=ID signature=Signature block=Block?
		public Group getGroup() { return cGroup; }
		
		//"func"
		public Keyword getFuncKeyword_0() { return cFuncKeyword_0; }
		
		//receiver=Receiver?
		public Assignment getReceiverAssignment_1() { return cReceiverAssignment_1; }
		
		//Receiver
		public RuleCall getReceiverReceiverParserRuleCall_1_0() { return cReceiverReceiverParserRuleCall_1_0; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//signature=Signature
		public Assignment getSignatureAssignment_3() { return cSignatureAssignment_3; }
		
		//Signature
		public RuleCall getSignatureSignatureParserRuleCall_3_0() { return cSignatureSignatureParserRuleCall_3_0; }
		
		//block=Block?
		public Assignment getBlockAssignment_4() { return cBlockAssignment_4; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_0() { return cBlockBlockParserRuleCall_4_0; }
	}
	public class ReceiverElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Receiver");
		private final RuleCall cParametersParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Receiver:
		//	Parameters;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall() { return cParametersParserRuleCall; }
	}
	public class SignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Signature");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cResultParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Signature:
		//	Parameters Result?;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters Result?
		public Group getGroup() { return cGroup; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//Result?
		public RuleCall getResultParserRuleCall_1() { return cResultParserRuleCall_1; }
	}
	public class ResultElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Result");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParametersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Result:
		//	Parameters | TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//Parameters | TypeName
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Parameters
		public RuleCall getParametersParserRuleCall_0() { return cParametersParserRuleCall_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class ParametersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Parameters");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cParameterListParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Parameters:
		//	"(" (ParameterList ","?)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"(" (ParameterList ","?)? ")"
		public Group getGroup() { return cGroup; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//(ParameterList ","?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//ParameterList
		public RuleCall getParameterListParserRuleCall_1_0() { return cParameterListParserRuleCall_1_0; }
		
		//","?
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class ParameterListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ParameterList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cParameterDeclParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cParameterDeclParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//ParameterList:
		//	ParameterDecl ("," ParameterDecl)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterDecl ("," ParameterDecl)*
		public Group getGroup() { return cGroup; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_0() { return cParameterDeclParserRuleCall_0; }
		
		//("," ParameterDecl)*
		public Group getGroup_1() { return cGroup_1; }
		
		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//ParameterDecl
		public RuleCall getParameterDeclParserRuleCall_1_1() { return cParameterDeclParserRuleCall_1_1; }
	}
	public class ParameterDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ParameterDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cIdListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFullStopFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ParameterDecl:
		//	(ID IdList)? "..."? TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//(ID IdList)? "..."? TypeName
		public Group getGroup() { return cGroup; }
		
		//(ID IdList)?
		public Group getGroup_0() { return cGroup_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_0_1() { return cIdListParserRuleCall_0_1; }
		
		//"..."?
		public Keyword getFullStopFullStopFullStopKeyword_1() { return cFullStopFullStopFullStopKeyword_1; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_2() { return cTypeNameParserRuleCall_2; }
	}
	public class SwitchStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SwitchStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSwitchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAndersonParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Group cGroup_4_0 = (Group)cGroup_4.eContents().get(0);
		private final Keyword cCaseKeyword_4_0_0 = (Keyword)cGroup_4_0.eContents().get(0);
		private final RuleCall cExpParserRuleCall_4_0_1 = (RuleCall)cGroup_4_0.eContents().get(1);
		private final Assignment cSwitchCaseAssignment_4_0_2 = (Assignment)cGroup_4_0.eContents().get(2);
		private final RuleCall cSwitchCaseSwitchCaseParserRuleCall_4_0_2_0 = (RuleCall)cSwitchCaseAssignment_4_0_2.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cDefaultKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cSwitchCaseAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cSwitchCaseSwitchCaseParserRuleCall_4_1_1_0 = (RuleCall)cSwitchCaseAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//SwitchStmt:
		//	"switch" Anderson ID? "{" (("case" Exp SwitchCase+=SwitchCase)* ("default" SwitchCase+=SwitchCase*)?) "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"switch" Anderson ID? "{" (("case" Exp SwitchCase+=SwitchCase)* ("default" SwitchCase+=SwitchCase*)?) "}"
		public Group getGroup() { return cGroup; }
		
		//"switch"
		public Keyword getSwitchKeyword_0() { return cSwitchKeyword_0; }
		
		//Anderson
		public RuleCall getAndersonParserRuleCall_1() { return cAndersonParserRuleCall_1; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//("case" Exp SwitchCase+=SwitchCase)* ("default" SwitchCase+=SwitchCase*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//("case" Exp SwitchCase+=SwitchCase)*
		public Group getGroup_4_0() { return cGroup_4_0; }
		
		//"case"
		public Keyword getCaseKeyword_4_0_0() { return cCaseKeyword_4_0_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_4_0_1() { return cExpParserRuleCall_4_0_1; }
		
		//SwitchCase+=SwitchCase
		public Assignment getSwitchCaseAssignment_4_0_2() { return cSwitchCaseAssignment_4_0_2; }
		
		//SwitchCase
		public RuleCall getSwitchCaseSwitchCaseParserRuleCall_4_0_2_0() { return cSwitchCaseSwitchCaseParserRuleCall_4_0_2_0; }
		
		//("default" SwitchCase+=SwitchCase*)?
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//"default"
		public Keyword getDefaultKeyword_4_1_0() { return cDefaultKeyword_4_1_0; }
		
		//SwitchCase+=SwitchCase*
		public Assignment getSwitchCaseAssignment_4_1_1() { return cSwitchCaseAssignment_4_1_1; }
		
		//SwitchCase
		public RuleCall getSwitchCaseSwitchCaseParserRuleCall_4_1_1_0() { return cSwitchCaseSwitchCaseParserRuleCall_4_1_1_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class SwitchCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SwitchCase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSwitchCaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_2_0_0 = (RuleCall)cStatementAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//SwitchCase:
		//	{SwitchCase} ":" (Statement+=Statement ";"?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{SwitchCase} ":" (Statement+=Statement ";"?)*
		public Group getGroup() { return cGroup; }
		
		//{SwitchCase}
		public Action getSwitchCaseAction_0() { return cSwitchCaseAction_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//(Statement+=Statement ";"?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//Statement+=Statement
		public Assignment getStatementAssignment_2_0() { return cStatementAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0_0() { return cStatementStatementParserRuleCall_2_0_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
	}
	public class IfStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.IfStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAndersonParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBlockBlockParserRuleCall_3_0 = (RuleCall)cBlockAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElseKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Assignment cIfStmtAssignment_4_1_0 = (Assignment)cAlternatives_4_1.eContents().get(0);
		private final RuleCall cIfStmtIfStmtParserRuleCall_4_1_0_0 = (RuleCall)cIfStmtAssignment_4_1_0.eContents().get(0);
		private final Assignment cBlockAssignment_4_1_1 = (Assignment)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_4_1_1_0 = (RuleCall)cBlockAssignment_4_1_1.eContents().get(0);
		
		//IfStmt:
		//	"if" Anderson Exp Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" Anderson Exp Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//Anderson
		public RuleCall getAndersonParserRuleCall_1() { return cAndersonParserRuleCall_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
		
		//Block+=Block
		public Assignment getBlockAssignment_3() { return cBlockAssignment_3; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_3_0() { return cBlockBlockParserRuleCall_3_0; }
		
		//("else" (IfStmt=IfStmt | Block+=Block))?
		public Group getGroup_4() { return cGroup_4; }
		
		//"else"
		public Keyword getElseKeyword_4_0() { return cElseKeyword_4_0; }
		
		//IfStmt=IfStmt | Block+=Block
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//IfStmt=IfStmt
		public Assignment getIfStmtAssignment_4_1_0() { return cIfStmtAssignment_4_1_0; }
		
		//IfStmt
		public RuleCall getIfStmtIfStmtParserRuleCall_4_1_0_0() { return cIfStmtIfStmtParserRuleCall_4_1_0_0; }
		
		//Block+=Block
		public Assignment getBlockAssignment_4_1_1() { return cBlockAssignment_4_1_1; }
		
		//Block
		public RuleCall getBlockBlockParserRuleCall_4_1_1_0() { return cBlockBlockParserRuleCall_4_1_1_0; }
	}
	public class AndersonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Anderson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAndersonAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Assignment cDeclAssignment_1_0_0 = (Assignment)cAlternatives_1_0.eContents().get(0);
		private final RuleCall cDeclDeclParserRuleCall_1_0_0_0 = (RuleCall)cDeclAssignment_1_0_0.eContents().get(0);
		private final Assignment cAssigAssignment_1_0_1 = (Assignment)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cAssigAssigParserRuleCall_1_0_1_0 = (RuleCall)cAssigAssignment_1_0_1.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1_0_2 = (RuleCall)cAlternatives_1_0.eContents().get(2);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Anderson:
		//	{Anderson} ((decl=Decl | Assig=Assig | Exp) ";")?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Anderson} ((decl=Decl | Assig=Assig | Exp) ";")?
		public Group getGroup() { return cGroup; }
		
		//{Anderson}
		public Action getAndersonAction_0() { return cAndersonAction_0; }
		
		//((decl=Decl | Assig=Assig | Exp) ";")?
		public Group getGroup_1() { return cGroup_1; }
		
		//decl=Decl | Assig=Assig | Exp
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//decl=Decl
		public Assignment getDeclAssignment_1_0_0() { return cDeclAssignment_1_0_0; }
		
		//Decl
		public RuleCall getDeclDeclParserRuleCall_1_0_0_0() { return cDeclDeclParserRuleCall_1_0_0_0; }
		
		//Assig=Assig
		public Assignment getAssigAssignment_1_0_1() { return cAssigAssignment_1_0_1; }
		
		//Assig
		public RuleCall getAssigAssigParserRuleCall_1_0_1_0() { return cAssigAssigParserRuleCall_1_0_1_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1_0_2() { return cExpParserRuleCall_1_0_2; }
		
		//";"
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_2_0_0 = (RuleCall)cStatementAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block:
		//	{Block} "{" (Statement+=Statement ";"?)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{Block} "{" (Statement+=Statement ";"?)* "}"
		public Group getGroup() { return cGroup; }
		
		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(Statement+=Statement ";"?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//Statement+=Statement
		public Assignment getStatementAssignment_2_0() { return cStatementAssignment_2_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_2_0_0() { return cStatementStatementParserRuleCall_2_0_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLabeledStmtAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLabeledStmtLabeledStmtParserRuleCall_0_0 = (RuleCall)cLabeledStmtAssignment_0.eContents().get(0);
		private final Assignment cSendStmtAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSendStmtSendStmtParserRuleCall_1_0 = (RuleCall)cSendStmtAssignment_1.eContents().get(0);
		private final RuleCall cSimpleStmtParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfStmtParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Assignment cSwitchStmtAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cSwitchStmtSwitchStmtParserRuleCall_4_0 = (RuleCall)cSwitchStmtAssignment_4.eContents().get(0);
		private final Assignment cReturnStmtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cReturnStmtReturnStmtParserRuleCall_5_0 = (RuleCall)cReturnStmtAssignment_5.eContents().get(0);
		private final RuleCall cForStmtParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final Assignment cBreakStmtAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cBreakStmtBreakStmtParserRuleCall_7_0 = (RuleCall)cBreakStmtAssignment_7.eContents().get(0);
		private final Assignment cContinueStmtAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cContinueStmtContinueStmtParserRuleCall_8_0 = (RuleCall)cContinueStmtAssignment_8.eContents().get(0);
		private final Assignment cGotoStmtAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cGotoStmtGotoStmtParserRuleCall_9_0 = (RuleCall)cGotoStmtAssignment_9.eContents().get(0);
		private final Assignment cFalltrhoughStmtAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cFalltrhoughStmtFalltrhoughStmtParserRuleCall_10_0 = (RuleCall)cFalltrhoughStmtAssignment_10.eContents().get(0);
		private final Assignment cDeferStmtAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cDeferStmtDeferStmtParserRuleCall_11_0 = (RuleCall)cDeferStmtAssignment_11.eContents().get(0);
		private final RuleCall cSelectStmtParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		
		//Statement:
		//	LabeledStmt=LabeledStmt | SendStmt=SendStmt | SimpleStmt | IfStmt | SwitchStmt=SwitchStmt | ReturnStmt=ReturnStmt |
		//	ForStmt | BreakStmt=BreakStmt | ContinueStmt=ContinueStmt | GotoStmt=GotoStmt | FalltrhoughStmt=FalltrhoughStmt |
		//	DeferStmt=DeferStmt | SelectStmt;
		@Override public ParserRule getRule() { return rule; }
		
		//LabeledStmt=LabeledStmt | SendStmt=SendStmt | SimpleStmt | IfStmt | SwitchStmt=SwitchStmt | ReturnStmt=ReturnStmt |
		//ForStmt | BreakStmt=BreakStmt | ContinueStmt=ContinueStmt | GotoStmt=GotoStmt | FalltrhoughStmt=FalltrhoughStmt |
		//DeferStmt=DeferStmt | SelectStmt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//LabeledStmt=LabeledStmt
		public Assignment getLabeledStmtAssignment_0() { return cLabeledStmtAssignment_0; }
		
		//LabeledStmt
		public RuleCall getLabeledStmtLabeledStmtParserRuleCall_0_0() { return cLabeledStmtLabeledStmtParserRuleCall_0_0; }
		
		//SendStmt=SendStmt
		public Assignment getSendStmtAssignment_1() { return cSendStmtAssignment_1; }
		
		//SendStmt
		public RuleCall getSendStmtSendStmtParserRuleCall_1_0() { return cSendStmtSendStmtParserRuleCall_1_0; }
		
		//SimpleStmt
		public RuleCall getSimpleStmtParserRuleCall_2() { return cSimpleStmtParserRuleCall_2; }
		
		//IfStmt
		public RuleCall getIfStmtParserRuleCall_3() { return cIfStmtParserRuleCall_3; }
		
		//SwitchStmt=SwitchStmt
		public Assignment getSwitchStmtAssignment_4() { return cSwitchStmtAssignment_4; }
		
		//SwitchStmt
		public RuleCall getSwitchStmtSwitchStmtParserRuleCall_4_0() { return cSwitchStmtSwitchStmtParserRuleCall_4_0; }
		
		//ReturnStmt=ReturnStmt
		public Assignment getReturnStmtAssignment_5() { return cReturnStmtAssignment_5; }
		
		//ReturnStmt
		public RuleCall getReturnStmtReturnStmtParserRuleCall_5_0() { return cReturnStmtReturnStmtParserRuleCall_5_0; }
		
		//ForStmt
		public RuleCall getForStmtParserRuleCall_6() { return cForStmtParserRuleCall_6; }
		
		//BreakStmt=BreakStmt
		public Assignment getBreakStmtAssignment_7() { return cBreakStmtAssignment_7; }
		
		//BreakStmt
		public RuleCall getBreakStmtBreakStmtParserRuleCall_7_0() { return cBreakStmtBreakStmtParserRuleCall_7_0; }
		
		//ContinueStmt=ContinueStmt
		public Assignment getContinueStmtAssignment_8() { return cContinueStmtAssignment_8; }
		
		//ContinueStmt
		public RuleCall getContinueStmtContinueStmtParserRuleCall_8_0() { return cContinueStmtContinueStmtParserRuleCall_8_0; }
		
		//GotoStmt=GotoStmt
		public Assignment getGotoStmtAssignment_9() { return cGotoStmtAssignment_9; }
		
		//GotoStmt
		public RuleCall getGotoStmtGotoStmtParserRuleCall_9_0() { return cGotoStmtGotoStmtParserRuleCall_9_0; }
		
		//FalltrhoughStmt=FalltrhoughStmt
		public Assignment getFalltrhoughStmtAssignment_10() { return cFalltrhoughStmtAssignment_10; }
		
		//FalltrhoughStmt
		public RuleCall getFalltrhoughStmtFalltrhoughStmtParserRuleCall_10_0() { return cFalltrhoughStmtFalltrhoughStmtParserRuleCall_10_0; }
		
		//DeferStmt=DeferStmt
		public Assignment getDeferStmtAssignment_11() { return cDeferStmtAssignment_11; }
		
		//DeferStmt
		public RuleCall getDeferStmtDeferStmtParserRuleCall_11_0() { return cDeferStmtDeferStmtParserRuleCall_11_0; }
		
		//SelectStmt
		public RuleCall getSelectStmtParserRuleCall_12() { return cSelectStmtParserRuleCall_12; }
	}
	public class SelectStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SelectStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSelectStmtAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCommClauseAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCommClauseCommClauseParserRuleCall_3_0 = (RuleCall)cCommClauseAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SelectStmt:
		//	{SelectStmt} "select" "{" CommClause+=CommClause* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//{SelectStmt} "select" "{" CommClause+=CommClause* "}"
		public Group getGroup() { return cGroup; }
		
		//{SelectStmt}
		public Action getSelectStmtAction_0() { return cSelectStmtAction_0; }
		
		//"select"
		public Keyword getSelectKeyword_1() { return cSelectKeyword_1; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//CommClause+=CommClause*
		public Assignment getCommClauseAssignment_3() { return cCommClauseAssignment_3; }
		
		//CommClause
		public RuleCall getCommClauseCommClauseParserRuleCall_3_0() { return cCommClauseCommClauseParserRuleCall_3_0; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CommClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.CommClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommCaseParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//CommClause:
		//	CommCase ":" StatementList;
		@Override public ParserRule getRule() { return rule; }
		
		//CommCase ":" StatementList
		public Group getGroup() { return cGroup; }
		
		//CommCase
		public RuleCall getCommCaseParserRuleCall_0() { return cCommCaseParserRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//StatementList
		public RuleCall getStatementListParserRuleCall_2() { return cStatementListParserRuleCall_2; }
	}
	public class StatementListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.StatementList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementListAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cStatementAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStatementStatementParserRuleCall_1_0_0 = (RuleCall)cStatementAssignment_1_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//StatementList:
		//	{StatementList} (Statement+=Statement ";"?)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{StatementList} (Statement+=Statement ";"?)*
		public Group getGroup() { return cGroup; }
		
		//{StatementList}
		public Action getStatementListAction_0() { return cStatementListAction_0; }
		
		//(Statement+=Statement ";"?)*
		public Group getGroup_1() { return cGroup_1; }
		
		//Statement+=Statement
		public Assignment getStatementAssignment_1_0() { return cStatementAssignment_1_0; }
		
		//Statement
		public RuleCall getStatementStatementParserRuleCall_1_0_0() { return cStatementStatementParserRuleCall_1_0_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1_1() { return cSemicolonKeyword_1_1; }
	}
	public class CommCaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.CommCase");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCaseKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cSendStmtParserRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cRecvStmtParserRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final Keyword cDefaultKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//CommCase:
		//	"case" (SendStmt | RecvStmt) | "default";
		@Override public ParserRule getRule() { return rule; }
		
		//"case" (SendStmt | RecvStmt) | "default"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"case" (SendStmt | RecvStmt)
		public Group getGroup_0() { return cGroup_0; }
		
		//"case"
		public Keyword getCaseKeyword_0_0() { return cCaseKeyword_0_0; }
		
		//SendStmt | RecvStmt
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//SendStmt
		public RuleCall getSendStmtParserRuleCall_0_1_0() { return cSendStmtParserRuleCall_0_1_0; }
		
		//RecvStmt
		public RuleCall getRecvStmtParserRuleCall_0_1_1() { return cRecvStmtParserRuleCall_0_1_1; }
		
		//"default"
		public Keyword getDefaultKeyword_1() { return cDefaultKeyword_1; }
	}
	public class RecvStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.RecvStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final RuleCall cExpParserRuleCall_0_0_0 = (RuleCall)cGroup_0_0.eContents().get(0);
		private final RuleCall cExpListParserRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0_0_2 = (Keyword)cGroup_0_0.eContents().get(2);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0_1_0 = (RuleCall)cGroup_0_1.eContents().get(0);
		private final RuleCall cIdListParserRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//RecvStmt:
		//	(Exp ExpList "=" | ID IdList ":=")? Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//(Exp ExpList "=" | ID IdList ":=")? Exp
		public Group getGroup() { return cGroup; }
		
		//(Exp ExpList "=" | ID IdList ":=")?
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//Exp ExpList "="
		public Group getGroup_0_0() { return cGroup_0_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_0_0_0() { return cExpParserRuleCall_0_0_0; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_0_0_1() { return cExpListParserRuleCall_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_0_0_2() { return cEqualsSignKeyword_0_0_2; }
		
		//ID IdList ":="
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0_1_0() { return cIDTerminalRuleCall_0_1_0; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_0_1_1() { return cIdListParserRuleCall_0_1_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_1_2() { return cColonEqualsSignKeyword_0_1_2; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class LabeledStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.LabeledStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cStatementParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//LabeledStmt:
		//	ID ":" Statement;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ":" Statement
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//Statement
		public RuleCall getStatementParserRuleCall_2() { return cStatementParserRuleCall_2; }
	}
	public class SendStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SendStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExpParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//SendStmt:
		//	Exp "<-" Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//Exp "<-" Exp
		public Group getGroup() { return cGroup; }
		
		//Exp
		public RuleCall getExpParserRuleCall_0() { return cExpParserRuleCall_0; }
		
		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword_1() { return cLessThanSignHyphenMinusKeyword_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
	}
	public class BreakStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BreakStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//BreakStmt:
		//	"break" ID? ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"break" ID? ";"?
		public Group getGroup() { return cGroup; }
		
		//"break"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ContinueStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ContinueStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cContinueKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ContinueStmt:
		//	"continue" ID? ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"continue" ID? ";"?
		public Group getGroup() { return cGroup; }
		
		//"continue"
		public Keyword getContinueKeyword_0() { return cContinueKeyword_0; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class GotoStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.GotoStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGotoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//GotoStmt:
		//	"goto" ID? ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"goto" ID? ";"?
		public Group getGroup() { return cGroup; }
		
		//"goto"
		public Keyword getGotoKeyword_0() { return cGotoKeyword_0; }
		
		//ID?
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class FalltrhoughStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.FalltrhoughStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFallthroughKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FalltrhoughStmt:
		//	"fallthrough" ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"fallthrough" ";"?
		public Group getGroup() { return cGroup; }
		
		//"fallthrough"
		public Keyword getFallthroughKeyword_0() { return cFallthroughKeyword_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}
	public class DeferStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.DeferStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDeferKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeferStmt:
		//	"defer" Exp ";"?;
		@Override public ParserRule getRule() { return rule; }
		
		//"defer" Exp ";"?
		public Group getGroup() { return cGroup; }
		
		//"defer"
		public Keyword getDeferKeyword_0() { return cDeferKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
		
		//";"?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class ReturnStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ReturnStmt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ReturnStmt:
		//	"return" Exp?;
		@Override public ParserRule getRule() { return rule; }
		
		//"return" Exp?
		public Group getGroup() { return cGroup; }
		
		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }
		
		//Exp?
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class TypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.TypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cTypeNameParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//TypeDef:
		//	"type" ID TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//"type" ID TypeName
		public Group getGroup() { return cGroup; }
		
		//"type"
		public Keyword getTypeKeyword_0() { return cTypeKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_2() { return cTypeNameParserRuleCall_2; }
	}
	public class StructElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Struct");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final RuleCall cFieldDeclParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Struct:
		//	"struct" "{" (FieldDecl ";"?)* "}";
		@Override public ParserRule getRule() { return rule; }
		
		//"struct" "{" (FieldDecl ";"?)* "}"
		public Group getGroup() { return cGroup; }
		
		//"struct"
		public Keyword getStructKeyword_0() { return cStructKeyword_0; }
		
		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(FieldDecl ";"?)*
		public Group getGroup_2() { return cGroup_2; }
		
		//FieldDecl
		public RuleCall getFieldDeclParserRuleCall_2_0() { return cFieldDeclParserRuleCall_2_0; }
		
		//";"?
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class FieldDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.FieldDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIdListParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTypeNameParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//FieldDecl:
		//	IdList TypeName;
		@Override public ParserRule getRule() { return rule; }
		
		//IdList TypeName
		public Group getGroup() { return cGroup; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_0() { return cIdListParserRuleCall_0; }
		
		//TypeName
		public RuleCall getTypeNameParserRuleCall_1() { return cTypeNameParserRuleCall_1; }
	}
	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Decl");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cIdListParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cExpParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final RuleCall cExpListParserRuleCall_0_4 = (RuleCall)cGroup_0.eContents().get(4);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cVarKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cConstKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_1_0 = (RuleCall)cNameAssignment_1_1.eContents().get(0);
		private final Assignment cIdListAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdListIdListParserRuleCall_1_2_0 = (RuleCall)cIdListAssignment_1_2.eContents().get(0);
		private final Assignment cTypeAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cTypeTypeNameParserRuleCall_1_3_0 = (RuleCall)cTypeAssignment_1_3.eContents().get(0);
		private final Group cGroup_1_4 = (Group)cGroup_1.eContents().get(4);
		private final Keyword cEqualsSignKeyword_1_4_0 = (Keyword)cGroup_1_4.eContents().get(0);
		private final Assignment cExpAssignment_1_4_1 = (Assignment)cGroup_1_4.eContents().get(1);
		private final RuleCall cExpExpParserRuleCall_1_4_1_0 = (RuleCall)cExpAssignment_1_4_1.eContents().get(0);
		private final Assignment cExplistAssignment_1_4_2 = (Assignment)cGroup_1_4.eContents().get(2);
		private final RuleCall cExplistExpListParserRuleCall_1_4_2_0 = (RuleCall)cExplistAssignment_1_4_2.eContents().get(0);
		
		//Decl:
		//	name=ID IdList ":=" Exp ExpList | ("var" | "const") name=ID idList=IdList type=TypeName ("=" exp=Exp
		//	explist=ExpList)?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID IdList ":=" Exp ExpList | ("var" | "const") name=ID idList=IdList type=TypeName ("=" exp=Exp explist=ExpList)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name=ID IdList ":=" Exp ExpList
		public Group getGroup_0() { return cGroup_0; }
		
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }
		
		//IdList
		public RuleCall getIdListParserRuleCall_0_1() { return cIdListParserRuleCall_0_1; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_0_2() { return cColonEqualsSignKeyword_0_2; }
		
		//Exp
		public RuleCall getExpParserRuleCall_0_3() { return cExpParserRuleCall_0_3; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_0_4() { return cExpListParserRuleCall_0_4; }
		
		//("var" | "const") name=ID idList=IdList type=TypeName ("=" exp=Exp explist=ExpList)?
		public Group getGroup_1() { return cGroup_1; }
		
		//"var" | "const"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//"var"
		public Keyword getVarKeyword_1_0_0() { return cVarKeyword_1_0_0; }
		
		//"const"
		public Keyword getConstKeyword_1_0_1() { return cConstKeyword_1_0_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_1_0() { return cNameIDTerminalRuleCall_1_1_0; }
		
		//idList=IdList
		public Assignment getIdListAssignment_1_2() { return cIdListAssignment_1_2; }
		
		//IdList
		public RuleCall getIdListIdListParserRuleCall_1_2_0() { return cIdListIdListParserRuleCall_1_2_0; }
		
		//type=TypeName
		public Assignment getTypeAssignment_1_3() { return cTypeAssignment_1_3; }
		
		//TypeName
		public RuleCall getTypeTypeNameParserRuleCall_1_3_0() { return cTypeTypeNameParserRuleCall_1_3_0; }
		
		//("=" exp=Exp explist=ExpList)?
		public Group getGroup_1_4() { return cGroup_1_4; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_4_0() { return cEqualsSignKeyword_1_4_0; }
		
		//exp=Exp
		public Assignment getExpAssignment_1_4_1() { return cExpAssignment_1_4_1; }
		
		//Exp
		public RuleCall getExpExpParserRuleCall_1_4_1_0() { return cExpExpParserRuleCall_1_4_1_0; }
		
		//explist=ExpList
		public Assignment getExplistAssignment_1_4_2() { return cExplistAssignment_1_4_2; }
		
		//ExpList
		public RuleCall getExplistExpListParserRuleCall_1_4_2_0() { return cExplistExpListParserRuleCall_1_4_2_0; }
	}
	public class AssigElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Assig");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Assignment cIdlAssignment_1_0_0 = (Assignment)cGroup_1_0.eContents().get(0);
		private final RuleCall cIdlIdListParserRuleCall_1_0_0_0 = (RuleCall)cIdlAssignment_1_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cExpressionAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cExpressionExpParserRuleCall_1_0_2_0 = (RuleCall)cExpressionAssignment_1_0_2.eContents().get(0);
		private final Assignment cExpressionlistAssignment_1_0_3 = (Assignment)cGroup_1_0.eContents().get(3);
		private final RuleCall cExpressionlistExpListParserRuleCall_1_0_3_0 = (RuleCall)cExpressionlistAssignment_1_0_3.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cAlternatives_1.eContents().get(1);
		private final Keyword cPlusSignPlusSignKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cHyphenMinusHyphenMinusKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Group cGroup_1_2 = (Group)cAlternatives_1.eContents().get(2);
		private final Alternatives cAlternatives_1_2_0 = (Alternatives)cGroup_1_2.eContents().get(0);
		private final Keyword cPlusSignEqualsSignKeyword_1_2_0_0 = (Keyword)cAlternatives_1_2_0.eContents().get(0);
		private final Keyword cHyphenMinusEqualsSignKeyword_1_2_0_1 = (Keyword)cAlternatives_1_2_0.eContents().get(1);
		private final Keyword cAsteriskEqualsSignKeyword_1_2_0_2 = (Keyword)cAlternatives_1_2_0.eContents().get(2);
		private final Keyword cSolidusEqualsSignKeyword_1_2_0_3 = (Keyword)cAlternatives_1_2_0.eContents().get(3);
		private final Assignment cExpressionAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cExpressionExpParserRuleCall_1_2_1_0 = (RuleCall)cExpressionAssignment_1_2_1.eContents().get(0);
		
		//Assig:
		//	id=ID (idl=IdList "=" expression=Exp expressionlist=ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=")
		//	expression=Exp);
		@Override public ParserRule getRule() { return rule; }
		
		//id=ID (idl=IdList "=" expression=Exp expressionlist=ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=")
		//expression=Exp)
		public Group getGroup() { return cGroup; }
		
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }
		
		//idl=IdList "=" expression=Exp expressionlist=ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=") expression=Exp
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//idl=IdList "=" expression=Exp expressionlist=ExpList
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//idl=IdList
		public Assignment getIdlAssignment_1_0_0() { return cIdlAssignment_1_0_0; }
		
		//IdList
		public RuleCall getIdlIdListParserRuleCall_1_0_0_0() { return cIdlIdListParserRuleCall_1_0_0_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_1_0_1() { return cEqualsSignKeyword_1_0_1; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_1_0_2() { return cExpressionAssignment_1_0_2; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_1_0_2_0() { return cExpressionExpParserRuleCall_1_0_2_0; }
		
		//expressionlist=ExpList
		public Assignment getExpressionlistAssignment_1_0_3() { return cExpressionlistAssignment_1_0_3; }
		
		//ExpList
		public RuleCall getExpressionlistExpListParserRuleCall_1_0_3_0() { return cExpressionlistExpListParserRuleCall_1_0_3_0; }
		
		//("++" | "--")
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }
		
		//"++"
		public Keyword getPlusSignPlusSignKeyword_1_1_0() { return cPlusSignPlusSignKeyword_1_1_0; }
		
		//"--"
		public Keyword getHyphenMinusHyphenMinusKeyword_1_1_1() { return cHyphenMinusHyphenMinusKeyword_1_1_1; }
		
		//("+=" | "-=" | "*=" | "/=") expression=Exp
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//"+=" | "-=" | "*=" | "/="
		public Alternatives getAlternatives_1_2_0() { return cAlternatives_1_2_0; }
		
		//"+="
		public Keyword getPlusSignEqualsSignKeyword_1_2_0_0() { return cPlusSignEqualsSignKeyword_1_2_0_0; }
		
		//"-="
		public Keyword getHyphenMinusEqualsSignKeyword_1_2_0_1() { return cHyphenMinusEqualsSignKeyword_1_2_0_1; }
		
		//"*="
		public Keyword getAsteriskEqualsSignKeyword_1_2_0_2() { return cAsteriskEqualsSignKeyword_1_2_0_2; }
		
		//"/="
		public Keyword getSolidusEqualsSignKeyword_1_2_0_3() { return cSolidusEqualsSignKeyword_1_2_0_3; }
		
		//expression=Exp
		public Assignment getExpressionAssignment_1_2_1() { return cExpressionAssignment_1_2_1; }
		
		//Exp
		public RuleCall getExpressionExpParserRuleCall_1_2_1_0() { return cExpressionExpParserRuleCall_1_2_1_0; }
	}
	public class IdListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.IdList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//IdList:
		//	("," ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//("," ID)*
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ExpListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ExpList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExpList:
		//	("," Exp)*;
		@Override public ParserRule getRule() { return rule; }
		
		//("," Exp)*
		public Group getGroup() { return cGroup; }
		
		//","
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class ExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Exp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCallParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpAuxParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanExpParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cExpJoinParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cAritExpParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cExpJoinParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRelExpParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final RuleCall cIDTerminalRuleCall_6_0 = (RuleCall)cGroup_6.eContents().get(0);
		private final RuleCall cExpJoinParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		
		//Exp:
		//	Call | ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?;
		@Override public ParserRule getRule() { return rule; }
		
		//Call | ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Call
		public RuleCall getCallParserRuleCall_0() { return cCallParserRuleCall_0; }
		
		//ExpAux
		public RuleCall getExpAuxParserRuleCall_1() { return cExpAuxParserRuleCall_1; }
		
		//BooleanExp ExpJoin?
		public Group getGroup_2() { return cGroup_2; }
		
		//BooleanExp
		public RuleCall getBooleanExpParserRuleCall_2_0() { return cBooleanExpParserRuleCall_2_0; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_2_1() { return cExpJoinParserRuleCall_2_1; }
		
		//AritExp ExpJoin?
		public Group getGroup_3() { return cGroup_3; }
		
		//AritExp
		public RuleCall getAritExpParserRuleCall_3_0() { return cAritExpParserRuleCall_3_0; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_3_1() { return cExpJoinParserRuleCall_3_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_4() { return cSTRINGTerminalRuleCall_4; }
		
		//RelExp
		public RuleCall getRelExpParserRuleCall_5() { return cRelExpParserRuleCall_5; }
		
		//ID ExpJoin?
		public Group getGroup_6() { return cGroup_6; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_6_0() { return cIDTerminalRuleCall_6_0; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_6_1() { return cExpJoinParserRuleCall_6_1; }
	}
	public class SimpleStmtElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.SimpleStmt");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSimpleStmtAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cDeclAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cDeclDeclParserRuleCall_0_1_0 = (RuleCall)cDeclAssignment_0_1.eContents().get(0);
		private final RuleCall cAssigParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cSimpleStmtAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final RuleCall cExpParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//SimpleStmt:
		//	{SimpleStmt} decl=Decl | Assig | {SimpleStmt} Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//{SimpleStmt} decl=Decl | Assig | {SimpleStmt} Exp
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{SimpleStmt} decl=Decl
		public Group getGroup_0() { return cGroup_0; }
		
		//{SimpleStmt}
		public Action getSimpleStmtAction_0_0() { return cSimpleStmtAction_0_0; }
		
		//decl=Decl
		public Assignment getDeclAssignment_0_1() { return cDeclAssignment_0_1; }
		
		//Decl
		public RuleCall getDeclDeclParserRuleCall_0_1_0() { return cDeclDeclParserRuleCall_0_1_0; }
		
		//Assig
		public RuleCall getAssigParserRuleCall_1() { return cAssigParserRuleCall_1; }
		
		//{SimpleStmt} Exp
		public Group getGroup_2() { return cGroup_2; }
		
		//{SimpleStmt}
		public Action getSimpleStmtAction_2_0() { return cSimpleStmtAction_2_0; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2_1() { return cExpParserRuleCall_2_1; }
	}
	public class ExpAuxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ExpAux");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cExpParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cExpJoinParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//ExpAux:
		//	"!"? "(" Exp ")" ExpJoin?;
		@Override public ParserRule getRule() { return rule; }
		
		//"!"? "(" Exp ")" ExpJoin?
		public Group getGroup() { return cGroup; }
		
		//"!"?
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//Exp
		public RuleCall getExpParserRuleCall_2() { return cExpParserRuleCall_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//ExpJoin?
		public RuleCall getExpJoinParserRuleCall_4() { return cExpJoinParserRuleCall_4; }
	}
	public class CallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final RuleCall cExpParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final RuleCall cExpListParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Call:
		//	ID ("." ID)* "(" (Exp ExpList)? ")";
		@Override public ParserRule getRule() { return rule; }
		
		//ID ("." ID)* "(" (Exp ExpList)? ")"
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(Exp ExpList)?
		public Group getGroup_3() { return cGroup_3; }
		
		//Exp
		public RuleCall getExpParserRuleCall_3_0() { return cExpParserRuleCall_3_0; }
		
		//ExpList
		public RuleCall getExpListParserRuleCall_3_1() { return cExpListParserRuleCall_3_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ExpJoinElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.ExpJoin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final RuleCall cOP_UNARYTerminalRuleCall_0_0 = (RuleCall)cAlternatives_0.eContents().get(0);
		private final RuleCall cOP_RELTerminalRuleCall_0_1 = (RuleCall)cAlternatives_0.eContents().get(1);
		private final RuleCall cOP_SUMTerminalRuleCall_0_2 = (RuleCall)cAlternatives_0.eContents().get(2);
		private final RuleCall cOP_MULTTerminalRuleCall_0_3 = (RuleCall)cAlternatives_0.eContents().get(3);
		private final Keyword cAmpersandAmpersandKeyword_0_4 = (Keyword)cAlternatives_0.eContents().get(4);
		private final Keyword cVerticalLineVerticalLineKeyword_0_5 = (Keyword)cAlternatives_0.eContents().get(5);
		private final RuleCall cExpParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//ExpJoin:
		//	(OP_UNARY | OP_REL | OP_SUM | OP_MULT | "&&" | "||") Exp;
		@Override public ParserRule getRule() { return rule; }
		
		//(OP_UNARY | OP_REL | OP_SUM | OP_MULT | "&&" | "||") Exp
		public Group getGroup() { return cGroup; }
		
		//OP_UNARY | OP_REL | OP_SUM | OP_MULT | "&&" | "||"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//OP_UNARY
		public RuleCall getOP_UNARYTerminalRuleCall_0_0() { return cOP_UNARYTerminalRuleCall_0_0; }
		
		//OP_REL
		public RuleCall getOP_RELTerminalRuleCall_0_1() { return cOP_RELTerminalRuleCall_0_1; }
		
		//OP_SUM
		public RuleCall getOP_SUMTerminalRuleCall_0_2() { return cOP_SUMTerminalRuleCall_0_2; }
		
		//OP_MULT
		public RuleCall getOP_MULTTerminalRuleCall_0_3() { return cOP_MULTTerminalRuleCall_0_3; }
		
		//"&&"
		public Keyword getAmpersandAmpersandKeyword_0_4() { return cAmpersandAmpersandKeyword_0_4; }
		
		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_0_5() { return cVerticalLineVerticalLineKeyword_0_5; }
		
		//Exp
		public RuleCall getExpParserRuleCall_1() { return cExpParserRuleCall_1; }
	}
	public class RelExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.RelExp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final RuleCall cOP_RELTerminalRuleCall_0_1_0 = (RuleCall)cAlternatives_0_1.eContents().get(0);
		private final RuleCall cOP_UNARYTerminalRuleCall_0_1_1 = (RuleCall)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cOP_UNARYTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//RelExp:
		//	NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//NumberLiteral (OP_REL | OP_UNARY) NumberLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0_0() { return cNumberLiteralParserRuleCall_0_0; }
		
		//OP_REL | OP_UNARY
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }
		
		//OP_REL
		public RuleCall getOP_RELTerminalRuleCall_0_1_0() { return cOP_RELTerminalRuleCall_0_1_0; }
		
		//OP_UNARY
		public RuleCall getOP_UNARYTerminalRuleCall_0_1_1() { return cOP_UNARYTerminalRuleCall_0_1_1; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0_2() { return cNumberLiteralParserRuleCall_0_2; }
		
		//BooleanLiteral OP_UNARY BooleanLiteral
		public Group getGroup_1() { return cGroup_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1_0() { return cBooleanLiteralParserRuleCall_1_0; }
		
		//OP_UNARY
		public RuleCall getOP_UNARYTerminalRuleCall_1_1() { return cOP_UNARYTerminalRuleCall_1_1; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1_2() { return cBooleanLiteralParserRuleCall_1_2; }
	}
	public class BooleanExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BooleanExp");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanExp:
		//	Or;
		@Override public ParserRule getRule() { return rule; }
		
		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}
	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cAndParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVerticalLineVerticalLineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAndParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Or:
		//	"!"? And ('||' And)*;
		@Override public ParserRule getRule() { return rule; }
		
		//"!"? And ('||' And)*
		public Group getGroup() { return cGroup; }
		
		//"!"?
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//And
		public RuleCall getAndParserRuleCall_1() { return cAndParserRuleCall_1; }
		
		//('||' And)*
		public Group getGroup_2() { return cGroup_2; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_2_0() { return cVerticalLineVerticalLineKeyword_2_0; }
		
		//And
		public RuleCall getAndParserRuleCall_2_1() { return cAndParserRuleCall_2_1; }
	}
	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBooleanLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cBooleanLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//And:
		//	BooleanLiteral ('&&' BooleanLiteral)*;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanLiteral ('&&' BooleanLiteral)*
		public Group getGroup() { return cGroup; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_0() { return cBooleanLiteralParserRuleCall_0; }
		
		//('&&' BooleanLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }
		
		//BooleanLiteral
		public RuleCall getBooleanLiteralParserRuleCall_1_1() { return cBooleanLiteralParserRuleCall_1_1; }
	}
	public class BooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BooleanLiteral");
		private final RuleCall cBoolParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BooleanLiteral:
		//	Bool;
		@Override public ParserRule getRule() { return rule; }
		
		//Bool
		public RuleCall getBoolParserRuleCall() { return cBoolParserRuleCall; }
	}
	public class AritExpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.AritExp");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//AritExp:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cOP_SUMTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cMultiplicationParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Addition:
		//	(OP_SUM? Multiplication)+;
		@Override public ParserRule getRule() { return rule; }
		
		//(OP_SUM? Multiplication)+
		public Group getGroup() { return cGroup; }
		
		//OP_SUM?
		public RuleCall getOP_SUMTerminalRuleCall_0() { return cOP_SUMTerminalRuleCall_0; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_1() { return cMultiplicationParserRuleCall_1; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cNumberLiteralParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cOP_MULTTerminalRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cNumberLiteralParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Multiplication:
		//	NumberLiteral (OP_MULT? NumberLiteral)*;
		@Override public ParserRule getRule() { return rule; }
		
		//NumberLiteral (OP_MULT? NumberLiteral)*
		public Group getGroup() { return cGroup; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_0() { return cNumberLiteralParserRuleCall_0; }
		
		//(OP_MULT? NumberLiteral)*
		public Group getGroup_1() { return cGroup_1; }
		
		//OP_MULT?
		public RuleCall getOP_MULTTerminalRuleCall_1_0() { return cOP_MULTTerminalRuleCall_1_0; }
		
		//NumberLiteral
		public RuleCall getNumberLiteralParserRuleCall_1_1() { return cNumberLiteralParserRuleCall_1_1; }
	}
	public class NumberLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.NumberLiteral");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//NumberLiteral:
		//	INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class TypeNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.TypeName");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicTypesParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cQualifiedIdentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStructParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TypeName:
		//	BasicTypes | QualifiedIdent | ID | Struct;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicTypes | QualifiedIdent | ID | Struct
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicTypes
		public RuleCall getBasicTypesParserRuleCall_0() { return cBasicTypesParserRuleCall_0; }
		
		//QualifiedIdent
		public RuleCall getQualifiedIdentParserRuleCall_1() { return cQualifiedIdentParserRuleCall_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
		
		//Struct
		public RuleCall getStructParserRuleCall_3() { return cStructParserRuleCall_3; }
	}
	public class QualifiedIdentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.QualifiedIdent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//QualifiedIdent:
		//	ID "." ID;
		@Override public ParserRule getRule() { return rule; }
		
		//ID "." ID
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.Bool");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Bool:
		//	"true" | "false";
		@Override public ParserRule getRule() { return rule; }
		
		//"true" | "false"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"true"
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//"false"
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class BasicTypesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.BasicTypes");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cStringKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cBoolKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//BasicTypes:
		//	"string" | "int" | "bool";
		@Override public ParserRule getRule() { return rule; }
		
		//"string" | "int" | "bool"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"string"
		public Keyword getStringKeyword_0() { return cStringKeyword_0; }
		
		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//"bool"
		public Keyword getBoolKeyword_2() { return cBoolKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final SourceFileElements pSourceFile;
	private final TopLevelDeclElements pTopLevelDecl;
	private final ImportDeclElements pImportDecl;
	private final ImportSpecElements pImportSpec;
	private final PackageElements pPackage;
	private final ForStmtElements pForStmt;
	private final ForClauseElements pForClause;
	private final RangeClauseElements pRangeClause;
	private final FunctionTypeElements pFunctionType;
	private final FuncDeclElements pFuncDecl;
	private final ReceiverElements pReceiver;
	private final SignatureElements pSignature;
	private final ResultElements pResult;
	private final ParametersElements pParameters;
	private final ParameterListElements pParameterList;
	private final ParameterDeclElements pParameterDecl;
	private final SwitchStmtElements pSwitchStmt;
	private final SwitchCaseElements pSwitchCase;
	private final IfStmtElements pIfStmt;
	private final AndersonElements pAnderson;
	private final BlockElements pBlock;
	private final StatementElements pStatement;
	private final SelectStmtElements pSelectStmt;
	private final CommClauseElements pCommClause;
	private final StatementListElements pStatementList;
	private final CommCaseElements pCommCase;
	private final RecvStmtElements pRecvStmt;
	private final LabeledStmtElements pLabeledStmt;
	private final SendStmtElements pSendStmt;
	private final BreakStmtElements pBreakStmt;
	private final ContinueStmtElements pContinueStmt;
	private final GotoStmtElements pGotoStmt;
	private final FalltrhoughStmtElements pFalltrhoughStmt;
	private final DeferStmtElements pDeferStmt;
	private final ReturnStmtElements pReturnStmt;
	private final TypeDefElements pTypeDef;
	private final StructElements pStruct;
	private final FieldDeclElements pFieldDecl;
	private final DeclElements pDecl;
	private final AssigElements pAssig;
	private final IdListElements pIdList;
	private final ExpListElements pExpList;
	private final ExpElements pExp;
	private final SimpleStmtElements pSimpleStmt;
	private final ExpAuxElements pExpAux;
	private final CallElements pCall;
	private final ExpJoinElements pExpJoin;
	private final RelExpElements pRelExp;
	private final BooleanExpElements pBooleanExp;
	private final OrElements pOr;
	private final AndElements pAnd;
	private final BooleanLiteralElements pBooleanLiteral;
	private final AritExpElements pAritExp;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final NumberLiteralElements pNumberLiteral;
	private final TypeNameElements pTypeName;
	private final QualifiedIdentElements pQualifiedIdent;
	private final BoolElements pBool;
	private final BasicTypesElements pBasicTypes;
	private final TerminalRule tOP_SUM;
	private final TerminalRule tOP_MULT;
	private final TerminalRule tOP_REL;
	private final TerminalRule tOP_UNARY;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GoGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pSourceFile = new SourceFileElements();
		this.pTopLevelDecl = new TopLevelDeclElements();
		this.pImportDecl = new ImportDeclElements();
		this.pImportSpec = new ImportSpecElements();
		this.pPackage = new PackageElements();
		this.pForStmt = new ForStmtElements();
		this.pForClause = new ForClauseElements();
		this.pRangeClause = new RangeClauseElements();
		this.pFunctionType = new FunctionTypeElements();
		this.pFuncDecl = new FuncDeclElements();
		this.pReceiver = new ReceiverElements();
		this.pSignature = new SignatureElements();
		this.pResult = new ResultElements();
		this.pParameters = new ParametersElements();
		this.pParameterList = new ParameterListElements();
		this.pParameterDecl = new ParameterDeclElements();
		this.pSwitchStmt = new SwitchStmtElements();
		this.pSwitchCase = new SwitchCaseElements();
		this.pIfStmt = new IfStmtElements();
		this.pAnderson = new AndersonElements();
		this.pBlock = new BlockElements();
		this.pStatement = new StatementElements();
		this.pSelectStmt = new SelectStmtElements();
		this.pCommClause = new CommClauseElements();
		this.pStatementList = new StatementListElements();
		this.pCommCase = new CommCaseElements();
		this.pRecvStmt = new RecvStmtElements();
		this.pLabeledStmt = new LabeledStmtElements();
		this.pSendStmt = new SendStmtElements();
		this.pBreakStmt = new BreakStmtElements();
		this.pContinueStmt = new ContinueStmtElements();
		this.pGotoStmt = new GotoStmtElements();
		this.pFalltrhoughStmt = new FalltrhoughStmtElements();
		this.pDeferStmt = new DeferStmtElements();
		this.pReturnStmt = new ReturnStmtElements();
		this.pTypeDef = new TypeDefElements();
		this.pStruct = new StructElements();
		this.pFieldDecl = new FieldDeclElements();
		this.pDecl = new DeclElements();
		this.pAssig = new AssigElements();
		this.pIdList = new IdListElements();
		this.pExpList = new ExpListElements();
		this.pExp = new ExpElements();
		this.pSimpleStmt = new SimpleStmtElements();
		this.pExpAux = new ExpAuxElements();
		this.pCall = new CallElements();
		this.pExpJoin = new ExpJoinElements();
		this.pRelExp = new RelExpElements();
		this.pBooleanExp = new BooleanExpElements();
		this.pOr = new OrElements();
		this.pAnd = new AndElements();
		this.pBooleanLiteral = new BooleanLiteralElements();
		this.pAritExp = new AritExpElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pNumberLiteral = new NumberLiteralElements();
		this.pTypeName = new TypeNameElements();
		this.pQualifiedIdent = new QualifiedIdentElements();
		this.pBool = new BoolElements();
		this.pBasicTypes = new BasicTypesElements();
		this.tOP_SUM = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_SUM");
		this.tOP_MULT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_MULT");
		this.tOP_REL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_REL");
		this.tOP_UNARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.go.Go.OP_UNARY");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.go.Go".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	elements+=SourceFile*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//SourceFile:
	//	{SourceFile} Package ";"? (ImportDecl ";"?)* (TopLevelDecl+=TopLevelDecl ";"?)*;
	public SourceFileElements getSourceFileAccess() {
		return pSourceFile;
	}
	
	public ParserRule getSourceFileRule() {
		return getSourceFileAccess().getRule();
	}
	
	//TopLevelDecl:
	//	{TopLevelDecl} decl=Decl | func=FuncDecl | {TopLevelDecl} TypeDef;
	public TopLevelDeclElements getTopLevelDeclAccess() {
		return pTopLevelDecl;
	}
	
	public ParserRule getTopLevelDeclRule() {
		return getTopLevelDeclAccess().getRule();
	}
	
	//ImportDecl:
	//	"import" (ImportSpec | "(" (ImportSpec ";"?)* ")");
	public ImportDeclElements getImportDeclAccess() {
		return pImportDecl;
	}
	
	public ParserRule getImportDeclRule() {
		return getImportDeclAccess().getRule();
	}
	
	//ImportSpec:
	//	("." | ID)? STRING;
	public ImportSpecElements getImportSpecAccess() {
		return pImportSpec;
	}
	
	public ParserRule getImportSpecRule() {
		return getImportSpecAccess().getRule();
	}
	
	//Package:
	//	"package" ID;
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//ForStmt:
	//	"for" (Exp RangeClause? | ForClause?) Block=Block;
	public ForStmtElements getForStmtAccess() {
		return pForStmt;
	}
	
	public ParserRule getForStmtRule() {
		return getForStmtAccess().getRule();
	}
	
	//ForClause:
	//	{ForClause} decl=Decl? ";" Exp? ";" SimpleStmt?;
	public ForClauseElements getForClauseAccess() {
		return pForClause;
	}
	
	public ParserRule getForClauseRule() {
		return getForClauseAccess().getRule();
	}
	
	//RangeClause:
	//	(ExpList (":=" | "="))? "range" Exp;
	public RangeClauseElements getRangeClauseAccess() {
		return pRangeClause;
	}
	
	public ParserRule getRangeClauseRule() {
		return getRangeClauseAccess().getRule();
	}
	
	//FunctionType:
	//	"func" Signature;
	public FunctionTypeElements getFunctionTypeAccess() {
		return pFunctionType;
	}
	
	public ParserRule getFunctionTypeRule() {
		return getFunctionTypeAccess().getRule();
	}
	
	//FuncDecl:
	//	"func" receiver=Receiver? name=ID signature=Signature block=Block?;
	public FuncDeclElements getFuncDeclAccess() {
		return pFuncDecl;
	}
	
	public ParserRule getFuncDeclRule() {
		return getFuncDeclAccess().getRule();
	}
	
	//Receiver:
	//	Parameters;
	public ReceiverElements getReceiverAccess() {
		return pReceiver;
	}
	
	public ParserRule getReceiverRule() {
		return getReceiverAccess().getRule();
	}
	
	//Signature:
	//	Parameters Result?;
	public SignatureElements getSignatureAccess() {
		return pSignature;
	}
	
	public ParserRule getSignatureRule() {
		return getSignatureAccess().getRule();
	}
	
	//Result:
	//	Parameters | TypeName;
	public ResultElements getResultAccess() {
		return pResult;
	}
	
	public ParserRule getResultRule() {
		return getResultAccess().getRule();
	}
	
	//Parameters:
	//	"(" (ParameterList ","?)? ")";
	public ParametersElements getParametersAccess() {
		return pParameters;
	}
	
	public ParserRule getParametersRule() {
		return getParametersAccess().getRule();
	}
	
	//ParameterList:
	//	ParameterDecl ("," ParameterDecl)*;
	public ParameterListElements getParameterListAccess() {
		return pParameterList;
	}
	
	public ParserRule getParameterListRule() {
		return getParameterListAccess().getRule();
	}
	
	//ParameterDecl:
	//	(ID IdList)? "..."? TypeName;
	public ParameterDeclElements getParameterDeclAccess() {
		return pParameterDecl;
	}
	
	public ParserRule getParameterDeclRule() {
		return getParameterDeclAccess().getRule();
	}
	
	//SwitchStmt:
	//	"switch" Anderson ID? "{" (("case" Exp SwitchCase+=SwitchCase)* ("default" SwitchCase+=SwitchCase*)?) "}";
	public SwitchStmtElements getSwitchStmtAccess() {
		return pSwitchStmt;
	}
	
	public ParserRule getSwitchStmtRule() {
		return getSwitchStmtAccess().getRule();
	}
	
	//SwitchCase:
	//	{SwitchCase} ":" (Statement+=Statement ";"?)*;
	public SwitchCaseElements getSwitchCaseAccess() {
		return pSwitchCase;
	}
	
	public ParserRule getSwitchCaseRule() {
		return getSwitchCaseAccess().getRule();
	}
	
	//IfStmt:
	//	"if" Anderson Exp Block+=Block ("else" (IfStmt=IfStmt | Block+=Block))?;
	public IfStmtElements getIfStmtAccess() {
		return pIfStmt;
	}
	
	public ParserRule getIfStmtRule() {
		return getIfStmtAccess().getRule();
	}
	
	//Anderson:
	//	{Anderson} ((decl=Decl | Assig=Assig | Exp) ";")?;
	public AndersonElements getAndersonAccess() {
		return pAnderson;
	}
	
	public ParserRule getAndersonRule() {
		return getAndersonAccess().getRule();
	}
	
	//Block:
	//	{Block} "{" (Statement+=Statement ";"?)* "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}
	
	//Statement:
	//	LabeledStmt=LabeledStmt | SendStmt=SendStmt | SimpleStmt | IfStmt | SwitchStmt=SwitchStmt | ReturnStmt=ReturnStmt |
	//	ForStmt | BreakStmt=BreakStmt | ContinueStmt=ContinueStmt | GotoStmt=GotoStmt | FalltrhoughStmt=FalltrhoughStmt |
	//	DeferStmt=DeferStmt | SelectStmt;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//SelectStmt:
	//	{SelectStmt} "select" "{" CommClause+=CommClause* "}";
	public SelectStmtElements getSelectStmtAccess() {
		return pSelectStmt;
	}
	
	public ParserRule getSelectStmtRule() {
		return getSelectStmtAccess().getRule();
	}
	
	//CommClause:
	//	CommCase ":" StatementList;
	public CommClauseElements getCommClauseAccess() {
		return pCommClause;
	}
	
	public ParserRule getCommClauseRule() {
		return getCommClauseAccess().getRule();
	}
	
	//StatementList:
	//	{StatementList} (Statement+=Statement ";"?)*;
	public StatementListElements getStatementListAccess() {
		return pStatementList;
	}
	
	public ParserRule getStatementListRule() {
		return getStatementListAccess().getRule();
	}
	
	//CommCase:
	//	"case" (SendStmt | RecvStmt) | "default";
	public CommCaseElements getCommCaseAccess() {
		return pCommCase;
	}
	
	public ParserRule getCommCaseRule() {
		return getCommCaseAccess().getRule();
	}
	
	//RecvStmt:
	//	(Exp ExpList "=" | ID IdList ":=")? Exp;
	public RecvStmtElements getRecvStmtAccess() {
		return pRecvStmt;
	}
	
	public ParserRule getRecvStmtRule() {
		return getRecvStmtAccess().getRule();
	}
	
	//LabeledStmt:
	//	ID ":" Statement;
	public LabeledStmtElements getLabeledStmtAccess() {
		return pLabeledStmt;
	}
	
	public ParserRule getLabeledStmtRule() {
		return getLabeledStmtAccess().getRule();
	}
	
	//SendStmt:
	//	Exp "<-" Exp;
	public SendStmtElements getSendStmtAccess() {
		return pSendStmt;
	}
	
	public ParserRule getSendStmtRule() {
		return getSendStmtAccess().getRule();
	}
	
	//BreakStmt:
	//	"break" ID? ";"?;
	public BreakStmtElements getBreakStmtAccess() {
		return pBreakStmt;
	}
	
	public ParserRule getBreakStmtRule() {
		return getBreakStmtAccess().getRule();
	}
	
	//ContinueStmt:
	//	"continue" ID? ";"?;
	public ContinueStmtElements getContinueStmtAccess() {
		return pContinueStmt;
	}
	
	public ParserRule getContinueStmtRule() {
		return getContinueStmtAccess().getRule();
	}
	
	//GotoStmt:
	//	"goto" ID? ";"?;
	public GotoStmtElements getGotoStmtAccess() {
		return pGotoStmt;
	}
	
	public ParserRule getGotoStmtRule() {
		return getGotoStmtAccess().getRule();
	}
	
	//FalltrhoughStmt:
	//	"fallthrough" ";"?;
	public FalltrhoughStmtElements getFalltrhoughStmtAccess() {
		return pFalltrhoughStmt;
	}
	
	public ParserRule getFalltrhoughStmtRule() {
		return getFalltrhoughStmtAccess().getRule();
	}
	
	//DeferStmt:
	//	"defer" Exp ";"?;
	public DeferStmtElements getDeferStmtAccess() {
		return pDeferStmt;
	}
	
	public ParserRule getDeferStmtRule() {
		return getDeferStmtAccess().getRule();
	}
	
	//ReturnStmt:
	//	"return" Exp?;
	public ReturnStmtElements getReturnStmtAccess() {
		return pReturnStmt;
	}
	
	public ParserRule getReturnStmtRule() {
		return getReturnStmtAccess().getRule();
	}
	
	//TypeDef:
	//	"type" ID TypeName;
	public TypeDefElements getTypeDefAccess() {
		return pTypeDef;
	}
	
	public ParserRule getTypeDefRule() {
		return getTypeDefAccess().getRule();
	}
	
	//Struct:
	//	"struct" "{" (FieldDecl ";"?)* "}";
	public StructElements getStructAccess() {
		return pStruct;
	}
	
	public ParserRule getStructRule() {
		return getStructAccess().getRule();
	}
	
	//FieldDecl:
	//	IdList TypeName;
	public FieldDeclElements getFieldDeclAccess() {
		return pFieldDecl;
	}
	
	public ParserRule getFieldDeclRule() {
		return getFieldDeclAccess().getRule();
	}
	
	//Decl:
	//	name=ID IdList ":=" Exp ExpList | ("var" | "const") name=ID idList=IdList type=TypeName ("=" exp=Exp
	//	explist=ExpList)?;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}
	
	//Assig:
	//	id=ID (idl=IdList "=" expression=Exp expressionlist=ExpList | ("++" | "--") | ("+=" | "-=" | "*=" | "/=")
	//	expression=Exp);
	public AssigElements getAssigAccess() {
		return pAssig;
	}
	
	public ParserRule getAssigRule() {
		return getAssigAccess().getRule();
	}
	
	//IdList:
	//	("," ID)*;
	public IdListElements getIdListAccess() {
		return pIdList;
	}
	
	public ParserRule getIdListRule() {
		return getIdListAccess().getRule();
	}
	
	//ExpList:
	//	("," Exp)*;
	public ExpListElements getExpListAccess() {
		return pExpList;
	}
	
	public ParserRule getExpListRule() {
		return getExpListAccess().getRule();
	}
	
	//Exp:
	//	Call | ExpAux | BooleanExp ExpJoin? | AritExp ExpJoin? | STRING | RelExp | ID ExpJoin?;
	public ExpElements getExpAccess() {
		return pExp;
	}
	
	public ParserRule getExpRule() {
		return getExpAccess().getRule();
	}
	
	//SimpleStmt:
	//	{SimpleStmt} decl=Decl | Assig | {SimpleStmt} Exp;
	public SimpleStmtElements getSimpleStmtAccess() {
		return pSimpleStmt;
	}
	
	public ParserRule getSimpleStmtRule() {
		return getSimpleStmtAccess().getRule();
	}
	
	//ExpAux:
	//	"!"? "(" Exp ")" ExpJoin?;
	public ExpAuxElements getExpAuxAccess() {
		return pExpAux;
	}
	
	public ParserRule getExpAuxRule() {
		return getExpAuxAccess().getRule();
	}
	
	//Call:
	//	ID ("." ID)* "(" (Exp ExpList)? ")";
	public CallElements getCallAccess() {
		return pCall;
	}
	
	public ParserRule getCallRule() {
		return getCallAccess().getRule();
	}
	
	//ExpJoin:
	//	(OP_UNARY | OP_REL | OP_SUM | OP_MULT | "&&" | "||") Exp;
	public ExpJoinElements getExpJoinAccess() {
		return pExpJoin;
	}
	
	public ParserRule getExpJoinRule() {
		return getExpJoinAccess().getRule();
	}
	
	//RelExp:
	//	NumberLiteral (OP_REL | OP_UNARY) NumberLiteral | BooleanLiteral OP_UNARY BooleanLiteral;
	public RelExpElements getRelExpAccess() {
		return pRelExp;
	}
	
	public ParserRule getRelExpRule() {
		return getRelExpAccess().getRule();
	}
	
	//BooleanExp:
	//	Or;
	public BooleanExpElements getBooleanExpAccess() {
		return pBooleanExp;
	}
	
	public ParserRule getBooleanExpRule() {
		return getBooleanExpAccess().getRule();
	}
	
	//Or:
	//	"!"? And ('||' And)*;
	public OrElements getOrAccess() {
		return pOr;
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}
	
	//And:
	//	BooleanLiteral ('&&' BooleanLiteral)*;
	public AndElements getAndAccess() {
		return pAnd;
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}
	
	//BooleanLiteral:
	//	Bool;
	public BooleanLiteralElements getBooleanLiteralAccess() {
		return pBooleanLiteral;
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}
	
	//AritExp:
	//	Addition;
	public AritExpElements getAritExpAccess() {
		return pAritExp;
	}
	
	public ParserRule getAritExpRule() {
		return getAritExpAccess().getRule();
	}
	
	//Addition:
	//	(OP_SUM? Multiplication)+;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication:
	//	NumberLiteral (OP_MULT? NumberLiteral)*;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//NumberLiteral:
	//	INT;
	public NumberLiteralElements getNumberLiteralAccess() {
		return pNumberLiteral;
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}
	
	//TypeName:
	//	BasicTypes | QualifiedIdent | ID | Struct;
	public TypeNameElements getTypeNameAccess() {
		return pTypeName;
	}
	
	public ParserRule getTypeNameRule() {
		return getTypeNameAccess().getRule();
	}
	
	//QualifiedIdent:
	//	ID "." ID;
	public QualifiedIdentElements getQualifiedIdentAccess() {
		return pQualifiedIdent;
	}
	
	public ParserRule getQualifiedIdentRule() {
		return getQualifiedIdentAccess().getRule();
	}
	
	//Bool:
	//	"true" | "false";
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//BasicTypes:
	//	"string" | "int" | "bool";
	public BasicTypesElements getBasicTypesAccess() {
		return pBasicTypes;
	}
	
	public ParserRule getBasicTypesRule() {
		return getBasicTypesAccess().getRule();
	}
	
	//terminal OP_SUM:
	//	"+" | "-" | "|" | "^";
	public TerminalRule getOP_SUMRule() {
		return tOP_SUM;
	}
	
	//terminal OP_MULT:
	//	"*" | "/" | "%" | "<<" | ">>" | "&" | "&^";
	public TerminalRule getOP_MULTRule() {
		return tOP_MULT;
	}
	
	//terminal OP_REL:
	//	"<=" | ">=" | "<" | ">";
	public TerminalRule getOP_RELRule() {
		return tOP_REL;
	}
	
	//terminal OP_UNARY:
	//	"==" | "!=" | "<-" | "&";
	public TerminalRule getOP_UNARYRule() {
		return tOP_UNARY;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
