/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.go.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.go.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.go.services.GoGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getGreetingsGreetingParserRuleCall_0());
			}
			lv_greetings_0_0=ruleGreeting
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"greetings",
					lv_greetings_0_0,
					"org.xtext.example.go.Go.Greeting");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleGreeting
entryRuleGreeting returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGreetingRule()); }
	iv_ruleGreeting=ruleGreeting
	{ $current=$iv_ruleGreeting.current.getText(); }
	EOF;

// Rule Greeting
ruleGreeting returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getGreetingAccess().getSourceFileParserRuleCall());
	}
	this_SourceFile_0=ruleSourceFile
	{
		$current.merge(this_SourceFile_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSourceFile
entryRuleSourceFile returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSourceFileRule()); }
	iv_ruleSourceFile=ruleSourceFile
	{ $current=$iv_ruleSourceFile.current.getText(); }
	EOF;

// Rule SourceFile
ruleSourceFile returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSourceFileAccess().getPackageParserRuleCall_0());
		}
		this_Package_0=rulePackage
		{
			$current.merge(this_Package_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getSourceFileAccess().getSemicolonKeyword_1());
			}
		)?
		(
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_2_0());
			}
			this_ImportDecl_2=ruleImportDecl
			{
				$current.merge(this_ImportDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSourceFileAccess().getSemicolonKeyword_2_1());
				}
			)?
		)*
		(
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getTopLevelDeclParserRuleCall_3_0());
			}
			this_TopLevelDecl_4=ruleTopLevelDecl
			{
				$current.merge(this_TopLevelDecl_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1());
				}
			)?
		)*
	)
;

// Entry rule entryRuleTopLevelDecl
entryRuleTopLevelDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelDeclRule()); }
	iv_ruleTopLevelDecl=ruleTopLevelDecl
	{ $current=$iv_ruleTopLevelDecl.current.getText(); }
	EOF;

// Rule TopLevelDecl
ruleTopLevelDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclParserRuleCall_0());
		}
		this_Decl_0=ruleDecl
		{
			$current.merge(this_Decl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getFuncDeclParserRuleCall_1());
		}
		this_FuncDecl_1=ruleFuncDecl
		{
			$current.merge(this_FuncDecl_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTopLevelDeclAccess().getTypeDefParserRuleCall_2());
		}
		this_TypeDef_2=ruleTypeDef
		{
			$current.merge(this_TypeDef_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImportDecl
entryRuleImportDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleImportDecl=ruleImportDecl
	{ $current=$iv_ruleImportDecl.current.getText(); }
	EOF;

// Rule ImportDecl
ruleImportDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0());
			}
			this_ImportSpec_1=ruleImportSpec
			{
				$current.merge(this_ImportSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0());
					}
					this_ImportSpec_3=ruleImportSpec
					{
						$current.merge(this_ImportSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					(
						kw=';'
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getImportDeclAccess().getSemicolonKeyword_1_1_1_1());
						}
					)?
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleImportSpec
entryRuleImportSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportSpecRule()); }
	iv_ruleImportSpec=ruleImportSpec
	{ $current=$iv_ruleImportSpec.current.getText(); }
	EOF;

// Rule ImportSpec
ruleImportSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0());
			}
			    |
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getImportSpecAccess().getIDTerminalRuleCall_0_1());
			}
		)?
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getImportSpecAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePackage
entryRulePackage returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current.getText(); }
	EOF;

// Rule Package
rulePackage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getPackageAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleForStmt
entryRuleForStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleForStmt=ruleForStmt
	{ $current=$iv_ruleForStmt.current.getText(); }
	EOF;

// Rule ForStmt
ruleForStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='for'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getExpParserRuleCall_1_0_0());
				}
				this_Exp_1=ruleExp
				{
					$current.merge(this_Exp_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				(
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_0_1());
					}
					this_RangeClause_2=ruleRangeClause
					{
						$current.merge(this_RangeClause_2);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			{
				newCompositeNode(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1());
			}
			this_ForClause_3=ruleForClause
			{
				$current.merge(this_ForClause_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		{
			newCompositeNode(grammarAccess.getForStmtAccess().getBlockParserRuleCall_2());
		}
		this_Block_4=ruleBlock
		{
			$current.merge(this_Block_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleForClause
entryRuleForClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getForClauseRule()); }
	iv_ruleForClause=ruleForClause
	{ $current=$iv_ruleForClause.current.getText(); }
	EOF;

// Rule ForClause
ruleForClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getDeclParserRuleCall_0());
			}
			this_Decl_0=ruleDecl
			{
				$current.merge(this_Decl_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForClauseAccess().getSemicolonKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getExpParserRuleCall_2());
			}
			this_Exp_2=ruleExp
			{
				$current.merge(this_Exp_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getForClauseAccess().getSemicolonKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_4());
			}
			this_SimpleStmt_4=ruleSimpleStmt
			{
				$current.merge(this_SimpleStmt_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleRangeClause
entryRuleRangeClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRangeClauseRule()); }
	iv_ruleRangeClause=ruleRangeClause
	{ $current=$iv_ruleRangeClause.current.getText(); }
	EOF;

// Rule RangeClause
ruleRangeClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRangeClauseAccess().getExpListParserRuleCall_0_0());
			}
			this_ExpList_0=ruleExpList
			{
				$current.merge(this_ExpList_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=':='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_0());
				}
				    |
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_1_1());
				}
			)
		)?
		kw='range'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRangeClauseAccess().getRangeKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRangeClauseAccess().getExpParserRuleCall_2());
		}
		this_Exp_4=ruleExp
		{
			$current.merge(this_Exp_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFuncDecl
entryRuleFuncDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFuncDeclRule()); }
	iv_ruleFuncDecl=ruleFuncDecl
	{ $current=$iv_ruleFuncDecl.current.getText(); }
	EOF;

// Rule FuncDecl
ruleFuncDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='func'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFuncDeclAccess().getFuncKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getFuncDeclAccess().getReceiverParserRuleCall_1());
			}
			this_Receiver_1=ruleReceiver
			{
				$current.merge(this_Receiver_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getFuncDeclAccess().getIDTerminalRuleCall_2());
		}
		{
			newCompositeNode(grammarAccess.getFuncDeclAccess().getSignatureParserRuleCall_3());
		}
		this_Signature_3=ruleSignature
		{
			$current.merge(this_Signature_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getFuncDeclAccess().getBlockParserRuleCall_4());
			}
			this_Block_4=ruleBlock
			{
				$current.merge(this_Block_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleReceiver
entryRuleReceiver returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_ruleReceiver=ruleReceiver
	{ $current=$iv_ruleReceiver.current.getText(); }
	EOF;

// Rule Receiver
ruleReceiver returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverAccess().getParametersParserRuleCall());
	}
	this_Parameters_0=ruleParameters
	{
		$current.merge(this_Parameters_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSignature
entryRuleSignature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current.getText(); }
	EOF;

// Rule Signature
ruleSignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getSignatureAccess().getResultParserRuleCall_1());
			}
			this_Result_1=ruleResult
			{
				$current.merge(this_Result_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current.getText(); }
	EOF;

// Rule Result
ruleResult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_BASIC_TYPES_1=RULE_BASIC_TYPES
		{
			$current.merge(this_BASIC_TYPES_1);
		}
		{
			newLeafNode(this_BASIC_TYPES_1, grammarAccess.getResultAccess().getBASIC_TYPESTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current.getText(); }
	EOF;

// Rule Parameters
ruleParameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0());
			}
			this_ParameterList_1=ruleParameterList
			{
				$current.merge(this_ParameterList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current.getText(); }
	EOF;

// Rule ParameterList
ruleParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0());
		}
		this_ParameterDecl_0=ruleParameterDecl
		{
			$current.merge(this_ParameterDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1());
			}
			this_ParameterDecl_2=ruleParameterDecl
			{
				$current.merge(this_ParameterDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleParameterDecl
entryRuleParameterDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleParameterDecl=ruleParameterDecl
	{ $current=$iv_ruleParameterDecl.current.getText(); }
	EOF;

// Rule ParameterDecl
ruleParameterDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getParameterDeclAccess().getIDTerminalRuleCall_0_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterDeclAccess().getIdListParserRuleCall_0_1());
			}
			this_IdList_1=ruleIdList
			{
				$current.merge(this_IdList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeNameParserRuleCall_2());
		}
		this_TypeName_3=ruleTypeName
		{
			$current.merge(this_TypeName_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSwitchStmt
entryRuleSwitchStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtRule()); }
	iv_ruleSwitchStmt=ruleSwitchStmt
	{ $current=$iv_ruleSwitchStmt.current.getText(); }
	EOF;

// Rule SwitchStmt
ruleSwitchStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='switch'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getSwitchKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getSwitchStmtAccess().getAndersonParserRuleCall_1());
		}
		this_Anderson_1=ruleAnderson
		{
			$current.merge(this_Anderson_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getSwitchStmtAccess().getIDTerminalRuleCall_2());
			}
		)?
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				kw='case'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getCaseKeyword_4_0_0());
				}
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getExpParserRuleCall_4_0_1());
				}
				this_Exp_5=ruleExp
				{
					$current.merge(this_Exp_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getSwitchCaseParserRuleCall_4_0_2());
				}
				this_SwitchCase_6=ruleSwitchCase
				{
					$current.merge(this_SwitchCase_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)*
			(
				kw='default'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getDefaultKeyword_4_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getSwitchStmtAccess().getSwitchCaseParserRuleCall_4_1_1());
					}
					this_SwitchCase_8=ruleSwitchCase
					{
						$current.merge(this_SwitchCase_8);
					}
					{
						afterParserOrEnumRuleCall();
					}
				)*
			)?
		)
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	iv_ruleSwitchCase=ruleSwitchCase
	{ $current=$iv_ruleSwitchCase.current.getText(); }
	EOF;

// Rule SwitchCase
ruleSwitchCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=':'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSwitchCaseAccess().getColonKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getSwitchCaseAccess().getStatementParserRuleCall_1_0());
			}
			this_Statement_1=ruleStatement
			{
				$current.merge(this_Statement_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getSwitchCaseAccess().getSemicolonKeyword_1_1());
				}
			)?
		)*
	)
;

// Entry rule entryRuleIfStmt
entryRuleIfStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleIfStmt=ruleIfStmt
	{ $current=$iv_ruleIfStmt.current.getText(); }
	EOF;

// Rule IfStmt
ruleIfStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='if'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getAndersonParserRuleCall_1());
		}
		this_Anderson_1=ruleAnderson
		{
			$current.merge(this_Anderson_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getExpParserRuleCall_2());
		}
		this_Exp_2=ruleExp
		{
			$current.merge(this_Exp_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_3());
		}
		this_Block_3=ruleBlock
		{
			$current.merge(this_Block_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='else'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getIfStmtAccess().getElseKeyword_4_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getIfStmtParserRuleCall_4_1_0());
				}
				this_IfStmt_5=ruleIfStmt
				{
					$current.merge(this_IfStmt_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getBlockParserRuleCall_4_1_1());
				}
				this_Block_6=ruleBlock
				{
					$current.merge(this_Block_6);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAnderson
entryRuleAnderson returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAndersonRule()); }
	iv_ruleAnderson=ruleAnderson
	{ $current=$iv_ruleAnderson.current.getText(); }
	EOF;

// Rule Anderson
ruleAnderson returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAndersonAccess().getDeclParserRuleCall_0_0());
			}
			this_Decl_0=ruleDecl
			{
				$current.merge(this_Decl_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getAndersonAccess().getAssigParserRuleCall_0_1());
			}
			this_Assig_1=ruleAssig
			{
				$current.merge(this_Assig_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			{
				newCompositeNode(grammarAccess.getAndersonAccess().getExpParserRuleCall_0_2());
			}
			this_Exp_2=ruleExp
			{
				$current.merge(this_Exp_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getAndersonAccess().getSemicolonKeyword_1());
		}
	)?
;

// Entry rule entryRuleBlock
entryRuleBlock returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current.getText(); }
	EOF;

// Rule Block
ruleBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getBlockAccess().getStatementParserRuleCall_1_0());
			}
			this_Statement_1=ruleStatement
			{
				$current.merge(this_Statement_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getBlockAccess().getSemicolonKeyword_1_1());
				}
			)?
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current.getText(); }
	EOF;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_0());
		}
		this_SimpleStmt_0=ruleSimpleStmt
		{
			$current.merge(this_SimpleStmt_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_1());
		}
		this_IfStmt_1=ruleIfStmt
		{
			$current.merge(this_IfStmt_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSwitchStmtParserRuleCall_2());
		}
		this_SwitchStmt_2=ruleSwitchStmt
		{
			$current.merge(this_SwitchStmt_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getReturnStmtParserRuleCall_3());
		}
		this_ReturnStmt_3=ruleReturnStmt
		{
			$current.merge(this_ReturnStmt_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStmtParserRuleCall_4());
		}
		this_ForStmt_4=ruleForStmt
		{
			$current.merge(this_ForStmt_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReturnStmt
entryRuleReturnStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	iv_ruleReturnStmt=ruleReturnStmt
	{ $current=$iv_ruleReturnStmt.current.getText(); }
	EOF;

// Rule ReturnStmt
ruleReturnStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='return'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReturnStmtAccess().getReturnKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getReturnStmtAccess().getExpParserRuleCall_1());
			}
			this_Exp_1=ruleExp
			{
				$current.merge(this_Exp_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	iv_ruleTypeDef=ruleTypeDef
	{ $current=$iv_ruleTypeDef.current.getText(); }
	EOF;

// Rule TypeDef
ruleTypeDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeDefAccess().getTypeKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getTypeDefAccess().getIDTerminalRuleCall_1());
		}
		(
			this_BASIC_TYPES_2=RULE_BASIC_TYPES
			{
				$current.merge(this_BASIC_TYPES_2);
			}
			{
				newLeafNode(this_BASIC_TYPES_2, grammarAccess.getTypeDefAccess().getBASIC_TYPESTerminalRuleCall_2_0());
			}
			    |
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getTypeDefAccess().getIDTerminalRuleCall_2_1());
			}
			    |
			{
				newCompositeNode(grammarAccess.getTypeDefAccess().getStructParserRuleCall_2_2());
			}
			this_Struct_4=ruleStruct
			{
				$current.merge(this_Struct_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleStruct
entryRuleStruct returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructRule()); }
	iv_ruleStruct=ruleStruct
	{ $current=$iv_ruleStruct.current.getText(); }
	EOF;

// Rule Struct
ruleStruct returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructAccess().getStructKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStructAccess().getFieldDeclParserRuleCall_2_0());
			}
			this_FieldDecl_2=ruleFieldDecl
			{
				$current.merge(this_FieldDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getStructAccess().getSemicolonKeyword_2_1());
				}
			)?
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFieldDecl
entryRuleFieldDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_ruleFieldDecl=ruleFieldDecl
	{ $current=$iv_ruleFieldDecl.current.getText(); }
	EOF;

// Rule FieldDecl
ruleFieldDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFieldDeclAccess().getIdListParserRuleCall_0());
		}
		this_IdList_0=ruleIdList
		{
			$current.merge(this_IdList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			this_BASIC_TYPES_1=RULE_BASIC_TYPES
			{
				$current.merge(this_BASIC_TYPES_1);
			}
			{
				newLeafNode(this_BASIC_TYPES_1, grammarAccess.getFieldDeclAccess().getBASIC_TYPESTerminalRuleCall_1_0());
			}
			    |
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getFieldDeclAccess().getIDTerminalRuleCall_1_1());
			}
		)
	)
;

// Entry rule entryRuleDecl
entryRuleDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	iv_ruleDecl=ruleDecl
	{ $current=$iv_ruleDecl.current.getText(); }
	EOF;

// Rule Decl
ruleDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getDeclAccess().getShortVarDeclParserRuleCall_0());
		}
		this_ShortVarDecl_0=ruleShortVarDecl
		{
			$current.merge(this_ShortVarDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				kw='var'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getDeclAccess().getVarKeyword_1_0_0());
				}
				    |
				kw='const'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getDeclAccess().getConstKeyword_1_0_1());
				}
			)
			this_ID_3=RULE_ID
			{
				$current.merge(this_ID_3);
			}
			{
				newLeafNode(this_ID_3, grammarAccess.getDeclAccess().getIDTerminalRuleCall_1_1());
			}
			{
				newCompositeNode(grammarAccess.getDeclAccess().getIdListParserRuleCall_1_2());
			}
			this_IdList_4=ruleIdList
			{
				$current.merge(this_IdList_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_BASIC_TYPES_5=RULE_BASIC_TYPES
			{
				$current.merge(this_BASIC_TYPES_5);
			}
			{
				newLeafNode(this_BASIC_TYPES_5, grammarAccess.getDeclAccess().getBASIC_TYPESTerminalRuleCall_1_3());
			}
			(
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getDeclAccess().getEqualsSignKeyword_1_4_0());
				}
				{
					newCompositeNode(grammarAccess.getDeclAccess().getExpParserRuleCall_1_4_1());
				}
				this_Exp_7=ruleExp
				{
					$current.merge(this_Exp_7);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getDeclAccess().getExpListParserRuleCall_1_4_2());
				}
				this_ExpList_8=ruleExpList
				{
					$current.merge(this_ExpList_8);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleShortVarDecl
entryRuleShortVarDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getShortVarDeclRule()); }
	iv_ruleShortVarDecl=ruleShortVarDecl
	{ $current=$iv_ruleShortVarDecl.current.getText(); }
	EOF;

// Rule ShortVarDecl
ruleShortVarDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getShortVarDeclAccess().getIDTerminalRuleCall_0());
		}
		{
			newCompositeNode(grammarAccess.getShortVarDeclAccess().getIdListParserRuleCall_1());
		}
		this_IdList_1=ruleIdList
		{
			$current.merge(this_IdList_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=':='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getShortVarDeclAccess().getColonEqualsSignKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getShortVarDeclAccess().getExpParserRuleCall_3());
		}
		this_Exp_3=ruleExp
		{
			$current.merge(this_Exp_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getShortVarDeclAccess().getExpListParserRuleCall_4());
		}
		this_ExpList_4=ruleExpList
		{
			$current.merge(this_ExpList_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleAssig
entryRuleAssig returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAssigRule()); }
	iv_ruleAssig=ruleAssig
	{ $current=$iv_ruleAssig.current.getText(); }
	EOF;

// Rule Assig
ruleAssig returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getAssigAccess().getIDTerminalRuleCall_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAssigAccess().getIdListParserRuleCall_1_0_0());
				}
				this_IdList_1=ruleIdList
				{
					$current.merge(this_IdList_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAssigAccess().getEqualsSignKeyword_1_0_1());
				}
				{
					newCompositeNode(grammarAccess.getAssigAccess().getExpParserRuleCall_1_0_2());
				}
				this_Exp_3=ruleExp
				{
					$current.merge(this_Exp_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getAssigAccess().getExpListParserRuleCall_1_0_3());
				}
				this_ExpList_4=ruleExpList
				{
					$current.merge(this_ExpList_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
			    |
			(
				kw='++'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAssigAccess().getPlusSignPlusSignKeyword_1_1_0());
				}
				    |
				kw='--'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getAssigAccess().getHyphenMinusHyphenMinusKeyword_1_1_1());
				}
			)
			    |
			(
				(
					kw='+='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getAssigAccess().getPlusSignEqualsSignKeyword_1_2_0_0());
					}
					    |
					kw='-='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getAssigAccess().getHyphenMinusEqualsSignKeyword_1_2_0_1());
					}
					    |
					kw='*='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getAssigAccess().getAsteriskEqualsSignKeyword_1_2_0_2());
					}
					    |
					kw='/='
					{
						$current.merge(kw);
						newLeafNode(kw, grammarAccess.getAssigAccess().getSolidusEqualsSignKeyword_1_2_0_3());
					}
				)
				{
					newCompositeNode(grammarAccess.getAssigAccess().getExpParserRuleCall_1_2_1());
				}
				this_Exp_11=ruleExp
				{
					$current.merge(this_Exp_11);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIdList
entryRuleIdList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdListRule()); }
	iv_ruleIdList=ruleIdList
	{ $current=$iv_ruleIdList.current.getText(); }
	EOF;

// Rule IdList
ruleIdList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdListAccess().getCommaKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getIdListAccess().getIDTerminalRuleCall_1());
		}
	)*
;

// Entry rule entryRuleExpList
entryRuleExpList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpListRule()); }
	iv_ruleExpList=ruleExpList
	{ $current=$iv_ruleExpList.current.getText(); }
	EOF;

// Rule ExpList
ruleExpList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpListAccess().getCommaKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExpListAccess().getExpParserRuleCall_1());
		}
		this_Exp_1=ruleExp
		{
			$current.merge(this_Exp_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRuleExp
entryRuleExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current.getText(); }
	EOF;

// Rule Exp
ruleExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpAccess().getCallParserRuleCall_0());
		}
		this_Call_0=ruleCall
		{
			$current.merge(this_Call_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpAccess().getExpAuxParserRuleCall_1());
		}
		this_ExpAux_1=ruleExpAux
		{
			$current.merge(this_ExpAux_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpAccess().getBooleanExpParserRuleCall_2_0());
			}
			this_BooleanExp_2=ruleBooleanExp
			{
				$current.merge(this_BooleanExp_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getExpJoinParserRuleCall_2_1());
				}
				this_ExpJoin_3=ruleExpJoin
				{
					$current.merge(this_ExpJoin_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpAccess().getAritExpParserRuleCall_3_0());
			}
			this_AritExp_4=ruleAritExp
			{
				$current.merge(this_AritExp_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getExpJoinParserRuleCall_3_1());
				}
				this_ExpJoin_5=ruleExpJoin
				{
					$current.merge(this_ExpJoin_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		this_STRING_6=RULE_STRING
		{
			$current.merge(this_STRING_6);
		}
		{
			newLeafNode(this_STRING_6, grammarAccess.getExpAccess().getSTRINGTerminalRuleCall_4());
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpAccess().getRelExpParserRuleCall_5());
		}
		this_RelExp_7=ruleRelExp
		{
			$current.merge(this_RelExp_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_ID_8=RULE_ID
			{
				$current.merge(this_ID_8);
			}
			{
				newLeafNode(this_ID_8, grammarAccess.getExpAccess().getIDTerminalRuleCall_6_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getExpJoinParserRuleCall_6_1());
				}
				this_ExpJoin_9=ruleExpJoin
				{
					$current.merge(this_ExpJoin_9);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleSimpleStmt
entryRuleSimpleStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtRule()); }
	iv_ruleSimpleStmt=ruleSimpleStmt
	{ $current=$iv_ruleSimpleStmt.current.getText(); }
	EOF;

// Rule SimpleStmt
ruleSimpleStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getDeclParserRuleCall_0());
		}
		this_Decl_0=ruleDecl
		{
			$current.merge(this_Decl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getAssigParserRuleCall_1());
		}
		this_Assig_1=ruleAssig
		{
			$current.merge(this_Assig_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2());
		}
		this_Exp_2=ruleExp
		{
			$current.merge(this_Exp_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleExpAux
entryRuleExpAux returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpAuxRule()); }
	iv_ruleExpAux=ruleExpAux
	{ $current=$iv_ruleExpAux.current.getText(); }
	EOF;

// Rule ExpAux
ruleExpAux returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='!'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpAuxAccess().getExclamationMarkKeyword_0());
			}
		)?
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpAuxAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getExpAuxAccess().getExpParserRuleCall_2());
		}
		this_Exp_2=ruleExp
		{
			$current.merge(this_Exp_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpAuxAccess().getRightParenthesisKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getExpAuxAccess().getExpJoinParserRuleCall_4());
			}
			this_ExpJoin_4=ruleExpJoin
			{
				$current.merge(this_ExpJoin_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current.getText(); }
	EOF;

// Rule Call
ruleCall returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getCallAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCallAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getCallAccess().getIDTerminalRuleCall_1_1());
			}
		)*
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getCallAccess().getExpParserRuleCall_3_0());
			}
			this_Exp_4=ruleExp
			{
				$current.merge(this_Exp_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCallAccess().getExpListParserRuleCall_3_1());
			}
			this_ExpList_5=ruleExpList
			{
				$current.merge(this_ExpList_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExpJoin
entryRuleExpJoin returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpJoinRule()); }
	iv_ruleExpJoin=ruleExpJoin
	{ $current=$iv_ruleExpJoin.current.getText(); }
	EOF;

// Rule ExpJoin
ruleExpJoin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_OP_REL_0=RULE_OP_REL
			{
				$current.merge(this_OP_REL_0);
			}
			{
				newLeafNode(this_OP_REL_0, grammarAccess.getExpJoinAccess().getOP_RELTerminalRuleCall_0_0());
			}
			    |
			this_OP_UNARY_1=RULE_OP_UNARY
			{
				$current.merge(this_OP_UNARY_1);
			}
			{
				newLeafNode(this_OP_UNARY_1, grammarAccess.getExpJoinAccess().getOP_UNARYTerminalRuleCall_0_1());
			}
			    |
			this_OP_SUM_2=RULE_OP_SUM
			{
				$current.merge(this_OP_SUM_2);
			}
			{
				newLeafNode(this_OP_SUM_2, grammarAccess.getExpJoinAccess().getOP_SUMTerminalRuleCall_0_2());
			}
			    |
			this_OP_MULT_3=RULE_OP_MULT
			{
				$current.merge(this_OP_MULT_3);
			}
			{
				newLeafNode(this_OP_MULT_3, grammarAccess.getExpJoinAccess().getOP_MULTTerminalRuleCall_0_3());
			}
			    |
			kw='&&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpJoinAccess().getAmpersandAmpersandKeyword_0_4());
			}
			    |
			kw='||'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpJoinAccess().getVerticalLineVerticalLineKeyword_0_5());
			}
		)
		{
			newCompositeNode(grammarAccess.getExpJoinAccess().getExpParserRuleCall_1());
		}
		this_Exp_6=ruleExp
		{
			$current.merge(this_Exp_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelExp
entryRuleRelExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelExpRule()); }
	iv_ruleRelExp=ruleRelExp
	{ $current=$iv_ruleRelExp.current.getText(); }
	EOF;

// Rule RelExp
ruleRelExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_0());
			}
			this_NumberLiteral_0=ruleNumberLiteral
			{
				$current.merge(this_NumberLiteral_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				this_OP_REL_1=RULE_OP_REL
				{
					$current.merge(this_OP_REL_1);
				}
				{
					newLeafNode(this_OP_REL_1, grammarAccess.getRelExpAccess().getOP_RELTerminalRuleCall_0_1_0());
				}
				    |
				this_OP_UNARY_2=RULE_OP_UNARY
				{
					$current.merge(this_OP_UNARY_2);
				}
				{
					newLeafNode(this_OP_UNARY_2, grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_0_1_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_2());
			}
			this_NumberLiteral_3=ruleNumberLiteral
			{
				$current.merge(this_NumberLiteral_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_0());
			}
			this_BooleanLiteral_4=ruleBooleanLiteral
			{
				$current.merge(this_BooleanLiteral_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_OP_UNARY_5=RULE_OP_UNARY
			{
				$current.merge(this_OP_UNARY_5);
			}
			{
				newLeafNode(this_OP_UNARY_5, grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_1_1());
			}
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_2());
			}
			this_BooleanLiteral_6=ruleBooleanLiteral
			{
				$current.merge(this_BooleanLiteral_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpRule()); }
	iv_ruleBooleanExp=ruleBooleanExp
	{ $current=$iv_ruleBooleanExp.current.getText(); }
	EOF;

// Rule BooleanExp
ruleBooleanExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBooleanExpAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current.merge(this_Or_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current.getText(); }
	EOF;

// Rule Or
ruleOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='!'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOrAccess().getExclamationMarkKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_1());
		}
		this_And_1=ruleAnd
		{
			$current.merge(this_And_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='||'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_2_1());
			}
			this_And_3=ruleAnd
			{
				$current.merge(this_And_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current.getText(); }
	EOF;

// Rule And
ruleAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_0());
		}
		this_BooleanLiteral_0=ruleBooleanLiteral
		{
			$current.merge(this_BooleanLiteral_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='&&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_1_1());
			}
			this_BooleanLiteral_2=ruleBooleanLiteral
			{
				$current.merge(this_BooleanLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current.getText(); }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_BOOL_0=RULE_BOOL
	{
		$current.merge(this_BOOL_0);
	}
	{
		newLeafNode(this_BOOL_0, grammarAccess.getBooleanLiteralAccess().getBOOLTerminalRuleCall());
	}
;

// Entry rule entryRuleAritExp
entryRuleAritExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAritExpRule()); }
	iv_ruleAritExp=ruleAritExp
	{ $current=$iv_ruleAritExp.current.getText(); }
	EOF;

// Rule AritExp
ruleAritExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAritExpAccess().getAdditionParserRuleCall());
	}
	this_Addition_0=ruleAddition
	{
		$current.merge(this_Addition_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddition
entryRuleAddition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current.getText(); }
	EOF;

// Rule Addition
ruleAddition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_OP_SUM_0=RULE_OP_SUM
			{
				$current.merge(this_OP_SUM_0);
			}
			{
				newLeafNode(this_OP_SUM_0, grammarAccess.getAdditionAccess().getOP_SUMTerminalRuleCall_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_1());
		}
		this_Multiplication_1=ruleMultiplication
		{
			$current.merge(this_Multiplication_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current.getText(); }
	EOF;

// Rule Multiplication
ruleMultiplication returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_0());
		}
		this_NumberLiteral_0=ruleNumberLiteral
		{
			$current.merge(this_NumberLiteral_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				this_OP_MULT_1=RULE_OP_MULT
				{
					$current.merge(this_OP_MULT_1);
				}
				{
					newLeafNode(this_OP_MULT_1, grammarAccess.getMultiplicationAccess().getOP_MULTTerminalRuleCall_1_0());
				}
			)?
			{
				newCompositeNode(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_1_1());
			}
			this_NumberLiteral_2=ruleNumberLiteral
			{
				$current.merge(this_NumberLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current.getText(); }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current.getText(); }
	EOF;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_BASIC_TYPES_0=RULE_BASIC_TYPES
		{
			$current.merge(this_BASIC_TYPES_0);
		}
		{
			newLeafNode(this_BASIC_TYPES_0, grammarAccess.getTypeNameAccess().getBASIC_TYPESTerminalRuleCall_0());
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1());
		}
		this_QualifiedIdent_1=ruleQualifiedIdent
		{
			$current.merge(this_QualifiedIdent_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_2());
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getStructParserRuleCall_3());
		}
		this_Struct_3=ruleStruct
		{
			$current.merge(this_Struct_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQualifiedIdent
entryRuleQualifiedIdent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	iv_ruleQualifiedIdent=ruleQualifiedIdent
	{ $current=$iv_ruleQualifiedIdent.current.getText(); }
	EOF;

// Rule QualifiedIdent
ruleQualifiedIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_2());
		}
	)
;

RULE_BASIC_TYPES : ('string'|'int'|'bool');

RULE_OP_SUM : ('+'|'-');

RULE_OP_MULT : ('*'|'/');

RULE_OP_REL : ('<='|'>='|'<'|'>');

RULE_OP_UNARY : ('=='|'!=');

RULE_BOOL : ('true'|'false');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
