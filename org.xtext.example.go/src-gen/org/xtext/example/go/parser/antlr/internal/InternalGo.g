/*
 * generated by Xtext 2.14.0
 */
grammar InternalGo;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
}

@lexer::header {
package org.xtext.example.go.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.go.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.go.services.GoGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/

 	private GoGrammarAccess grammarAccess;

    public InternalGoParser(TokenStream input, GoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected GoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getElementsSourceFileParserRuleCall_0());
			}
			lv_elements_0_0=ruleSourceFile
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.example.go.Go.SourceFile");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleSourceFile
entryRuleSourceFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSourceFileRule()); }
	iv_ruleSourceFile=ruleSourceFile
	{ $current=$iv_ruleSourceFile.current; }
	EOF;

// Rule SourceFile
ruleSourceFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSourceFileAccess().getSourceFileAction_0(),
					$current);
			}
		)
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSourceFileAccess().getPackageParserRuleCall_1());
		}
		rulePackage
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_2=';'
			{
				newLeafNode(otherlv_2, grammarAccess.getSourceFileAccess().getSemicolonKeyword_2());
			}
		)?
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSourceFileAccess().getImportDeclParserRuleCall_3_0());
			}
			ruleImportDecl
			{
				afterParserOrEnumRuleCall();
			}
			(
				otherlv_4=';'
				{
					newLeafNode(otherlv_4, grammarAccess.getSourceFileAccess().getSemicolonKeyword_3_1());
				}
			)?
		)*
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSourceFileAccess().getTopLevelDeclTopLevelDeclParserRuleCall_4_0_0());
					}
					lv_TopLevelDecl_5_0=ruleTopLevelDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSourceFileRule());
						}
						add(
							$current,
							"TopLevelDecl",
							lv_TopLevelDecl_5_0,
							"org.xtext.example.go.Go.TopLevelDecl");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getSourceFileAccess().getSemicolonKeyword_4_1());
				}
			)?
		)*
	)
;

// Entry rule entryRuleTopLevelDecl
entryRuleTopLevelDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTopLevelDeclRule()); }
	iv_ruleTopLevelDecl=ruleTopLevelDecl
	{ $current=$iv_ruleTopLevelDecl.current; }
	EOF;

// Rule TopLevelDecl
ruleTopLevelDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTopLevelDeclAccess().getTopLevelDeclAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTopLevelDeclAccess().getDeclDeclParserRuleCall_0_1_0());
					}
					lv_decl_1_0=ruleDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
						}
						set(
							$current,
							"decl",
							lv_decl_1_0,
							"org.xtext.example.go.Go.Decl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getTopLevelDeclAccess().getFuncFuncDeclParserRuleCall_1_0());
				}
				lv_func_2_0=ruleFuncDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTopLevelDeclRule());
					}
					set(
						$current,
						"func",
						lv_func_2_0,
						"org.xtext.example.go.Go.FuncDecl");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getTopLevelDeclAccess().getTopLevelDeclAction_2_0(),
						$current);
				}
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getTopLevelDeclAccess().getTypeDefParserRuleCall_2_1());
			}
			ruleTypeDef
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleImportDecl
entryRuleImportDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportDeclRule()); }
	iv_ruleImportDecl=ruleImportDecl
	{ $current=$iv_ruleImportDecl.current.getText(); }
	EOF;

// Rule ImportDecl
ruleImportDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='import'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getImportDeclAccess().getImportKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_0());
			}
			this_ImportSpec_1=ruleImportSpec
			{
				$current.merge(this_ImportSpec_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			    |
			(
				kw='('
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getLeftParenthesisKeyword_1_1_0());
				}
				(
					{
						newCompositeNode(grammarAccess.getImportDeclAccess().getImportSpecParserRuleCall_1_1_1_0());
					}
					this_ImportSpec_3=ruleImportSpec
					{
						$current.merge(this_ImportSpec_3);
					}
					{
						afterParserOrEnumRuleCall();
					}
					(
						kw=';'
						{
							$current.merge(kw);
							newLeafNode(kw, grammarAccess.getImportDeclAccess().getSemicolonKeyword_1_1_1_1());
						}
					)?
				)*
				kw=')'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getImportDeclAccess().getRightParenthesisKeyword_1_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleImportSpec
entryRuleImportSpec returns [String current=null]:
	{ newCompositeNode(grammarAccess.getImportSpecRule()); }
	iv_ruleImportSpec=ruleImportSpec
	{ $current=$iv_ruleImportSpec.current.getText(); }
	EOF;

// Rule ImportSpec
ruleImportSpec returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getImportSpecAccess().getFullStopKeyword_0_0());
			}
			    |
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getImportSpecAccess().getIDTerminalRuleCall_0_1());
			}
		)?
		this_STRING_2=RULE_STRING
		{
			$current.merge(this_STRING_2);
		}
		{
			newLeafNode(this_STRING_2, grammarAccess.getImportSpecAccess().getSTRINGTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePackage
entryRulePackage returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPackageRule()); }
	iv_rulePackage=rulePackage
	{ $current=$iv_rulePackage.current.getText(); }
	EOF;

// Rule Package
rulePackage returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='package'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPackageAccess().getPackageKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getPackageAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleForStmt
entryRuleForStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStmtRule()); }
	iv_ruleForStmt=ruleForStmt
	{ $current=$iv_ruleForStmt.current; }
	EOF;

// Rule ForStmt
ruleForStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForStmtAccess().getForKeyword_0());
		}
		(
			(
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getExpParserRuleCall_1_0_0());
				}
				ruleExp
				{
					afterParserOrEnumRuleCall();
				}
				(
					{
						/* */
					}
					{
						newCompositeNode(grammarAccess.getForStmtAccess().getRangeClauseParserRuleCall_1_0_1());
					}
					ruleRangeClause
					{
						afterParserOrEnumRuleCall();
					}
				)?
			)
			    |
			(
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getForClauseParserRuleCall_1_1());
				}
				this_ForClause_3=ruleForClause
				{
					$current = $this_ForClause_3.current;
					afterParserOrEnumRuleCall();
				}
			)?
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForStmtAccess().getBlockBlockParserRuleCall_2_0());
				}
				lv_Block_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStmtRule());
					}
					set(
						$current,
						"Block",
						lv_Block_4_0,
						"org.xtext.example.go.Go.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleForClause
entryRuleForClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForClauseRule()); }
	iv_ruleForClause=ruleForClause
	{ $current=$iv_ruleForClause.current; }
	EOF;

// Rule ForClause
ruleForClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getForClauseAccess().getForClauseAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getForClauseAccess().getDeclDeclParserRuleCall_1_0());
				}
				lv_decl_1_0=ruleDecl
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForClauseRule());
					}
					set(
						$current,
						"decl",
						lv_decl_1_0,
						"org.xtext.example.go.Go.Decl");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getForClauseAccess().getSemicolonKeyword_2());
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getExpParserRuleCall_3());
			}
			ruleExp
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_4=';'
		{
			newLeafNode(otherlv_4, grammarAccess.getForClauseAccess().getSemicolonKeyword_4());
		}
		(
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getForClauseAccess().getSimpleStmtParserRuleCall_5());
			}
			this_SimpleStmt_5=ruleSimpleStmt
			{
				$current = $this_SimpleStmt_5.current;
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleRangeClause
entryRuleRangeClause returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRangeClauseRule()); }
	iv_ruleRangeClause=ruleRangeClause
	{ $current=$iv_ruleRangeClause.current.getText(); }
	EOF;

// Rule RangeClause
ruleRangeClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRangeClauseAccess().getExpListParserRuleCall_0_0());
			}
			this_ExpList_0=ruleExpList
			{
				$current.merge(this_ExpList_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=':='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRangeClauseAccess().getColonEqualsSignKeyword_0_1_0());
				}
				    |
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRangeClauseAccess().getEqualsSignKeyword_0_1_1());
				}
			)
		)?
		kw='range'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getRangeClauseAccess().getRangeKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getRangeClauseAccess().getExpParserRuleCall_2());
		}
		this_Exp_4=ruleExp
		{
			$current.merge(this_Exp_4);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFuncDecl
entryRuleFuncDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFuncDeclRule()); }
	iv_ruleFuncDecl=ruleFuncDecl
	{ $current=$iv_ruleFuncDecl.current; }
	EOF;

// Rule FuncDecl
ruleFuncDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='func'
		{
			newLeafNode(otherlv_0, grammarAccess.getFuncDeclAccess().getFuncKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncDeclAccess().getReceiverReceiverParserRuleCall_1_0());
				}
				lv_receiver_1_0=ruleReceiver
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncDeclRule());
					}
					set(
						$current,
						"receiver",
						lv_receiver_1_0,
						"org.xtext.example.go.Go.Receiver");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getFuncDeclAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFuncDeclRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncDeclAccess().getSignatureSignatureParserRuleCall_3_0());
				}
				lv_signature_3_0=ruleSignature
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncDeclRule());
					}
					set(
						$current,
						"signature",
						lv_signature_3_0,
						"org.xtext.example.go.Go.Signature");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFuncDeclAccess().getBlockBlockParserRuleCall_4_0());
				}
				lv_block_4_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFuncDeclRule());
					}
					set(
						$current,
						"block",
						lv_block_4_0,
						"org.xtext.example.go.Go.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleReceiver
entryRuleReceiver returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReceiverRule()); }
	iv_ruleReceiver=ruleReceiver
	{ $current=$iv_ruleReceiver.current.getText(); }
	EOF;

// Rule Receiver
ruleReceiver returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getReceiverAccess().getParametersParserRuleCall());
	}
	this_Parameters_0=ruleParameters
	{
		$current.merge(this_Parameters_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleSignature
entryRuleSignature returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSignatureRule()); }
	iv_ruleSignature=ruleSignature
	{ $current=$iv_ruleSignature.current.getText(); }
	EOF;

// Rule Signature
ruleSignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSignatureAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			{
				newCompositeNode(grammarAccess.getSignatureAccess().getResultParserRuleCall_1());
			}
			this_Result_1=ruleResult
			{
				$current.merge(this_Result_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleResult
entryRuleResult returns [String current=null]:
	{ newCompositeNode(grammarAccess.getResultRule()); }
	iv_ruleResult=ruleResult
	{ $current=$iv_ruleResult.current.getText(); }
	EOF;

// Rule Result
ruleResult returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getResultAccess().getParametersParserRuleCall_0());
		}
		this_Parameters_0=ruleParameters
		{
			$current.merge(this_Parameters_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getResultAccess().getTypeNameParserRuleCall_1());
		}
		this_TypeName_1=ruleTypeName
		{
			$current.merge(this_TypeName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleParameters
entryRuleParameters returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParametersRule()); }
	iv_ruleParameters=ruleParameters
	{ $current=$iv_ruleParameters.current.getText(); }
	EOF;

// Rule Parameters
ruleParameters returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getLeftParenthesisKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getParametersAccess().getParameterListParserRuleCall_1_0());
			}
			this_ParameterList_1=ruleParameterList
			{
				$current.merge(this_ParameterList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=','
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getParametersAccess().getCommaKeyword_1_1());
				}
			)?
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getParametersAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleParameterList
entryRuleParameterList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterListRule()); }
	iv_ruleParameterList=ruleParameterList
	{ $current=$iv_ruleParameterList.current.getText(); }
	EOF;

// Rule ParameterList
ruleParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_0());
		}
		this_ParameterDecl_0=ruleParameterDecl
		{
			$current.merge(this_ParameterDecl_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=','
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterListAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterListAccess().getParameterDeclParserRuleCall_1_1());
			}
			this_ParameterDecl_2=ruleParameterDecl
			{
				$current.merge(this_ParameterDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleParameterDecl
entryRuleParameterDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getParameterDeclRule()); }
	iv_ruleParameterDecl=ruleParameterDecl
	{ $current=$iv_ruleParameterDecl.current.getText(); }
	EOF;

// Rule ParameterDecl
ruleParameterDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_ID_0=RULE_ID
			{
				$current.merge(this_ID_0);
			}
			{
				newLeafNode(this_ID_0, grammarAccess.getParameterDeclAccess().getIDTerminalRuleCall_0_0());
			}
			{
				newCompositeNode(grammarAccess.getParameterDeclAccess().getIdListParserRuleCall_0_1());
			}
			this_IdList_1=ruleIdList
			{
				$current.merge(this_IdList_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			kw='...'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getParameterDeclAccess().getFullStopFullStopFullStopKeyword_1());
			}
		)?
		{
			newCompositeNode(grammarAccess.getParameterDeclAccess().getTypeNameParserRuleCall_2());
		}
		this_TypeName_3=ruleTypeName
		{
			$current.merge(this_TypeName_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSwitchStmt
entryRuleSwitchStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchStmtRule()); }
	iv_ruleSwitchStmt=ruleSwitchStmt
	{ $current=$iv_ruleSwitchStmt.current; }
	EOF;

// Rule SwitchStmt
ruleSwitchStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='switch'
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchStmtAccess().getSwitchKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSwitchStmtAccess().getAndersonParserRuleCall_1());
		}
		this_Anderson_1=ruleAnderson
		{
			$current = $this_Anderson_1.current;
			afterParserOrEnumRuleCall();
		}
		(
			this_ID_2=RULE_ID
			{
				newLeafNode(this_ID_2, grammarAccess.getSwitchStmtAccess().getIDTerminalRuleCall_2());
			}
		)?
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getSwitchStmtAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				otherlv_4='case'
				{
					newLeafNode(otherlv_4, grammarAccess.getSwitchStmtAccess().getCaseKeyword_4_0_0());
				}
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getSwitchStmtAccess().getExpParserRuleCall_4_0_1());
				}
				ruleExp
				{
					afterParserOrEnumRuleCall();
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSwitchStmtAccess().getSwitchCaseSwitchCaseParserRuleCall_4_0_2_0());
						}
						lv_SwitchCase_6_0=ruleSwitchCase
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSwitchStmtRule());
							}
							add(
								$current,
								"SwitchCase",
								lv_SwitchCase_6_0,
								"org.xtext.example.go.Go.SwitchCase");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			(
				otherlv_7='default'
				{
					newLeafNode(otherlv_7, grammarAccess.getSwitchStmtAccess().getDefaultKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getSwitchStmtAccess().getSwitchCaseSwitchCaseParserRuleCall_4_1_1_0());
						}
						lv_SwitchCase_8_0=ruleSwitchCase
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getSwitchStmtRule());
							}
							add(
								$current,
								"SwitchCase",
								lv_SwitchCase_8_0,
								"org.xtext.example.go.Go.SwitchCase");
							afterParserOrEnumRuleCall();
						}
					)
				)*
			)?
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getSwitchStmtAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleSwitchCase
entryRuleSwitchCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchCaseRule()); }
	iv_ruleSwitchCase=ruleSwitchCase
	{ $current=$iv_ruleSwitchCase.current; }
	EOF;

// Rule SwitchCase
ruleSwitchCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSwitchCaseAccess().getSwitchCaseAction_0(),
					$current);
			}
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getSwitchCaseAccess().getColonKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSwitchCaseAccess().getStatementStatementParserRuleCall_2_0_0());
					}
					lv_Statement_2_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSwitchCaseRule());
						}
						add(
							$current,
							"Statement",
							lv_Statement_2_0,
							"org.xtext.example.go.Go.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getSwitchCaseAccess().getSemicolonKeyword_2_1());
				}
			)?
		)*
	)
;

// Entry rule entryRuleIfStmt
entryRuleIfStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStmtRule()); }
	iv_ruleIfStmt=ruleIfStmt
	{ $current=$iv_ruleIfStmt.current; }
	EOF;

// Rule IfStmt
ruleIfStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStmtAccess().getIfKeyword_0());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getAndersonParserRuleCall_1());
		}
		this_Anderson_1=ruleAnderson
		{
			$current = $this_Anderson_1.current;
			afterParserOrEnumRuleCall();
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getIfStmtAccess().getExpParserRuleCall_2());
		}
		ruleExp
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_3_0());
				}
				lv_Block_3_0=ruleBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStmtRule());
					}
					add(
						$current,
						"Block",
						lv_Block_3_0,
						"org.xtext.example.go.Go.Block");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_4='else'
			{
				newLeafNode(otherlv_4, grammarAccess.getIfStmtAccess().getElseKeyword_4_0());
			}
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStmtAccess().getIfStmtIfStmtParserRuleCall_4_1_0_0());
						}
						lv_IfStmt_5_0=ruleIfStmt
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStmtRule());
							}
							set(
								$current,
								"IfStmt",
								lv_IfStmt_5_0,
								"org.xtext.example.go.Go.IfStmt");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getIfStmtAccess().getBlockBlockParserRuleCall_4_1_1_0());
						}
						lv_Block_6_0=ruleBlock
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getIfStmtRule());
							}
							add(
								$current,
								"Block",
								lv_Block_6_0,
								"org.xtext.example.go.Go.Block");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)?
	)
;

// Entry rule entryRuleAnderson
entryRuleAnderson returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndersonRule()); }
	iv_ruleAnderson=ruleAnderson
	{ $current=$iv_ruleAnderson.current; }
	EOF;

// Rule Anderson
ruleAnderson returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getAndersonAccess().getAndersonAction_0(),
					$current);
			}
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAndersonAccess().getDeclDeclParserRuleCall_1_0_0_0());
						}
						lv_decl_1_0=ruleDecl
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndersonRule());
							}
							set(
								$current,
								"decl",
								lv_decl_1_0,
								"org.xtext.example.go.Go.Decl");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				(
					(
						{
							newCompositeNode(grammarAccess.getAndersonAccess().getAssigAssigParserRuleCall_1_0_1_0());
						}
						lv_Assig_2_0=ruleAssig
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAndersonRule());
							}
							set(
								$current,
								"Assig",
								lv_Assig_2_0,
								"org.xtext.example.go.Go.Assig");
							afterParserOrEnumRuleCall();
						}
					)
				)
				    |
				{
					/* */
				}
				{
					newCompositeNode(grammarAccess.getAndersonAccess().getExpParserRuleCall_1_0_2());
				}
				ruleExp
				{
					afterParserOrEnumRuleCall();
				}
			)
			otherlv_4=';'
			{
				newLeafNode(otherlv_4, grammarAccess.getAndersonAccess().getSemicolonKeyword_1_1());
			}
		)?
	)
;

// Entry rule entryRuleBlock
entryRuleBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockRule()); }
	iv_ruleBlock=ruleBlock
	{ $current=$iv_ruleBlock.current; }
	EOF;

// Rule Block
ruleBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getBlockAccess().getBlockAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getBlockAccess().getStatementStatementParserRuleCall_2_0_0());
					}
					lv_Statement_2_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBlockRule());
						}
						add(
							$current,
							"Statement",
							lv_Statement_2_0,
							"org.xtext.example.go.Go.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_3=';'
				{
					newLeafNode(otherlv_3, grammarAccess.getBlockAccess().getSemicolonKeyword_2_1());
				}
			)?
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getLabeledStmtLabeledStmtParserRuleCall_0_0());
				}
				lv_LabeledStmt_0_0=ruleLabeledStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"LabeledStmt",
						lv_LabeledStmt_0_0,
						"org.xtext.example.go.Go.LabeledStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSendStmtSendStmtParserRuleCall_1_0());
				}
				lv_SendStmt_1_0=ruleSendStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"SendStmt",
						lv_SendStmt_1_0,
						"org.xtext.example.go.Go.SendStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSimpleStmtParserRuleCall_2());
		}
		this_SimpleStmt_2=ruleSimpleStmt
		{
			$current = $this_SimpleStmt_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getIfStmtParserRuleCall_3());
		}
		this_IfStmt_3=ruleIfStmt
		{
			$current = $this_IfStmt_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getSwitchStmtSwitchStmtParserRuleCall_4_0());
				}
				lv_SwitchStmt_4_0=ruleSwitchStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"SwitchStmt",
						lv_SwitchStmt_4_0,
						"org.xtext.example.go.Go.SwitchStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getReturnStmtReturnStmtParserRuleCall_5_0());
				}
				lv_ReturnStmt_5_0=ruleReturnStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"ReturnStmt",
						lv_ReturnStmt_5_0,
						"org.xtext.example.go.Go.ReturnStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getForStmtParserRuleCall_6());
		}
		this_ForStmt_6=ruleForStmt
		{
			$current = $this_ForStmt_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getBreakStmtBreakStmtParserRuleCall_7_0());
				}
				lv_BreakStmt_7_0=ruleBreakStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"BreakStmt",
						lv_BreakStmt_7_0,
						"org.xtext.example.go.Go.BreakStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getContinueStmtContinueStmtParserRuleCall_8_0());
				}
				lv_ContinueStmt_8_0=ruleContinueStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"ContinueStmt",
						lv_ContinueStmt_8_0,
						"org.xtext.example.go.Go.ContinueStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getGotoStmtGotoStmtParserRuleCall_9_0());
				}
				lv_GotoStmt_9_0=ruleGotoStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"GotoStmt",
						lv_GotoStmt_9_0,
						"org.xtext.example.go.Go.GotoStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getFalltrhoughStmtFalltrhoughStmtParserRuleCall_10_0());
				}
				lv_FalltrhoughStmt_10_0=ruleFalltrhoughStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"FalltrhoughStmt",
						lv_FalltrhoughStmt_10_0,
						"org.xtext.example.go.Go.FalltrhoughStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getStatementAccess().getDeferStmtDeferStmtParserRuleCall_11_0());
				}
				lv_DeferStmt_11_0=ruleDeferStmt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStatementRule());
					}
					set(
						$current,
						"DeferStmt",
						lv_DeferStmt_11_0,
						"org.xtext.example.go.Go.DeferStmt");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectStmtParserRuleCall_12());
		}
		this_SelectStmt_12=ruleSelectStmt
		{
			$current = $this_SelectStmt_12.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSelectStmt
entryRuleSelectStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStmtRule()); }
	iv_ruleSelectStmt=ruleSelectStmt
	{ $current=$iv_ruleSelectStmt.current; }
	EOF;

// Rule SelectStmt
ruleSelectStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getSelectStmtAccess().getSelectStmtAction_0(),
					$current);
			}
		)
		otherlv_1='select'
		{
			newLeafNode(otherlv_1, grammarAccess.getSelectStmtAccess().getSelectKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectStmtAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStmtAccess().getCommClauseCommClauseParserRuleCall_3_0());
				}
				lv_CommClause_3_0=ruleCommClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStmtRule());
					}
					add(
						$current,
						"CommClause",
						lv_CommClause_3_0,
						"org.xtext.example.go.Go.CommClause");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getSelectStmtAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCommClause
entryRuleCommClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommClauseRule()); }
	iv_ruleCommClause=ruleCommClause
	{ $current=$iv_ruleCommClause.current; }
	EOF;

// Rule CommClause
ruleCommClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCommClauseAccess().getCommCaseParserRuleCall_0());
		}
		ruleCommCase
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getCommClauseAccess().getColonKeyword_1());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getCommClauseAccess().getStatementListParserRuleCall_2());
		}
		this_StatementList_2=ruleStatementList
		{
			$current = $this_StatementList_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStatementList
entryRuleStatementList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementListRule()); }
	iv_ruleStatementList=ruleStatementList
	{ $current=$iv_ruleStatementList.current; }
	EOF;

// Rule StatementList
ruleStatementList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				/* */
			}
			{
				$current = forceCreateModelElement(
					grammarAccess.getStatementListAccess().getStatementListAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getStatementListAccess().getStatementStatementParserRuleCall_1_0_0());
					}
					lv_Statement_1_0=ruleStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getStatementListRule());
						}
						add(
							$current,
							"Statement",
							lv_Statement_1_0,
							"org.xtext.example.go.Go.Statement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=';'
				{
					newLeafNode(otherlv_2, grammarAccess.getStatementListAccess().getSemicolonKeyword_1_1());
				}
			)?
		)*
	)
;

// Entry rule entryRuleCommCase
entryRuleCommCase returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommCaseRule()); }
	iv_ruleCommCase=ruleCommCase
	{ $current=$iv_ruleCommCase.current.getText(); }
	EOF;

// Rule CommCase
ruleCommCase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='case'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCommCaseAccess().getCaseKeyword_0_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getCommCaseAccess().getSendStmtParserRuleCall_0_1_0());
				}
				this_SendStmt_1=ruleSendStmt
				{
					$current.merge(this_SendStmt_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				    |
				{
					newCompositeNode(grammarAccess.getCommCaseAccess().getRecvStmtParserRuleCall_0_1_1());
				}
				this_RecvStmt_2=ruleRecvStmt
				{
					$current.merge(this_RecvStmt_2);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		kw='default'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCommCaseAccess().getDefaultKeyword_1());
		}
	)
;

// Entry rule entryRuleRecvStmt
entryRuleRecvStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRecvStmtRule()); }
	iv_ruleRecvStmt=ruleRecvStmt
	{ $current=$iv_ruleRecvStmt.current.getText(); }
	EOF;

// Rule RecvStmt
ruleRecvStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getExpParserRuleCall_0_0_0());
				}
				this_Exp_0=ruleExp
				{
					$current.merge(this_Exp_0);
				}
				{
					afterParserOrEnumRuleCall();
				}
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getExpListParserRuleCall_0_0_1());
				}
				this_ExpList_1=ruleExpList
				{
					$current.merge(this_ExpList_1);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw='='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecvStmtAccess().getEqualsSignKeyword_0_0_2());
				}
			)
			    |
			(
				this_ID_3=RULE_ID
				{
					$current.merge(this_ID_3);
				}
				{
					newLeafNode(this_ID_3, grammarAccess.getRecvStmtAccess().getIDTerminalRuleCall_0_1_0());
				}
				{
					newCompositeNode(grammarAccess.getRecvStmtAccess().getIdListParserRuleCall_0_1_1());
				}
				this_IdList_4=ruleIdList
				{
					$current.merge(this_IdList_4);
				}
				{
					afterParserOrEnumRuleCall();
				}
				kw=':='
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getRecvStmtAccess().getColonEqualsSignKeyword_0_1_2());
				}
			)
		)?
		{
			newCompositeNode(grammarAccess.getRecvStmtAccess().getExpParserRuleCall_1());
		}
		this_Exp_6=ruleExp
		{
			$current.merge(this_Exp_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleLabeledStmt
entryRuleLabeledStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLabeledStmtRule()); }
	iv_ruleLabeledStmt=ruleLabeledStmt
	{ $current=$iv_ruleLabeledStmt.current; }
	EOF;

// Rule LabeledStmt
ruleLabeledStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			newLeafNode(this_ID_0, grammarAccess.getLabeledStmtAccess().getIDTerminalRuleCall_0());
		}
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getLabeledStmtAccess().getColonKeyword_1());
		}
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getLabeledStmtAccess().getStatementParserRuleCall_2());
		}
		this_Statement_2=ruleStatement
		{
			$current = $this_Statement_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSendStmt
entryRuleSendStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSendStmtRule()); }
	iv_ruleSendStmt=ruleSendStmt
	{ $current=$iv_ruleSendStmt.current.getText(); }
	EOF;

// Rule SendStmt
ruleSendStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getSendStmtAccess().getExpParserRuleCall_0());
		}
		this_Exp_0=ruleExp
		{
			$current.merge(this_Exp_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw='<-'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getSendStmtAccess().getLessThanSignHyphenMinusKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getSendStmtAccess().getExpParserRuleCall_2());
		}
		this_Exp_2=ruleExp
		{
			$current.merge(this_Exp_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBreakStmt
entryRuleBreakStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBreakStmtRule()); }
	iv_ruleBreakStmt=ruleBreakStmt
	{ $current=$iv_ruleBreakStmt.current.getText(); }
	EOF;

// Rule BreakStmt
ruleBreakStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='break'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBreakStmtAccess().getBreakKeyword_0());
		}
		(
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getBreakStmtAccess().getIDTerminalRuleCall_1());
			}
		)?
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getBreakStmtAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleContinueStmt
entryRuleContinueStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getContinueStmtRule()); }
	iv_ruleContinueStmt=ruleContinueStmt
	{ $current=$iv_ruleContinueStmt.current.getText(); }
	EOF;

// Rule ContinueStmt
ruleContinueStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='continue'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getContinueStmtAccess().getContinueKeyword_0());
		}
		(
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getContinueStmtAccess().getIDTerminalRuleCall_1());
			}
		)?
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getContinueStmtAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleGotoStmt
entryRuleGotoStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getGotoStmtRule()); }
	iv_ruleGotoStmt=ruleGotoStmt
	{ $current=$iv_ruleGotoStmt.current.getText(); }
	EOF;

// Rule GotoStmt
ruleGotoStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='goto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getGotoStmtAccess().getGotoKeyword_0());
		}
		(
			this_ID_1=RULE_ID
			{
				$current.merge(this_ID_1);
			}
			{
				newLeafNode(this_ID_1, grammarAccess.getGotoStmtAccess().getIDTerminalRuleCall_1());
			}
		)?
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getGotoStmtAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleFalltrhoughStmt
entryRuleFalltrhoughStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFalltrhoughStmtRule()); }
	iv_ruleFalltrhoughStmt=ruleFalltrhoughStmt
	{ $current=$iv_ruleFalltrhoughStmt.current.getText(); }
	EOF;

// Rule FalltrhoughStmt
ruleFalltrhoughStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='fallthrough'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getFalltrhoughStmtAccess().getFallthroughKeyword_0());
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getFalltrhoughStmtAccess().getSemicolonKeyword_1());
			}
		)?
	)
;

// Entry rule entryRuleDeferStmt
entryRuleDeferStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDeferStmtRule()); }
	iv_ruleDeferStmt=ruleDeferStmt
	{ $current=$iv_ruleDeferStmt.current.getText(); }
	EOF;

// Rule DeferStmt
ruleDeferStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='defer'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getDeferStmtAccess().getDeferKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDeferStmtAccess().getExpParserRuleCall_1());
		}
		this_Exp_1=ruleExp
		{
			$current.merge(this_Exp_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw=';'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getDeferStmtAccess().getSemicolonKeyword_2());
			}
		)?
	)
;

// Entry rule entryRuleReturnStmt
entryRuleReturnStmt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getReturnStmtRule()); }
	iv_ruleReturnStmt=ruleReturnStmt
	{ $current=$iv_ruleReturnStmt.current.getText(); }
	EOF;

// Rule ReturnStmt
ruleReturnStmt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='return'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getReturnStmtAccess().getReturnKeyword_0());
		}
		(
			{
				newCompositeNode(grammarAccess.getReturnStmtAccess().getExpParserRuleCall_1());
			}
			this_Exp_1=ruleExp
			{
				$current.merge(this_Exp_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleTypeDef
entryRuleTypeDef returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeDefRule()); }
	iv_ruleTypeDef=ruleTypeDef
	{ $current=$iv_ruleTypeDef.current.getText(); }
	EOF;

// Rule TypeDef
ruleTypeDef returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='type'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeDefAccess().getTypeKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getTypeDefAccess().getIDTerminalRuleCall_1());
		}
		{
			newCompositeNode(grammarAccess.getTypeDefAccess().getTypeNameParserRuleCall_2());
		}
		this_TypeName_2=ruleTypeName
		{
			$current.merge(this_TypeName_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleStruct
entryRuleStruct returns [String current=null]:
	{ newCompositeNode(grammarAccess.getStructRule()); }
	iv_ruleStruct=ruleStruct
	{ $current=$iv_ruleStruct.current.getText(); }
	EOF;

// Rule Struct
ruleStruct returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='struct'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructAccess().getStructKeyword_0());
		}
		kw='{'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			{
				newCompositeNode(grammarAccess.getStructAccess().getFieldDeclParserRuleCall_2_0());
			}
			this_FieldDecl_2=ruleFieldDecl
			{
				$current.merge(this_FieldDecl_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				kw=';'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getStructAccess().getSemicolonKeyword_2_1());
				}
			)?
		)*
		kw='}'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getStructAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleFieldDecl
entryRuleFieldDecl returns [String current=null]:
	{ newCompositeNode(grammarAccess.getFieldDeclRule()); }
	iv_ruleFieldDecl=ruleFieldDecl
	{ $current=$iv_ruleFieldDecl.current.getText(); }
	EOF;

// Rule FieldDecl
ruleFieldDecl returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getFieldDeclAccess().getIdListParserRuleCall_0());
		}
		this_IdList_0=ruleIdList
		{
			$current.merge(this_IdList_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		{
			newCompositeNode(grammarAccess.getFieldDeclAccess().getTypeNameParserRuleCall_1());
		}
		this_TypeName_1=ruleTypeName
		{
			$current.merge(this_TypeName_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDecl
entryRuleDecl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclRule()); }
	iv_ruleDecl=ruleDecl
	{ $current=$iv_ruleDecl.current; }
	EOF;

// Rule Decl
ruleDecl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_name_0_0=RULE_ID
					{
						newLeafNode(lv_name_0_0, grammarAccess.getDeclAccess().getNameIDTerminalRuleCall_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_0_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getDeclAccess().getIdListParserRuleCall_0_1());
			}
			ruleIdList
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_2=':='
			{
				newLeafNode(otherlv_2, grammarAccess.getDeclAccess().getColonEqualsSignKeyword_0_2());
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getDeclAccess().getExpParserRuleCall_0_3());
			}
			ruleExp
			{
				afterParserOrEnumRuleCall();
			}
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getDeclAccess().getExpListParserRuleCall_0_4());
			}
			ruleExpList
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			(
				otherlv_5='var'
				{
					newLeafNode(otherlv_5, grammarAccess.getDeclAccess().getVarKeyword_1_0_0());
				}
				    |
				otherlv_6='const'
				{
					newLeafNode(otherlv_6, grammarAccess.getDeclAccess().getConstKeyword_1_0_1());
				}
			)
			(
				(
					lv_name_7_0=RULE_ID
					{
						newLeafNode(lv_name_7_0, grammarAccess.getDeclAccess().getNameIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclRule());
						}
						setWithLastConsumed(
							$current,
							"name",
							lv_name_7_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclAccess().getIdListIdListParserRuleCall_1_2_0());
					}
					lv_idList_8_0=ruleIdList
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclRule());
						}
						set(
							$current,
							"idList",
							lv_idList_8_0,
							"org.xtext.example.go.Go.IdList");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclAccess().getTypeTypeNameParserRuleCall_1_3_0());
					}
					lv_type_9_0=ruleTypeName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclRule());
						}
						set(
							$current,
							"type",
							lv_type_9_0,
							"org.xtext.example.go.Go.TypeName");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10='='
				{
					newLeafNode(otherlv_10, grammarAccess.getDeclAccess().getEqualsSignKeyword_1_4_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDeclAccess().getExpExpParserRuleCall_1_4_1_0());
						}
						lv_exp_11_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDeclRule());
							}
							set(
								$current,
								"exp",
								lv_exp_11_0,
								"org.xtext.example.go.Go.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getDeclAccess().getExplistExpListParserRuleCall_1_4_2_0());
						}
						lv_explist_12_0=ruleExpList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDeclRule());
							}
							set(
								$current,
								"explist",
								lv_explist_12_0,
								"org.xtext.example.go.Go.ExpList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)?
		)
	)
;

// Entry rule entryRuleAssig
entryRuleAssig returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssigRule()); }
	iv_ruleAssig=ruleAssig
	{ $current=$iv_ruleAssig.current; }
	EOF;

// Rule Assig
ruleAssig returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_id_0_0=RULE_ID
				{
					newLeafNode(lv_id_0_0, grammarAccess.getAssigAccess().getIdIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAssigRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getAssigAccess().getIdlIdListParserRuleCall_1_0_0_0());
						}
						lv_idl_1_0=ruleIdList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssigRule());
							}
							set(
								$current,
								"idl",
								lv_idl_1_0,
								"org.xtext.example.go.Go.IdList");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_2='='
				{
					newLeafNode(otherlv_2, grammarAccess.getAssigAccess().getEqualsSignKeyword_1_0_1());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getAssigAccess().getExpressionExpParserRuleCall_1_0_2_0());
						}
						lv_expression_3_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssigRule());
							}
							set(
								$current,
								"expression",
								lv_expression_3_0,
								"org.xtext.example.go.Go.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssigAccess().getExpressionlistExpListParserRuleCall_1_0_3_0());
						}
						lv_expressionlist_4_0=ruleExpList
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssigRule());
							}
							set(
								$current,
								"expressionlist",
								lv_expressionlist_4_0,
								"org.xtext.example.go.Go.ExpList");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
			    |
			(
				otherlv_5='++'
				{
					newLeafNode(otherlv_5, grammarAccess.getAssigAccess().getPlusSignPlusSignKeyword_1_1_0());
				}
				    |
				otherlv_6='--'
				{
					newLeafNode(otherlv_6, grammarAccess.getAssigAccess().getHyphenMinusHyphenMinusKeyword_1_1_1());
				}
			)
			    |
			(
				(
					otherlv_7='+='
					{
						newLeafNode(otherlv_7, grammarAccess.getAssigAccess().getPlusSignEqualsSignKeyword_1_2_0_0());
					}
					    |
					otherlv_8='-='
					{
						newLeafNode(otherlv_8, grammarAccess.getAssigAccess().getHyphenMinusEqualsSignKeyword_1_2_0_1());
					}
					    |
					otherlv_9='*='
					{
						newLeafNode(otherlv_9, grammarAccess.getAssigAccess().getAsteriskEqualsSignKeyword_1_2_0_2());
					}
					    |
					otherlv_10='/='
					{
						newLeafNode(otherlv_10, grammarAccess.getAssigAccess().getSolidusEqualsSignKeyword_1_2_0_3());
					}
				)
				(
					(
						{
							newCompositeNode(grammarAccess.getAssigAccess().getExpressionExpParserRuleCall_1_2_1_0());
						}
						lv_expression_11_0=ruleExp
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getAssigRule());
							}
							set(
								$current,
								"expression",
								lv_expression_11_0,
								"org.xtext.example.go.Go.Exp");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)
		)
	)
;

// Entry rule entryRuleIdList
entryRuleIdList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getIdListRule()); }
	iv_ruleIdList=ruleIdList
	{ $current=$iv_ruleIdList.current.getText(); }
	EOF;

// Rule IdList
ruleIdList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getIdListAccess().getCommaKeyword_0());
		}
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getIdListAccess().getIDTerminalRuleCall_1());
		}
	)*
;

// Entry rule entryRuleExpList
entryRuleExpList returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpListRule()); }
	iv_ruleExpList=ruleExpList
	{ $current=$iv_ruleExpList.current.getText(); }
	EOF;

// Rule ExpList
ruleExpList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=','
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpListAccess().getCommaKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExpListAccess().getExpParserRuleCall_1());
		}
		this_Exp_1=ruleExp
		{
			$current.merge(this_Exp_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)*
;

// Entry rule entryRuleExp
entryRuleExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpRule()); }
	iv_ruleExp=ruleExp
	{ $current=$iv_ruleExp.current.getText(); }
	EOF;

// Rule Exp
ruleExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpAccess().getCallParserRuleCall_0());
		}
		this_Call_0=ruleCall
		{
			$current.merge(this_Call_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpAccess().getExpAuxParserRuleCall_1());
		}
		this_ExpAux_1=ruleExpAux
		{
			$current.merge(this_ExpAux_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpAccess().getBooleanExpParserRuleCall_2_0());
			}
			this_BooleanExp_2=ruleBooleanExp
			{
				$current.merge(this_BooleanExp_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getExpJoinParserRuleCall_2_1());
				}
				this_ExpJoin_3=ruleExpJoin
				{
					$current.merge(this_ExpJoin_3);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getExpAccess().getAritExpParserRuleCall_3_0());
			}
			this_AritExp_4=ruleAritExp
			{
				$current.merge(this_AritExp_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getExpJoinParserRuleCall_3_1());
				}
				this_ExpJoin_5=ruleExpJoin
				{
					$current.merge(this_ExpJoin_5);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
		    |
		this_STRING_6=RULE_STRING
		{
			$current.merge(this_STRING_6);
		}
		{
			newLeafNode(this_STRING_6, grammarAccess.getExpAccess().getSTRINGTerminalRuleCall_4());
		}
		    |
		{
			newCompositeNode(grammarAccess.getExpAccess().getRelExpParserRuleCall_5());
		}
		this_RelExp_7=ruleRelExp
		{
			$current.merge(this_RelExp_7);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		(
			this_ID_8=RULE_ID
			{
				$current.merge(this_ID_8);
			}
			{
				newLeafNode(this_ID_8, grammarAccess.getExpAccess().getIDTerminalRuleCall_6_0());
			}
			(
				{
					newCompositeNode(grammarAccess.getExpAccess().getExpJoinParserRuleCall_6_1());
				}
				this_ExpJoin_9=ruleExpJoin
				{
					$current.merge(this_ExpJoin_9);
				}
				{
					afterParserOrEnumRuleCall();
				}
			)?
		)
	)
;

// Entry rule entryRuleSimpleStmt
entryRuleSimpleStmt returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSimpleStmtRule()); }
	iv_ruleSimpleStmt=ruleSimpleStmt
	{ $current=$iv_ruleSimpleStmt.current; }
	EOF;

// Rule SimpleStmt
ruleSimpleStmt returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleStmtAccess().getSimpleStmtAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getSimpleStmtAccess().getDeclDeclParserRuleCall_0_1_0());
					}
					lv_decl_1_0=ruleDecl
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSimpleStmtRule());
						}
						set(
							$current,
							"decl",
							lv_decl_1_0,
							"org.xtext.example.go.Go.Decl");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			/* */
		}
		{
			newCompositeNode(grammarAccess.getSimpleStmtAccess().getAssigParserRuleCall_1());
		}
		this_Assig_2=ruleAssig
		{
			$current = $this_Assig_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			(
				{
					/* */
				}
				{
					$current = forceCreateModelElement(
						grammarAccess.getSimpleStmtAccess().getSimpleStmtAction_2_0(),
						$current);
				}
			)
			{
				/* */
			}
			{
				newCompositeNode(grammarAccess.getSimpleStmtAccess().getExpParserRuleCall_2_1());
			}
			ruleExp
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleExpAux
entryRuleExpAux returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpAuxRule()); }
	iv_ruleExpAux=ruleExpAux
	{ $current=$iv_ruleExpAux.current.getText(); }
	EOF;

// Rule ExpAux
ruleExpAux returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='!'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpAuxAccess().getExclamationMarkKeyword_0());
			}
		)?
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpAuxAccess().getLeftParenthesisKeyword_1());
		}
		{
			newCompositeNode(grammarAccess.getExpAuxAccess().getExpParserRuleCall_2());
		}
		this_Exp_2=ruleExp
		{
			$current.merge(this_Exp_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getExpAuxAccess().getRightParenthesisKeyword_3());
		}
		(
			{
				newCompositeNode(grammarAccess.getExpAuxAccess().getExpJoinParserRuleCall_4());
			}
			this_ExpJoin_4=ruleExpJoin
			{
				$current.merge(this_ExpJoin_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
	)
;

// Entry rule entryRuleCall
entryRuleCall returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCallRule()); }
	iv_ruleCall=ruleCall
	{ $current=$iv_ruleCall.current.getText(); }
	EOF;

// Rule Call
ruleCall returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getCallAccess().getIDTerminalRuleCall_0());
		}
		(
			kw='.'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getCallAccess().getFullStopKeyword_1_0());
			}
			this_ID_2=RULE_ID
			{
				$current.merge(this_ID_2);
			}
			{
				newLeafNode(this_ID_2, grammarAccess.getCallAccess().getIDTerminalRuleCall_1_1());
			}
		)*
		kw='('
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			{
				newCompositeNode(grammarAccess.getCallAccess().getExpParserRuleCall_3_0());
			}
			this_Exp_4=ruleExp
			{
				$current.merge(this_Exp_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getCallAccess().getExpListParserRuleCall_3_1());
			}
			this_ExpList_5=ruleExpList
			{
				$current.merge(this_ExpList_5);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)?
		kw=')'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleExpJoin
entryRuleExpJoin returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpJoinRule()); }
	iv_ruleExpJoin=ruleExpJoin
	{ $current=$iv_ruleExpJoin.current.getText(); }
	EOF;

// Rule ExpJoin
ruleExpJoin returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_OP_UNARY_0=RULE_OP_UNARY
			{
				$current.merge(this_OP_UNARY_0);
			}
			{
				newLeafNode(this_OP_UNARY_0, grammarAccess.getExpJoinAccess().getOP_UNARYTerminalRuleCall_0_0());
			}
			    |
			this_OP_REL_1=RULE_OP_REL
			{
				$current.merge(this_OP_REL_1);
			}
			{
				newLeafNode(this_OP_REL_1, grammarAccess.getExpJoinAccess().getOP_RELTerminalRuleCall_0_1());
			}
			    |
			this_OP_SUM_2=RULE_OP_SUM
			{
				$current.merge(this_OP_SUM_2);
			}
			{
				newLeafNode(this_OP_SUM_2, grammarAccess.getExpJoinAccess().getOP_SUMTerminalRuleCall_0_2());
			}
			    |
			this_OP_MULT_3=RULE_OP_MULT
			{
				$current.merge(this_OP_MULT_3);
			}
			{
				newLeafNode(this_OP_MULT_3, grammarAccess.getExpJoinAccess().getOP_MULTTerminalRuleCall_0_3());
			}
			    |
			kw='&&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpJoinAccess().getAmpersandAmpersandKeyword_0_4());
			}
			    |
			kw='||'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpJoinAccess().getVerticalLineVerticalLineKeyword_0_5());
			}
		)
		{
			newCompositeNode(grammarAccess.getExpJoinAccess().getExpParserRuleCall_1());
		}
		this_Exp_6=ruleExp
		{
			$current.merge(this_Exp_6);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRelExp
entryRuleRelExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getRelExpRule()); }
	iv_ruleRelExp=ruleRelExp
	{ $current=$iv_ruleRelExp.current.getText(); }
	EOF;

// Rule RelExp
ruleRelExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_0());
			}
			this_NumberLiteral_0=ruleNumberLiteral
			{
				$current.merge(this_NumberLiteral_0);
			}
			{
				afterParserOrEnumRuleCall();
			}
			(
				this_OP_REL_1=RULE_OP_REL
				{
					$current.merge(this_OP_REL_1);
				}
				{
					newLeafNode(this_OP_REL_1, grammarAccess.getRelExpAccess().getOP_RELTerminalRuleCall_0_1_0());
				}
				    |
				this_OP_UNARY_2=RULE_OP_UNARY
				{
					$current.merge(this_OP_UNARY_2);
				}
				{
					newLeafNode(this_OP_UNARY_2, grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_0_1_1());
				}
			)
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getNumberLiteralParserRuleCall_0_2());
			}
			this_NumberLiteral_3=ruleNumberLiteral
			{
				$current.merge(this_NumberLiteral_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_0());
			}
			this_BooleanLiteral_4=ruleBooleanLiteral
			{
				$current.merge(this_BooleanLiteral_4);
			}
			{
				afterParserOrEnumRuleCall();
			}
			this_OP_UNARY_5=RULE_OP_UNARY
			{
				$current.merge(this_OP_UNARY_5);
			}
			{
				newLeafNode(this_OP_UNARY_5, grammarAccess.getRelExpAccess().getOP_UNARYTerminalRuleCall_1_1());
			}
			{
				newCompositeNode(grammarAccess.getRelExpAccess().getBooleanLiteralParserRuleCall_1_2());
			}
			this_BooleanLiteral_6=ruleBooleanLiteral
			{
				$current.merge(this_BooleanLiteral_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBooleanExp
entryRuleBooleanExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpRule()); }
	iv_ruleBooleanExp=ruleBooleanExp
	{ $current=$iv_ruleBooleanExp.current.getText(); }
	EOF;

// Rule BooleanExp
ruleBooleanExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBooleanExpAccess().getOrParserRuleCall());
	}
	this_Or_0=ruleOr
	{
		$current.merge(this_Or_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleOr
entryRuleOr returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	iv_ruleOr=ruleOr
	{ $current=$iv_ruleOr.current.getText(); }
	EOF;

// Rule Or
ruleOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='!'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOrAccess().getExclamationMarkKeyword_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_1());
		}
		this_And_1=ruleAnd
		{
			$current.merge(this_And_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='||'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getOrAccess().getVerticalLineVerticalLineKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_2_1());
			}
			this_And_3=ruleAnd
			{
				$current.merge(this_And_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleAnd
entryRuleAnd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	iv_ruleAnd=ruleAnd
	{ $current=$iv_ruleAnd.current.getText(); }
	EOF;

// Rule And
ruleAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_0());
		}
		this_BooleanLiteral_0=ruleBooleanLiteral
		{
			$current.merge(this_BooleanLiteral_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			kw='&&'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getAndAccess().getAmpersandAmpersandKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getAndAccess().getBooleanLiteralParserRuleCall_1_1());
			}
			this_BooleanLiteral_2=ruleBooleanLiteral
			{
				$current.merge(this_BooleanLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current.getText(); }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getBooleanLiteralAccess().getBoolParserRuleCall());
	}
	this_Bool_0=ruleBool
	{
		$current.merge(this_Bool_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAritExp
entryRuleAritExp returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAritExpRule()); }
	iv_ruleAritExp=ruleAritExp
	{ $current=$iv_ruleAritExp.current.getText(); }
	EOF;

// Rule AritExp
ruleAritExp returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getAritExpAccess().getAdditionParserRuleCall());
	}
	this_Addition_0=ruleAddition
	{
		$current.merge(this_Addition_0);
	}
	{
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAddition
entryRuleAddition returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current.getText(); }
	EOF;

// Rule Addition
ruleAddition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			this_OP_SUM_0=RULE_OP_SUM
			{
				$current.merge(this_OP_SUM_0);
			}
			{
				newLeafNode(this_OP_SUM_0, grammarAccess.getAdditionAccess().getOP_SUMTerminalRuleCall_0());
			}
		)?
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_1());
		}
		this_Multiplication_1=ruleMultiplication
		{
			$current.merge(this_Multiplication_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)+
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current.getText(); }
	EOF;

// Rule Multiplication
ruleMultiplication returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_0());
		}
		this_NumberLiteral_0=ruleNumberLiteral
		{
			$current.merge(this_NumberLiteral_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				this_OP_MULT_1=RULE_OP_MULT
				{
					$current.merge(this_OP_MULT_1);
				}
				{
					newLeafNode(this_OP_MULT_1, grammarAccess.getMultiplicationAccess().getOP_MULTTerminalRuleCall_1_0());
				}
			)?
			{
				newCompositeNode(grammarAccess.getMultiplicationAccess().getNumberLiteralParserRuleCall_1_1());
			}
			this_NumberLiteral_2=ruleNumberLiteral
			{
				$current.merge(this_NumberLiteral_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
		)*
	)
;

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNumberLiteralRule()); }
	iv_ruleNumberLiteral=ruleNumberLiteral
	{ $current=$iv_ruleNumberLiteral.current.getText(); }
	EOF;

// Rule NumberLiteral
ruleNumberLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_INT_0=RULE_INT
	{
		$current.merge(this_INT_0);
	}
	{
		newLeafNode(this_INT_0, grammarAccess.getNumberLiteralAccess().getINTTerminalRuleCall());
	}
;

// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); }
	iv_ruleTypeName=ruleTypeName
	{ $current=$iv_ruleTypeName.current.getText(); }
	EOF;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getBasicTypesParserRuleCall_0());
		}
		this_BasicTypes_0=ruleBasicTypes
		{
			$current.merge(this_BasicTypes_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getQualifiedIdentParserRuleCall_1());
		}
		this_QualifiedIdent_1=ruleQualifiedIdent
		{
			$current.merge(this_QualifiedIdent_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_2());
		}
		    |
		{
			newCompositeNode(grammarAccess.getTypeNameAccess().getStructParserRuleCall_3());
		}
		this_Struct_3=ruleStruct
		{
			$current.merge(this_Struct_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleQualifiedIdent
entryRuleQualifiedIdent returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQualifiedIdentRule()); }
	iv_ruleQualifiedIdent=ruleQualifiedIdent
	{ $current=$iv_ruleQualifiedIdent.current.getText(); }
	EOF;

// Rule QualifiedIdent
ruleQualifiedIdent returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_ID_0=RULE_ID
		{
			$current.merge(this_ID_0);
		}
		{
			newLeafNode(this_ID_0, grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_0());
		}
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getQualifiedIdentAccess().getFullStopKeyword_1());
		}
		this_ID_2=RULE_ID
		{
			$current.merge(this_ID_2);
		}
		{
			newLeafNode(this_ID_2, grammarAccess.getQualifiedIdentAccess().getIDTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleBool
entryRuleBool returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	iv_ruleBool=ruleBool
	{ $current=$iv_ruleBool.current.getText(); }
	EOF;

// Rule Bool
ruleBool returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBoolAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleBasicTypes
entryRuleBasicTypes returns [String current=null]:
	{ newCompositeNode(grammarAccess.getBasicTypesRule()); }
	iv_ruleBasicTypes=ruleBasicTypes
	{ $current=$iv_ruleBasicTypes.current.getText(); }
	EOF;

// Rule BasicTypes
ruleBasicTypes returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypesAccess().getStringKeyword_0());
		}
		    |
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypesAccess().getIntKeyword_1());
		}
		    |
		kw='bool'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getBasicTypesAccess().getBoolKeyword_2());
		}
	)
;

RULE_OP_SUM : ('+'|'-'|'|'|'^');

RULE_OP_MULT : ('*'|'/'|'%'|'<<'|'>>'|'&'|'&^');

RULE_OP_REL : ('<='|'>='|'<'|'>');

RULE_OP_UNARY : ('=='|'!='|'<-'|'&');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
